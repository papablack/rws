{"version":3,"file":"cfg.js","mappings":";;;;;;;;;AAAA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iCAAiC,8BAAmB;;AAEpD;AACA,gCAAgC,8BAAmB;;AAEnD;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,8BAAmB;AACtD,yCAAyC,8BAAmB;AAC5D,mBAAmB,8BAAmB;AACtC,+BAA+B,8BAAmB;AAClD,uCAAuC,8BAAmB;AAC1D,QAAQ,0BAA0B;AAClC;AACA;AACA,wBAAwB,eAAe;AACvC,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE,wCAAwC,MAAM;AAC9C;AACA;AACA,6DAA6D,MAAM;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iCAAiC,+BAAmB;;AAEpD;AACA,gCAAgC,+BAAmB;;AAEnD;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,+BAAmB;AACtD,kBAAkB,+BAAmB;AACrC,yCAAyC,+BAAmB;AAC5D,uCAAuC,+BAAmB;AAC1D,+BAA+B,+BAAmB;AAClD,6BAA6B,+BAAmB;AAChD,QAAQ,0BAA0B;AAClC;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iCAAiC,+BAAmB;;AAEpD;AACA,gCAAgC,+BAAmB;;AAEnD;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,+BAAmB;AACtD,yCAAyC,+BAAmB;AAC5D,qCAAqC,+BAAmB;AACxD,6BAA6B,+BAAmB;AAChD,+BAA+B,+BAAmB;AAClD,uCAAuC,+BAAmB;AAC1D,qCAAqC,+BAAmB;AACxD,wCAAwC,+BAAmB;AAC3D,qCAAqC,+BAAmB;AACxD,4CAA4C,+BAAmB;AAC/D,QAAQ,kCAAkC;AAC1C;AACA;AACA,wBAAwB,eAAe;AACvC,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA,0CAA0C,sCAAsC;AAChF,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0CAA0C;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,UAAU;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,UAAU;AACrD,oCAAoC,UAAU,aAAa,UAAU,YAAY,WAAW,WAAW,UAAU;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,cAAc;AACtG,kEAAkE,cAAc,oCAAoC,6BAA6B;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,cAAc;AAC7E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,4CAA4C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,UAAU,oBAAoB,cAAc;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,cAAc,oCAAoC,6BAA6B;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,UAAU,oBAAoB,cAAc,kDAAkD,cAAc;AAC3J;AACA;AACA,gBAAgB,4CAA4C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA,4DAA4D,cAAc,mBAAmB,iCAAiC;AAC9H;AACA;AACA;AACA,mDAAmD,cAAc,6BAA6B,wBAAwB,mBAAmB,iCAAiC;AAC1K;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,+BAA+B,gCAAmB;AAClD,6BAA6B,gCAAmB;AAChD,uCAAuC,gCAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,0BAA0B,uDAAuD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,wCAAwC,gCAAmB;AAC3D,sCAAsC,gCAAmB;AACzD,uCAAuC,gCAAmB;AAC1D;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,gCAAmB;AACtD,mCAAmC,gCAAmB;AACtD,mCAAmC,gCAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,WAAW,IAAI,WAAW;AACzI;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,WAAW,IAAI,WAAW;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,iCAAiC,gCAAmB;AACpD;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,iCAAiC,gCAAmB;AACpD;AACA;AACA;AACA;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,iCAAiC,gCAAmB;AACpD;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU,IAAI,aAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD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;AACA,4BAA4B,KAAK;AACjC;AACA;AACA;AACA,4BAA4B,KAAK,EAAE,4BAA4B,EAAE,gBAAgB,EAAE,eAAe;AAClG;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,GAAG;AACH,kCAAkC;AAClC,kBAAkB,OAAO;AACzB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F,OAAO;AACtG;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D;AACA,gBAAgB,gCAAmB;AACnC,oCAAoC,gCAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,IAAI;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,IAAI;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,gCAAmB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW,GAAG,YAAY;AACjE;AACA;AACA,qDAAqD;AACrD;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,IAAI;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,SAAS,+BAA+B;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,0CAA0C,gCAAmB;;AAE7D;;AAEA,gDAAgD,aAAa;AAC7D,gCAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,kDAAkD,IAAI;AACtD;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,0CAA0C,gCAAmB;;AAE7D;;AAEA,gDAAgD,aAAa;AAC7D,gCAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,IAAI;AACxD;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,0CAA0C,gCAAmB;;AAE7D;;AAEA,gDAAgD,aAAa;AAC7D,gCAAmB;AACnB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,IAAI;AAC/C;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,0CAA0C,gCAAmB;;AAE7D;;AAEA,gDAAgD,aAAa;AAC7D,gCAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,IAAI;AAChD;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D;AACA,0CAA0C,gCAAmB;AAC7D;AACA,mCAAmC,gCAAmB;AACtD;AACA,oCAAoC,gCAAmB;AACvD;AACA,4CAA4C,gCAAmB;AAC/D;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,eAAe,gCAAmB;AAClC,wBAAwB,gCAAmB;AAC3C,6CAA6C,gCAAmB;AAChE,yCAAyC,gCAAmB;AAC5D,mBAAmB,gCAAmB;AACtC,eAAe,gCAAmB;AAClC,2CAA2C,gCAAmB;AAC9D,iBAAiB,gCAAmB;AACpC,iBAAiB,gCAAmB;AACpC,iCAAiC,gCAAmB;AACpD,6BAA6B,gCAAmB;AAChD,+BAA+B,gCAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAA0D;AAC/F;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,+CAA+C,iBAAiB;AAChE;AACA;AACA;AACA;AACA,6CAA6C,gBAAgB,sBAAsB,iBAAiB;AACpG,gDAAgD,kBAAkB,mCAAmC,eAAe;AACpH,6CAA6C,gBAAgB,6BAA6B,kBAAkB;AAC5G;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yDAAyD,kBAAkB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,UAAU;AAChE;AACA,yDAAyD,qBAAqB;AAC9E,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,MAAM;AAC1F;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wCAAwC;AAC1D;AACA;AACA,kBAAkB,wCAAwC,GAAG,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,iBAAiB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,0CAA0C,gCAAmB;;AAE7D;;AAEA,gDAAgD,aAAa;AAC7D,gBAAgB,gCAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,aAAa;AAC7D,8BAA8B,gCAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,0CAA0C,gCAAmB;;AAE7D;;AAEA,gDAAgD,aAAa;AAC7D,gCAAmB;AACnB,gDAAgD,sBAAsB;AACtE,qBAAqB;AACrB;AACA,wCAAwC,IAAI;AAC5C;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D;AACA,gCAAgC,gCAAmB;AACnD;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,gCAAmB;AACtD,yCAAyC,gCAAmB;AAC5D,qCAAqC,gCAAmB;AACxD,wCAAwC,gCAAmB;AAC3D,qCAAqC,gCAAmB;AACxD,QAAQ,qBAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,kBAAkB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,sBAAsB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4CAA4C,mBAAmB;AAC/D,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,gCAAmB;AACtD,2CAA2C,gCAAmB;AAC9D,yCAAyC,gCAAmB;AAC5D,kCAAkC,gCAAmB;AACrD,QAAQ,kCAAkC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D;AACA,mCAAmC,gCAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gCAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,gCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,2CAA2C,gCAAmB;AAC9D,uCAAuC,gCAAmB;AAC1D,mCAAmC,gCAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,qCAAqC,iCAAmB;AACxD,mCAAmC,iCAAmB;AACtD,yCAAyC,iCAAmB;AAC5D,QAAQ,4BAA4B;AACpC;AACA;AACA;AACA;AACA,4CAA4C,mBAAmB,GAAG;AAClE;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,EAAE,0CAA0C,IAAI,cAAc;AACpH,SAAS;AACT;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,iCAAmB;AACtD,gCAAgC,iCAAmB;AACnD,+BAA+B,iCAAmB;AAClD,sCAAsC,iCAAmB,qCAAqC;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,UAAU;AACnF;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D;AACA,iBAAiB,iCAAmB;AACpC,kBAAkB,iCAAmB;AACrC,2CAA2C,iCAAmB;AAC9D,mCAAmC,iCAAmB;AACtD,yCAAyC,iCAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,kCAAkC;AAC1F;AACA;AACA;AACA,iDAAiD,MAAM;AACvD,kDAAkD,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,kDAAkD,cAAc;AAChE;AACA;AACA;AACA,uEAAuE,mBAAmB;AAC1F;AACA;AACA,iEAAiE,mBAAmB;AACpF;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iCAAiC,iCAAmB;;AAEpD;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,iCAAmB;AACtD,yCAAyC,iCAAmB;AAC5D,wCAAwC,iCAAmB;AAC3D,qCAAqC,iCAAmB;AACxD,yCAAyC,iCAAmB;AAC5D,+BAA+B,iCAAmB;AAClD,qCAAqC,iCAAmB;AACxD,QAAQ,kCAAkC;AAC1C,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,mFAAmF,6BAA6B;AAChH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAyC;AAC5D;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yCAAyC;AAChE;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,mEAAmE,4BAA4B;AAC/F,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAiE;AAChF;AACA,4FAA4F,4BAA4B;AACxH;AACA;AACA;AACA;AACA,uBAAuB,yCAAyC;AAChE,sFAAsF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uEAAuE;AAC9F,4FAA4F,4BAA4B;AACxH;AACA;AACA,2BAA2B,kDAAkD;AAC7E;AACA;AACA;AACA,2BAA2B,2EAA2E;AACtG;AACA,uBAAuB,+CAA+C;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2EAA2E;AAC1F;AACA,mGAAmG,8BAA8B;AACjI;AACA;AACA;AACA;AACA,uBAAuB,4CAA4C;AACnE,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAyC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAyC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA,mBAAmB,uCAAuC,0BAA0B,sBAAsB,yBAAyB,iBAAiB,SAAS,cAAc,KAAK,UAAU;AAC1L;AACA,kEAAkE,sBAAsB;AACxF;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA,mBAAmB,uCAAuC,0BAA0B,qBAAqB;AACzG,2EAA2E,UAAU;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iCAAiC,iCAAmB;;AAEpD;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,iCAAmB;AACtD,2CAA2C,iCAAmB;AAC9D,qCAAqC,iCAAmB;AACxD,yCAAyC,iCAAmB;AAC5D,qCAAqC,iCAAmB;AACxD,qCAAqC,iCAAmB;AACxD,oCAAoC,iCAAmB;AACvD,4CAA4C,iCAAmB;AAC/D,+BAA+B,iCAAmB;AAClD,6BAA6B,iCAAmB;AAChD,uCAAuC,iCAAmB;AAC1D,yCAAyC,iCAAmB;AAC5D,qCAAqC,iCAAmB;AACxD,QAAQ,kCAAkC;AAC1C,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,cAAc;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,YAAY;AACpE;AACA,6BAA6B,4CAA4C;AACzE,mCAAmC,cAAc;AACjD;AACA,eAAe,uCAAuC,YAAY,qCAAqC,QAAQ,iCAAiC;AAChJ;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uCAAuC,EAAE,8CAA8C;AACtG;AACA;AACA;AACA;AACA,iFAAiF,cAAc;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uCAAuC,EAAE,4DAA4D,QAAQ,oBAAoB,aAAa,GAAG,gBAAgB,OAAO;AAC3L,mBAAmB,uCAAuC,YAAY,8BAA8B;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uCAAuC,WAAW,+BAA+B,KAAK,oBAAoB,aAAa,OAAO,gBAAgB,OAAO;AACxK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wFAAwF,gBAAgB,GAAG,aAAa;AACxH;AACA;AACA,6DAA6D,mBAAmB,aAAa,yCAAyC;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU,oBAAoB,cAAc;AAC9E;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uCAAuC;AAC1D;AACA;AACA;AACA,eAAe,uCAAuC,EAAE,mEAAmE;AAC3H;AACA;AACA,6BAA6B,UAAU,oBAAoB,aAAa;AACxE,iCAAiC,cAAc;AAC/C;AACA,oCAAoC,cAAc;AAClD;AACA,mCAAmC,UAAU,oBAAoB,aAAa;AAC9E,wEAAwE,cAAc,gCAAgC,aAAa;AACnI;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA,mBAAmB,uCAAuC,yBAAyB,SAAS;AAC5F;AACA;AACA;AACA,mBAAmB,uCAAuC,EAAE,iGAAiG;AAC7J;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,uFAAuF,gBAAgB,GAAG,aAAa;AACvH;AACA;AACA;AACA;AACA,wEAAwE,kCAAkC;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6HAA6H;AAC5I;AACA,mBAAmB,4CAA4C;AAC/D,oBAAoB,gBAAgB;AACpC;AACA,wBAAwB;AACxB;AACA;AACA;AACA,mDAAmD,oBAAoB,8BAA8B,0BAA0B;AAC/H;AACA;AACA;AACA;AACA,2CAA2C,oBAAoB,8BAA8B,UAAU;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,gBAAgB,aAAa,gBAAgB;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,6BAA6B,aAAa,YAAY,UAAU;AAChE;AACA,+DAA+D,YAAY;AAC3E,sCAAsC,UAAU,YAAY,UAAU;AACtE;AACA,iEAAiE,eAAe;AAChF;AACA;AACA;AACA,4DAA4D,YAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iCAAiC,oCAAoC,UAAU;AACtH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,yCAAyC;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+BAA+B,kDAAkD;AACjF;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,iCAAmB;AACtD,iCAAiC,iCAAmB;AACpD,+BAA+B,iCAAmB;AAClD,6BAA6B,iCAAmB;AAChD,2CAA2C,iCAAmB;AAC9D,uCAAuC,iCAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa,kDAAkD,aAAa;AACpH;AACA;AACA,wDAAwD,aAAa;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,iCAAmB;AACtD,wBAAwB,iCAAmB;AAC3C,wBAAwB,iCAAmB;AAC3C,yCAAyC,iCAAmB;AAC5D,mCAAmC,iCAAmB;AACtD,6BAA6B,iCAAmB;AAChD,QAAQ,0BAA0B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,KAAK,QAAQ,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,2CAA2C;AAC/G;AACA;AACA,6EAA6E,KAAK;AAClF;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,iCAAmB;AACnB,mCAAmC,iCAAmB;AACtD,2CAA2C,iCAAmB;AAC9D,+BAA+B,iCAAmB;AAClD,gBAAgB,iCAAmB;AACnC,yCAAyC,iCAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,WAAW,GAAG,YAAY;AACjE;AACA;AACA,qDAAqD;AACrD;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,UAAU,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,iCAAmB;AACtD,qCAAqC,iCAAmB;AACxD,yCAAyC,iCAAmB;AAC5D,QAAQ,0BAA0B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wCAAwC;AAC7F;AACA,uBAAuB,uCAAuC,EAAE,6CAA6C,EAAE,WAAW;AAC1H,0CAA0C,wCAAwC;AAClF;AACA;AACA;AACA,qDAAqD,wCAAwC;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC,wCAAwC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,oBAAoB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uCAAuC,YAAY,YAAY;AACtF;AACA;AACA;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iCAAiC,iCAAmB;;AAEpD;;AAEA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,gDAAgD,aAAa;AAC7D,oBAAoB,iCAAmB;AACvC,gCAAgC,iCAAmB;AACnD,2CAA2C,iCAAmB;AAC9D,+BAA+B,iCAAmB;AAClD,4BAA4B,iCAAmB;AAC/C,sCAAsC,iCAAmB;AACzD,6BAA6B,iCAAmB;AAChD,kCAAkC,iCAAmB;AACrD,wCAAwC,iCAAmB;AAC3D,yCAAyC,iCAAmB;AAC5D,yCAAyC,iCAAmB;AAC5D,uCAAuC,iCAAmB;AAC1D,+BAA+B,iCAAmB;AAClD,sCAAsC,iCAAmB;AACzD,mCAAmC,iCAAmB;AACtD,sCAAsC,iCAAmB;AACzD,mBAAmB,iCAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,2HAA2H,SAAS,GAAG,sCAAsC,OAAO,4DAA4D,SAAS,SAAS,OAAO,KAAK;AAC9Q;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,2IAA2I,UAAU,YAAY,kBAAkB;AACnL,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,oIAAoI,OAAO,WAAW,+BAA+B;AACrL,iBAAiB;AACjB;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD,2CAA2C;AAC3C;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,yDAAyD,gBAAgB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,OAAO;AAC5E;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC,wBAAwB,eAAe;AACvC,wBAAwB,mBAAmB,qEAAqE,4BAA4B;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,iCAAmB;AACtD,+BAA+B,iCAAmB;AAClD,6BAA6B,iCAAmB;AAChD;AACA;AACA;AACA;AACA,oEAAoE,qBAAqB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,iCAAmB;AACtD,6BAA6B,iCAAmB;AAChD,+BAA+B,iCAAmB;AAClD,qBAAqB,iCAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW;AAC3C,wCAAwC,aAAa,GAAG,SAAS;AACjE;AACA;AACA;AACA,gDAAgD,aAAa,GAAG,SAAS;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA,sCAAsC,aAAa,GAAG,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,qCAAqC,iCAAmB;AACxD,yCAAyC,iCAAmB;AAC5D,mCAAmC,iCAAmB;AACtD,QAAQ,kCAAkC;AAC1C;AACA;AACA;AACA,gFAAgF,YAAY,qCAAqC,GAAG;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6CAA6C,iCAAiC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,qCAAqC,aAAa,qBAAqB,2CAA2C;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,mDAAmD,eAAe,iBAAiB,wBAAwB;AAC3G;AACA;AACA,6CAA6C,eAAe,gCAAgC,wBAAwB;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,YAAY,iCAAiC,GAAG;AAC9H;AACA;AACA,4BAA4B,0DAA0D;AACtF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,iBAAiB;AAC5F;AACA;AACA;AACA;AACA;AACA,8EAA8E,YAAY,iCAAiC,GAAG;AAC9H,6KAA6K,qBAAqB;AAClM;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mGAAmG,wCAAwC,GAAG,SAAS,KAAK,SAAS;AACrK;AACA;AACA,0BAA0B,wCAAwC,GAAG,eAAe,KAAK,iBAAiB;AAC1G,sDAAsD,MAAM,cAAc,aAAa;AACvF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iDAAiD,uBAAuB,SAAS,MAAM,cAAc,aAAa;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA,aAAa;AACb,kCAAkC,cAAc;AAChD;AACA;AACA,mDAAmD,cAAc;AACjE;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,iCAAmB;AACtD,sCAAsC,iCAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,mCAAmC,iCAAmB;AACtD,yCAAyC,iCAAmB;AAC5D,+BAA+B,iCAAmB;AAClD,6BAA6B,iCAAmB;AAChD,mCAAmC,iCAAmB;AACtD,QAAQ,0BAA0B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,eAAe,uCAAuC;AACtD;AACA;AACA;AACA;AACA,yCAAyC,mBAAmB;AAC5D;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6BAA6B;AACzE;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D,gCAAgC,iCAAmB;AACnD,gCAAgC,iCAAmB;AACnD,2CAA2C,iCAAmB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gDAAgD;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D;AACA,oCAAoC,iCAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA,wCAAwC,KAAK,GAAG,aAAa;AAC7D,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D;AACA,2CAA2C,iCAAmB;AAC9D,wCAAwC,iCAAmB;AAC3D,2BAA2B,iCAAmB;AAC9C,4BAA4B,iCAAmB;AAC/C,4BAA4B,iCAAmB;AAC/C,oCAAoC,iCAAmB;AACvD,sCAAsC,iCAAmB;AACzD,qCAAqC,iCAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,UAAU;AACjF;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA,kDAAkD,iCAAmB;;AAErE;;AAEA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,gDAAgD,aAAa;AAC7D;AACA,sCAAsC,iCAAmB;AACzD;AACA,wCAAwC,iCAAmB;AAC3D;AACA,kCAAkC,iCAAmB;AACrD;AACA,2CAA2C,qCAAqC,8BAA8B;AAC9G,kCAAkC,iCAAmB;AACrD;AACA,qCAAqC,iCAAmB;AACxD;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAO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AACA,iBAAiB,mBAAO,CAAC,oCAAe;;AAExC,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAO,CAAC,sBAAQ;;AAEjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAO,CAAC,kBAAM;;AAE/B,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAO,CAAC,oBAAO;;AAEhC,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAO,CAAC,cAAI;;AAE7B,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAO,CAAC,0BAAU;;AAEnC,OAAO;;AAEP,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,mBAAmB,iCAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,iCAAmB;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iCAAmB;AAC9B,WAAW;AACX;AACA;AACA;AACA,WAAW,iCAAmB;AAC9B;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,IAAI,0BAAmB;AACvB;AACA;AACA;AACA,cAAc,0BAAmB;AACjC;AACA;AACA;AACA;;AAEA,gDAAgD,aAAa;AAC7D,gBAAgB,iCAAmB;AACnC,QAAQ,kCAAkC;AAC1C,WAAW,iCAAmB;AAC9B,aAAa,iCAAmB;AAChC;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,qDAAqD,6BAA6B,UAAU;AACxK;AACA;AAC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","sources":["webpack:///./src/cfg.js","webpack:///../src/services/ sync","webpack:///../src/commands/ClearCommand.ts","webpack:///../src/commands/InitCommand.ts","webpack:///../src/commands/LambdaCommand.ts","webpack:///../src/commands/_command.ts","webpack:///../src/commands/index.ts","webpack:///../src/controllers/_controller.ts","webpack:///../src/errors/Error403.ts","webpack:///../src/errors/Error404.ts","webpack:///../src/errors/Error500.ts","webpack:///../src/errors/_error.ts","webpack:///../src/errors/index.ts","webpack:///../src/index.ts","webpack:///../src/init.ts","webpack:///../src/install.ts","webpack:///../src/models/_model.ts","webpack:///../src/models/annotations/InverseRelation.ts","webpack:///../src/models/annotations/InverseTimeSeries.ts","webpack:///../src/models/annotations/Relation.ts","webpack:///../src/models/annotations/TrackType.ts","webpack:///../src/models/annotations/index.ts","webpack:///../src/models/convo/ConvoLoader.ts","webpack:///../src/models/convo/VectorStore.ts","webpack:///../src/models/prompts/_prompt.ts","webpack:///../src/models/types/TimeSeriesModel.ts","webpack:///../src/routing/annotations/Route.ts","webpack:///../src/routing/annotations/index.ts","webpack:///../src/services/APIGatewayService.ts","webpack:///../src/services/AWSService.ts","webpack:///../src/services/AppConfigService.ts","webpack:///../src/services/AuthService.ts","webpack:///../src/services/CloudWatchService.ts","webpack:///../src/services/ConsoleService.ts","webpack:///../src/services/DBService.ts","webpack:///../src/services/EFSService.ts","webpack:///../src/services/LambdaService.ts","webpack:///../src/services/MD5Service.ts","webpack:///../src/services/ProcessService.ts","webpack:///../src/services/RouterService.ts","webpack:///../src/services/S3Service.ts","webpack:///../src/services/ServerService.ts","webpack:///../src/services/TraversalService.ts","webpack:///../src/services/UtilsService.ts","webpack:///../src/services/VPCService.ts","webpack:///../src/services/VectorStoreService.ts","webpack:///../src/services/ZipService.ts","webpack:///../src/services/_service.ts","webpack:///../src/sockets/_socket.ts","webpack:///../src/tests/actions/_action.ts","webpack:///../src/tests/helpers/AxiosHelper.ts","webpack:///../src/tests/helpers/BrowserHelper.ts","webpack:///../src/tests/helpers/TestHelper.ts","webpack:///../src/tests/index.ts","webpack:///../src/tests/test_cases/_test_case.ts","webpack:///external commonjs \"@langchain/community/vectorstores/faiss\"","webpack:///external commonjs \"@prisma/client\"","webpack:///external commonjs \"archiver\"","webpack:///external commonjs \"aws-sdk\"","webpack:///external commonjs \"axios\"","webpack:///external commonjs \"body-parser\"","webpack:///external commonjs \"chai\"","webpack:///external commonjs \"chai-like\"","webpack:///external commonjs \"chai-things\"","webpack:///external commonjs \"chalk\"","webpack:///external commonjs \"compression\"","webpack:///external commonjs \"cors\"","webpack:///external commonjs \"express\"","webpack:///external commonjs \"express-fileupload\"","webpack:///external commonjs \"fs\"","webpack:///external commonjs \"fs/promises\"","webpack:///external commonjs \"jsonwebtoken\"","webpack:///external commonjs \"langchain/chains\"","webpack:///external commonjs \"langchain/document\"","webpack:///external commonjs \"langchain/document_loaders/fs/text\"","webpack:///external commonjs \"langchain/text_splitter\"","webpack:///external commonjs \"mocha\"","webpack:///external commonjs \"mongodb\"","webpack:///external commonjs \"path\"","webpack:///external commonjs \"pino\"","webpack:///external commonjs \"pino-pretty\"","webpack:///external commonjs \"puppeteer\"","webpack:///external commonjs \"reflect-metadata\"","webpack:///external commonjs \"socket.io\"","webpack:///external commonjs \"socket.io-client\"","webpack:///external commonjs \"source-map\"","webpack:///external commonjs \"uuid\"","webpack:///external commonjs \"xml2js\"","webpack:///external node-commonjs \"child_process\"","webpack:///external node-commonjs \"crypto\"","webpack:///external node-commonjs \"http\"","webpack:///external node-commonjs \"https\"","webpack:///external node-commonjs \"os\"","webpack:///external node-commonjs \"readline\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/node module decorator","webpack:///./src/rws.ts"],"sourcesContent":["/******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"../src/services sync recursive\":\n/*!*****************************!*\\\n  !*** ../src/services/ sync ***!\n  \\*****************************/\n/***/ ((module) => {\n\nfunction webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"../src/services sync recursive\";\nmodule.exports = webpackEmptyContext;\n\n/***/ }),\n\n/***/ \"../src/commands/ClearCommand.ts\":\n/*!***************************************!*\\\n  !*** ../src/commands/ClearCommand.ts ***!\n  \\***************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _command_1 = __importDefault(__webpack_require__(/*! ./_command */ \"../src/commands/_command.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ../services/ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst promises_1 = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst UtilsService_1 = __importDefault(__webpack_require__(/*! ../services/UtilsService */ \"../src/services/UtilsService.ts\"));\nconst { log, warn, error, color } = ConsoleService_1.default;\nconst executionDir = process.cwd();\nconst packageRootDir = UtilsService_1.default.findRootWorkspacePath(executionDir);\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\nconst cfgPathFile = `${moduleCfgDir}/_cfg_path`;\nconst moduleDir = path_1.default.resolve(path_1.default.dirname(module.id), '..', '..').replace('dist', '');\nclass ClearCommand extends _command_1.default {\n    constructor() {\n        super('clear', module);\n    }\n    async removeDirRecursively(path) {\n        try {\n            await (0, promises_1.rmdir)(path, { recursive: true });\n            console.log(`Directory at ${path} removed successfully`);\n        }\n        catch (error) {\n            console.error(`Error while removing directory: ${error}`);\n        }\n    }\n    async execute(params) {\n        ConsoleService_1.default.log('clearing systems...');\n        await this.removeDirRecursively(moduleCfgDir);\n        ConsoleService_1.default.log(color().green('[RWS]') + ' systems cleared. Use npx rws init to reinitialize.');\n    }\n}\nexports[\"default\"] = ClearCommand.createCommand();\n\n\n/***/ }),\n\n/***/ \"../src/commands/InitCommand.ts\":\n/*!**************************************!*\\\n  !*** ../src/commands/InitCommand.ts ***!\n  \\**************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _command_1 = __importDefault(__webpack_require__(/*! ./_command */ \"../src/commands/_command.ts\"));\nconst install_1 = __webpack_require__(/*! ../install */ \"../src/install.ts\");\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ../services/ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst UtilsService_1 = __importDefault(__webpack_require__(/*! ../services/UtilsService */ \"../src/services/UtilsService.ts\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst { log, warn, error, color } = ConsoleService_1.default;\nconst executionDir = process.cwd();\nconst packageRootDir = UtilsService_1.default.findRootWorkspacePath(executionDir);\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\nconst moduleDir = path_1.default.resolve(path_1.default.dirname(module.id), '..', '..').replace('dist', '');\nclass InitCommand extends _command_1.default {\n    constructor() {\n        super('init', module);\n    }\n    async execute(params) {\n        ConsoleService_1.default.log(color().green('[RWS]') + ' starting systems...');\n        const configPath = params.config || params._default || 'config/config';\n        if (!configPath) {\n            ConsoleService_1.default.error('[RWS] No config path provided! Use \"npx rws init path/to/config/file (from ./src)\"');\n            return;\n        }\n        try {\n            const cfgData = params._rws_config;\n            try {\n                await (0, install_1.SetupRWS)(cfgData);\n                const prismaCfgPath = moduleDir + '/prisma/schema.prisma';\n                fs_1.default.unlinkSync(prismaCfgPath);\n                ConsoleService_1.default.log(color().green('[RWS]') + ' systems initialized.');\n            }\n            catch (error) {\n                ConsoleService_1.default.error('Error while initiating RWS server installation:', error);\n            }\n        }\n        catch (e) {\n            ConsoleService_1.default.log(color().red('[RWS]') + ' wrong config file path...');\n            throw new Error(e);\n        }\n    }\n}\nexports[\"default\"] = InitCommand.createCommand();\n\n\n/***/ }),\n\n/***/ \"../src/commands/LambdaCommand.ts\":\n/*!****************************************!*\\\n  !*** ../src/commands/LambdaCommand.ts ***!\n  \\****************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _command_1 = __importDefault(__webpack_require__(/*! ./_command */ \"../src/commands/_command.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ../services/ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst AWSService_1 = __importDefault(__webpack_require__(/*! ../services/AWSService */ \"../src/services/AWSService.ts\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst UtilsService_1 = __importDefault(__webpack_require__(/*! ../services/UtilsService */ \"../src/services/UtilsService.ts\"));\nconst EFSService_1 = __importDefault(__webpack_require__(/*! ../services/EFSService */ \"../src/services/EFSService.ts\"));\nconst LambdaService_1 = __importDefault(__webpack_require__(/*! ../services/LambdaService */ \"../src/services/LambdaService.ts\"));\nconst VPCService_1 = __importDefault(__webpack_require__(/*! ../services/VPCService */ \"../src/services/VPCService.ts\"));\nconst CloudWatchService_1 = __importDefault(__webpack_require__(/*! ../services/CloudWatchService */ \"../src/services/CloudWatchService.ts\"));\nconst { log, warn, error, color, rwsLog } = ConsoleService_1.default;\nconst executionDir = process.cwd();\nconst packageRootDir = UtilsService_1.default.findRootWorkspacePath(executionDir);\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\nconst cfgPathFile = `${moduleCfgDir}/_cfg_path`;\nconst moduleDir = path_1.default.resolve(path_1.default.dirname(module.id), '..', '..').replace('dist/', '');\nconst lambdasCfg = {\n    artillery: {\n        preArchive: async (params) => {\n            const sourceArtilleryCfg = `${path_1.default.resolve(process.cwd())}/artillery-config.yml`;\n            const targetArtilleryCfg = `${moduleDir}/lambda-functions/artillery/artillery-config.yml`;\n            if (fs_1.default.existsSync(targetArtilleryCfg)) {\n                fs_1.default.unlinkSync(targetArtilleryCfg);\n            }\n            if (!fs_1.default.existsSync(sourceArtilleryCfg)) {\n                throw `Create \"artillery-config.yml\" in your project root directory.`;\n            }\n            rwsLog('RWS Lambda CLI | artillery | preDeploy', ' copying artillery config.');\n            fs_1.default.copyFileSync(sourceArtilleryCfg, targetArtilleryCfg);\n        },\n        postDeploy: async (params) => {\n            const targetArtilleryCfg = `${moduleDir}/lambda-functions/artillery/artillery-config.yml`;\n            if (fs_1.default.existsSync(targetArtilleryCfg)) {\n                fs_1.default.unlinkSync(targetArtilleryCfg);\n                rwsLog('RWS Lambda CLI | artillery | postDeploy', 'artillery config cleaned up');\n            }\n        }\n    }\n};\nclass LambdaCommand extends _command_1.default {\n    constructor() {\n        super('lambda', module);\n        this.executeLambdaLifeCycle = async (lifeCycleEventName, lambdaDirName, params) => {\n            if (!lambdasCfg[lambdaDirName] || !lambdasCfg[lambdaDirName][lifeCycleEventName]) {\n                return;\n            }\n            const theAction = lambdasCfg[lambdaDirName][lifeCycleEventName];\n            if (theAction && UtilsService_1.default.isInterface(theAction)) {\n                await theAction(params);\n            }\n        };\n    }\n    async execute(params) {\n        AWSService_1.default._initApis();\n        const { lambdaCmd, extraParams, subnetId, vpcId } = await this.getLambdaParameters(params);\n        const PermissionCheck = await AWSService_1.default.checkForRolePermissions(params._rws_config.aws_lambda_role, [\n            'lambda:CreateFunction',\n            'lambda:UpdateFunctionCode',\n            'lambda:UpdateFunctionConfiguration',\n            'lambda:InvokeFunction',\n            'lambda:ListFunctions',\n            's3:GetObject',\n            's3:PutObject',\n            'elasticfilesystem:CreateFileSystem',\n            'elasticfilesystem:DeleteFileSystem',\n            \"elasticfilesystem:DescribeFileSystems\",\n            'elasticfilesystem:CreateAccessPoint',\n            'elasticfilesystem:DeleteAccessPoint',\n            \"elasticfilesystem:DescribeAccessPoints\",\n            'elasticfilesystem:CreateMountTarget',\n            \"elasticfilesystem:DeleteMountTarget\",\n            'elasticfilesystem:DescribeMountTargets',\n            \"ec2:CreateSecurityGroup\",\n            \"ec2:DescribeSecurityGroups\",\n            \"ec2:DescribeSubnets\",\n            \"ec2:DescribeVpcs\",\n            \"ec2:CreateVpcEndpoint\",\n            \"ec2:DescribeVpcEndpoints\",\n            \"ec2:ModifyVpcEndpoint\",\n            \"ec2:DeleteVpcEndpoint\",\n            'cloudwatch:PutMetricData',\n            'cloudwatch:GetMetricData'\n        ]);\n        if (!PermissionCheck.OK) {\n            error('Lambda role has not enough permissions. Add following actions to your IAM role permissions policies:');\n            log(PermissionCheck.policies);\n            return;\n        }\n        else {\n            rwsLog(color().green('AWS IAM Role is eligible for operations.'));\n        }\n        if (!!extraParams && !!extraParams.redeploy_loader) {\n            const zipPath = await LambdaService_1.default.archiveLambda(`${moduleDir}/lambda-functions/efs-loader`, moduleCfgDir, true);\n            await LambdaService_1.default.deployLambda('efs-loader', zipPath, vpcId, subnetId, true);\n        }\n        switch (lambdaCmd) {\n            case 'deploy':\n                await this.deploy(params);\n                return;\n            case 'undeploy':\n                await this.undeploy(params);\n                return;\n            case 'invoke':\n                await this.invoke(params);\n                return;\n            case 'delete':\n                await this.delete(params);\n                return;\n            case 'list':\n                await this.list(params);\n                return;\n            case 'open-to-web':\n                await this.openToWeb(params);\n                return;\n            default:\n                error(`[RWS Lambda CLI] \"${lambdaCmd}\" command is not supported in RWS Lambda CLI`);\n                log(`Try: \"deploy:${lambdaCmd}\", \"delete:${lambdaCmd}\", invoke:${lambdaCmd} or \"list:${lambdaCmd}\"`);\n                return;\n        }\n    }\n    async getLambdaParameters(params) {\n        const lambdaString = params.lambdaString || params._default;\n        const [subnetId, vpcId] = params.subnetId || await VPCService_1.default.findDefaultSubnetForVPC();\n        const lambdaStringArr = lambdaString.split(':');\n        const lambdaCmd = lambdaStringArr[0];\n        const lambdaDirName = lambdaStringArr[1];\n        const lambdaArg = lambdaStringArr.length > 2 ? lambdaStringArr[2] : null;\n        const extraParams = params._extra_args.deploy_loader;\n        return {\n            lambdaCmd,\n            lambdaDirName,\n            subnetId,\n            vpcId,\n            lambdaArg,\n            extraParams\n        };\n    }\n    async invoke(params) {\n        const { lambdaDirName, lambdaArg } = await this.getLambdaParameters(params);\n        let payload = {};\n        if (lambdaArg) {\n            const payloadPath = LambdaService_1.default.findPayload(lambdaArg);\n            payload = JSON.parse(fs_1.default.readFileSync(payloadPath, 'utf-8'));\n        }\n        const response = await LambdaService_1.default.invokeLambda(lambdaDirName, payload);\n        const logsTimeout = await CloudWatchService_1.default.printLogsForLambda(`RWS-${lambdaDirName}`);\n        rwsLog('RWS Lambda Service', color().yellowBright(`\"RWS-${lambdaDirName}\" lambda function response (Code: ${response.Response.StatusCode}):`));\n        if (response.InvocationType === 'RequestResponse') {\n            log(response.Response.Payload);\n            clearTimeout(logsTimeout.core);\n        }\n    }\n    async list(params) {\n        const listFunctionsParams = {\n            MaxItems: 100,\n        };\n        const rwsLambdaFunctions = [];\n        try {\n            const functionsResponse = await AWSService_1.default.getLambda().listFunctions(listFunctionsParams).promise();\n            if (functionsResponse.Functions) {\n                for (const functionConfig of functionsResponse.Functions) {\n                    if (functionConfig.FunctionName && functionConfig.FunctionName.startsWith('RWS-')) {\n                        rwsLambdaFunctions.push(functionConfig);\n                    }\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(`Error listing Lambda functions: ${error.message}`);\n        }\n        rwsLog('RWS Lambda Service', color().yellowBright(`RWS lambda functions list:`));\n        rwsLog('RWS Lambda Service', color().yellowBright(`ARN  |  NAME`));\n        rwsLambdaFunctions.map((funct) => funct.FunctionArn + '  |  ' + funct.FunctionName).forEach((msg) => {\n            log(msg);\n        });\n    }\n    async deploy(params) {\n        const { lambdaDirName, vpcId, subnetId, lambdaArg } = await this.getLambdaParameters(params);\n        if (lambdaDirName === 'modules') {\n            const [efsId] = await EFSService_1.default.getOrCreateEFS('RWS_EFS', vpcId, subnetId);\n            LambdaService_1.default.setRegion(params._rws_config.aws_lambda_region);\n            await LambdaService_1.default.deployModules(lambdaArg, efsId, vpcId, subnetId, true);\n            return;\n        }\n        const lambdaParams = {\n            rwsConfig: params._rws_config,\n            subnetId: subnetId\n        };\n        log(color().green('[RWS Lambda CLI]') + ' preparing artillery lambda function...');\n        await this.executeLambdaLifeCycle('preArchive', lambdaDirName, lambdaParams);\n        const zipPath = await LambdaService_1.default.archiveLambda(`${moduleDir}/lambda-functions/${lambdaDirName}`, moduleCfgDir, lambdaDirName === 'efs-loader');\n        await this.executeLambdaLifeCycle('postArchive', lambdaDirName, lambdaParams);\n        await this.executeLambdaLifeCycle('preDeploy', lambdaDirName, lambdaParams);\n        try {\n            await LambdaService_1.default.deployLambda(lambdaDirName, zipPath, vpcId, subnetId);\n            await this.executeLambdaLifeCycle('postDeploy', lambdaDirName, lambdaParams);\n            let payload = {};\n            if (lambdaArg) {\n                let payloadPath = LambdaService_1.default.findPayload(lambdaArg);\n                payload = JSON.parse(fs_1.default.readFileSync(payloadPath, 'utf-8'));\n                const response = await LambdaService_1.default.invokeLambda(lambdaDirName, payload);\n                rwsLog('RWS Lambda Deploy Invoke', color().yellowBright(`\"RWS-${lambdaDirName}\" lambda function response (Code: ${response.Response.StatusCode})`));\n                if (response.Response.Payload.toString()) {\n                    const responseData = JSON.parse(response.Response.Payload.toString());\n                    log(response.Response.Payload.toString());\n                    if (!responseData.success) {\n                        error(responseData.errorMessage);\n                    }\n                }\n            }\n        }\n        catch (e) {\n            error(e.message);\n            log(e.stack);\n        }\n        log(color().green(`[RWS Lambda CLI] \"${moduleDir}/lambda-functions/${lambdaDirName}\" function directory\\nhas been deployed to \"RWS-${lambdaDirName}\" named AWS Lambda function.`));\n    }\n    async undeploy(params) {\n        const { lambdaDirName, vpcId, subnetId, lambdaArg } = await this.getLambdaParameters(params);\n        if (lambdaDirName === 'modules') {\n            const [efsId] = await EFSService_1.default.getOrCreateEFS('RWS_EFS', vpcId, subnetId);\n            LambdaService_1.default.setRegion(params._rws_config.aws_lambda_region);\n            await LambdaService_1.default.deployModules(lambdaArg, efsId, vpcId, subnetId, true);\n            return;\n        }\n        const lambdaParams = {\n            rwsConfig: params._rws_config,\n            subnetId: subnetId\n        };\n    }\n    async openToWeb(params) {\n        const { lambdaDirName } = await this.getLambdaParameters(params);\n        // await APIGatewayService.associateNATGatewayWithLambda('RWS-' + lambdaDirName);        \n    }\n    async delete(params) {\n        const { lambdaDirName } = await this.getLambdaParameters(params);\n        if (!(await LambdaService_1.default.functionExists('RWS-' + lambdaDirName))) {\n            error(`There is no lambda function named \"RWS-${lambdaDirName}\" in AWS region \"${AWSService_1.default.getRegion()}\"`);\n            return;\n        }\n        await LambdaService_1.default.deleteLambda('RWS-' + lambdaDirName);\n        log(color().green(`[RWS Lambda CLI] \"RWS-${lambdaDirName}\" lambda function has been ${color().red('deleted')} from AWS region \"${AWSService_1.default.getRegion()}\"`));\n    }\n}\nexports[\"default\"] = LambdaCommand.createCommand();\n\n\n/***/ }),\n\n/***/ \"../src/commands/_command.ts\":\n/*!***********************************!*\\\n  !*** ../src/commands/_command.ts ***!\n  \\***********************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst UtilsService_1 = __importDefault(__webpack_require__(/*! ../services/UtilsService */ \"../src/services/UtilsService.ts\"));\nclass TheCommand {\n    constructor(name, childModule) {\n        this.name = name;\n        const rootPackageDir = UtilsService_1.default.findRootWorkspacePath(process.cwd());\n        const moduleCfgDir = path_1.default.resolve(rootPackageDir, 'node_modules', '.rws');\n        const cmdDirFile = `${moduleCfgDir}/_cli_cmd_dir`;\n        if (!fs_1.default.existsSync(moduleCfgDir)) {\n            fs_1.default.mkdirSync(moduleCfgDir);\n        }\n        const filePath = childModule.id;\n        const cmdDir = `${filePath.replace('./', '').replace(/\\/[^/]*\\.ts$/, '')}`;\n        let finalCmdDir = cmdDir;\n        if (cmdDir.indexOf('node_modules') > -1) {\n            finalCmdDir = rootPackageDir + '/' + finalCmdDir.substring(finalCmdDir.indexOf(\"node_modules\"));\n        }\n        if (!fs_1.default.existsSync(cmdDirFile)) {\n            fs_1.default.writeFileSync(cmdDirFile, finalCmdDir);\n        }\n    }\n    getSourceFilePath() {\n        const err = new Error();\n        if (err.stack) {\n            const match = err.stack.match(/at [^\\s]+ \\((.*):\\d+:\\d+\\)/);\n            if (match && match[1]) {\n                return match[1];\n            }\n        }\n        return '';\n    }\n    async execute(params = null) {\n        throw new Error('Implement method.');\n    }\n    getName() {\n        return this.name;\n    }\n    static createCommand() {\n        const className = this.name;\n        if (!TheCommand._instances[className]) {\n            TheCommand._instances[className] = new this();\n        }\n        return TheCommand._instances[className];\n    }\n    getCommandParameters(params) {\n        const cmdString = params.cmdString || params._default;\n        const cmdStringArr = cmdString.split(':');\n        const subCmd = cmdStringArr[0];\n        const apiCmd = cmdStringArr[1];\n        const apiArg = cmdStringArr.length > 2 ? cmdStringArr[2] : null;\n        const extraParams = params._extra_args.deploy_loader;\n        return {\n            subCmd,\n            apiCmd,\n            apiArg,\n            extraParams\n        };\n    }\n}\nTheCommand._instances = {};\nexports[\"default\"] = TheCommand;\n\n\n/***/ }),\n\n/***/ \"../src/commands/index.ts\":\n/*!********************************!*\\\n  !*** ../src/commands/index.ts ***!\n  \\********************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst LambdaCommand_1 = __importDefault(__webpack_require__(/*! ./LambdaCommand */ \"../src/commands/LambdaCommand.ts\"));\nconst InitCommand_1 = __importDefault(__webpack_require__(/*! ./InitCommand */ \"../src/commands/InitCommand.ts\"));\nconst ClearCommand_1 = __importDefault(__webpack_require__(/*! ./ClearCommand */ \"../src/commands/ClearCommand.ts\"));\nexports[\"default\"] = [\n    InitCommand_1.default,\n    LambdaCommand_1.default,\n    ClearCommand_1.default\n];\n\n\n/***/ }),\n\n/***/ \"../src/controllers/_controller.ts\":\n/*!*****************************************!*\\\n  !*** ../src/controllers/_controller.ts ***!\n  \\*****************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ../services/_service */ \"../src/services/_service.ts\"));\nconst Error404_1 = __importDefault(__webpack_require__(/*! ../errors/Error404 */ \"../src/errors/Error404.ts\"));\nconst Error500_1 = __importDefault(__webpack_require__(/*! ../errors/Error500 */ \"../src/errors/Error500.ts\"));\n/**\n * @category Core extendable objects\n */\nclass Controller extends _service_1.default {\n    constructor() {\n        super();\n    }\n    callMethod(methodName) {\n        return (params) => {\n            if ((!this[methodName])) {\n                const error = new Error404_1.default(new Error('The method does not exist in controller.'), `${__filename}::${methodName}`);\n                return error;\n            }\n            try {\n                return this[methodName](params);\n            }\n            catch (e) {\n                const error = new Error500_1.default(e, `${__filename}::${methodName}`, params);\n                return error;\n            }\n        };\n    }\n    hasError() {\n        const hasError = this._hasError;\n        this._hasError = false;\n        return hasError;\n    }\n    flagError() {\n        this._hasError = true;\n    }\n}\nexports[\"default\"] = Controller;\n\n\n/***/ }),\n\n/***/ \"../src/errors/Error403.ts\":\n/*!*********************************!*\\\n  !*** ../src/errors/Error403.ts ***!\n  \\*********************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _error_1 = __importDefault(__webpack_require__(/*! ./_error */ \"../src/errors/_error.ts\"));\nclass Error404 extends _error_1.default {\n    constructor(baseError, resourcePath, params = null) {\n        super(403, baseError, params);\n        this.name = '403 not authorized.';\n        this.message = `RWS resource \"$${resourcePath}\" was not autorized for current user.`;\n    }\n}\nexports[\"default\"] = Error404;\n\n\n/***/ }),\n\n/***/ \"../src/errors/Error404.ts\":\n/*!*********************************!*\\\n  !*** ../src/errors/Error404.ts ***!\n  \\*********************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _error_1 = __importDefault(__webpack_require__(/*! ./_error */ \"../src/errors/_error.ts\"));\nclass Error404 extends _error_1.default {\n    constructor(baseError, resourcePath, params = null) {\n        super(404, baseError, params);\n        this.name = '404 Resource not found';\n        this.message = `Resource \"${resourcePath}\" was not found`;\n    }\n}\nexports[\"default\"] = Error404;\n\n\n/***/ }),\n\n/***/ \"../src/errors/Error500.ts\":\n/*!*********************************!*\\\n  !*** ../src/errors/Error500.ts ***!\n  \\*********************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _error_1 = __importDefault(__webpack_require__(/*! ./_error */ \"../src/errors/_error.ts\"));\nclass Error500 extends _error_1.default {\n    constructor(baseError, resourcePath, params = null) {\n        super(500, baseError, params);\n        this.name = '500 internal server error';\n        this.message = `RWS resource \"$${resourcePath}\" has internal error`;\n    }\n}\nexports[\"default\"] = Error500;\n\n\n/***/ }),\n\n/***/ \"../src/errors/_error.ts\":\n/*!*******************************!*\\\n  !*** ../src/errors/_error.ts ***!\n  \\*******************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass RWSError {\n    constructor(code, baseError = null, params = null) {\n        this.stack = null;\n        if (!baseError) {\n            baseError = new Error('Error code ' + code);\n        }\n        this.code = code;\n        this.baseError = baseError;\n        this.stack = baseError.stack;\n    }\n    printFullError() {\n        console.error('[RWS Error]');\n        console.log(`[${this.name}] ${this.message}`);\n        console.log('Stack:', this.stack);\n        console.error('[/RWS Error]');\n    }\n    getMessage() {\n        return this.message;\n    }\n    getCode() {\n        return this.code;\n    }\n    getStackTraceString() {\n        return this.stack;\n    }\n}\nexports[\"default\"] = RWSError;\n\n\n/***/ }),\n\n/***/ \"../src/errors/index.ts\":\n/*!******************************!*\\\n  !*** ../src/errors/index.ts ***!\n  \\******************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RWSError = exports.Error500 = exports.Error404 = exports.Error403 = void 0;\nconst Error404_1 = __importDefault(__webpack_require__(/*! ./Error404 */ \"../src/errors/Error404.ts\"));\nexports.Error404 = Error404_1.default;\nconst Error403_1 = __importDefault(__webpack_require__(/*! ./Error403 */ \"../src/errors/Error403.ts\"));\nexports.Error403 = Error403_1.default;\nconst Error500_1 = __importDefault(__webpack_require__(/*! ./Error500 */ \"../src/errors/Error500.ts\"));\nexports.Error500 = Error500_1.default;\nconst _error_1 = __importDefault(__webpack_require__(/*! ./_error */ \"../src/errors/_error.ts\"));\nexports.RWSError = _error_1.default;\n\n\n/***/ }),\n\n/***/ \"../src/index.ts\":\n/*!***********************!*\\\n  !*** ../src/index.ts ***!\n  \\***********************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RWSErrorCodes = exports.RWSPrompt = exports.RWSConvo = exports.RWSVectorStore = exports.RWSTestSuite = exports.RWSAppCommands = exports.RWSannotations = exports.ProcessService = exports.Socket = exports.TimeSeriesModel = exports.VectorStoreService = exports.UtilsService = exports.TraversalService = exports.MD5Service = exports.EFSService = exports.AWSService = exports.LambdaService = exports.ConsoleService = exports.S3Service = exports.AuthService = exports.DBService = exports.RWSServer = exports.RWSModel = exports.RWSCommand = exports.RWSSocket = exports.RWSService = exports.RWSController = exports.AppConfigService = exports.getAppConfig = exports.SetupRWS = exports.serverInit = void 0;\nconst socket_io_1 = __webpack_require__(/*! socket.io */ \"socket.io\");\nObject.defineProperty(exports, \"Socket\", ({ enumerable: true, get: function () { return socket_io_1.Socket; } }));\nconst init_1 = __importDefault(__webpack_require__(/*! ./init */ \"../src/init.ts\"));\nexports.serverInit = init_1.default;\nconst install_1 = __webpack_require__(/*! ./install */ \"../src/install.ts\");\nObject.defineProperty(exports, \"SetupRWS\", ({ enumerable: true, get: function () { return install_1.SetupRWS; } }));\nconst TimeSeriesModel_1 = __importDefault(__webpack_require__(/*! ./models/types/TimeSeriesModel */ \"../src/models/types/TimeSeriesModel.ts\"));\nexports.TimeSeriesModel = TimeSeriesModel_1.default;\nconst ServerService_1 = __importDefault(__webpack_require__(/*! ./services/ServerService */ \"../src/services/ServerService.ts\"));\nexports.RWSServer = ServerService_1.default;\nconst DBService_1 = __importDefault(__webpack_require__(/*! ./services/DBService */ \"../src/services/DBService.ts\"));\nexports.DBService = DBService_1.default;\nconst AuthService_1 = __importDefault(__webpack_require__(/*! ./services/AuthService */ \"../src/services/AuthService.ts\"));\nexports.AuthService = AuthService_1.default;\nconst S3Service_1 = __importDefault(__webpack_require__(/*! ./services/S3Service */ \"../src/services/S3Service.ts\"));\nexports.S3Service = S3Service_1.default;\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./services/ConsoleService */ \"../src/services/ConsoleService.ts\"));\nexports.ConsoleService = ConsoleService_1.default;\nconst ProcessService_1 = __importDefault(__webpack_require__(/*! ./services/ProcessService */ \"../src/services/ProcessService.ts\"));\nexports.ProcessService = ProcessService_1.default;\nconst LambdaService_1 = __importDefault(__webpack_require__(/*! ./services/LambdaService */ \"../src/services/LambdaService.ts\"));\nexports.LambdaService = LambdaService_1.default;\nconst AWSService_1 = __importDefault(__webpack_require__(/*! ./services/AWSService */ \"../src/services/AWSService.ts\"));\nexports.AWSService = AWSService_1.default;\nconst EFSService_1 = __importDefault(__webpack_require__(/*! ./services/EFSService */ \"../src/services/EFSService.ts\"));\nexports.EFSService = EFSService_1.default;\nconst MD5Service_1 = __importDefault(__webpack_require__(/*! ./services/MD5Service */ \"../src/services/MD5Service.ts\"));\nexports.MD5Service = MD5Service_1.default;\nconst TraversalService_1 = __importDefault(__webpack_require__(/*! ./services/TraversalService */ \"../src/services/TraversalService.ts\"));\nexports.TraversalService = TraversalService_1.default;\nconst UtilsService_1 = __importDefault(__webpack_require__(/*! ./services/UtilsService */ \"../src/services/UtilsService.ts\"));\nexports.UtilsService = UtilsService_1.default;\nconst VectorStoreService_1 = __importDefault(__webpack_require__(/*! ./services/VectorStoreService */ \"../src/services/VectorStoreService.ts\"));\nexports.VectorStoreService = VectorStoreService_1.default;\nconst _prompt_1 = __importDefault(__webpack_require__(/*! ./models/prompts/_prompt */ \"../src/models/prompts/_prompt.ts\"));\nexports.RWSPrompt = _prompt_1.default;\nconst ConvoLoader_1 = __importDefault(__webpack_require__(/*! ./models/convo/ConvoLoader */ \"../src/models/convo/ConvoLoader.ts\"));\nexports.RWSConvo = ConvoLoader_1.default;\nconst VectorStore_1 = __importDefault(__webpack_require__(/*! ./models/convo/VectorStore */ \"../src/models/convo/VectorStore.ts\"));\nexports.RWSVectorStore = VectorStore_1.default;\nconst index_1 = __webpack_require__(/*! ./models/annotations/index */ \"../src/models/annotations/index.ts\");\nconst index_2 = __webpack_require__(/*! ./routing/annotations/index */ \"../src/routing/annotations/index.ts\");\nconst AppConfigService_1 = __importStar(__webpack_require__(/*! ./services/AppConfigService */ \"../src/services/AppConfigService.ts\"));\nexports.getAppConfig = AppConfigService_1.default;\nObject.defineProperty(exports, \"AppConfigService\", ({ enumerable: true, get: function () { return AppConfigService_1.AppConfigService; } }));\nconst RWSannotations = {\n    modelAnnotations: { InverseRelation: index_1.InverseRelation, InverseTimeSeries: index_1.InverseTimeSeries, Relation: index_1.Relation, TrackType: index_1.TrackType },\n    routingAnnotations: { Route: index_2.Route }\n};\nexports.RWSannotations = RWSannotations;\nconst _command_1 = __importDefault(__webpack_require__(/*! ./commands/_command */ \"../src/commands/_command.ts\"));\nexports.RWSCommand = _command_1.default;\nconst _model_1 = __importDefault(__webpack_require__(/*! ./models/_model */ \"../src/models/_model.ts\"));\nexports.RWSModel = _model_1.default;\nconst _controller_1 = __importDefault(__webpack_require__(/*! ./controllers/_controller */ \"../src/controllers/_controller.ts\"));\nexports.RWSController = _controller_1.default;\nconst _service_1 = __importDefault(__webpack_require__(/*! ./services/_service */ \"../src/services/_service.ts\"));\nexports.RWSService = _service_1.default;\nconst _socket_1 = __importDefault(__webpack_require__(/*! ./sockets/_socket */ \"../src/sockets/_socket.ts\"));\nexports.RWSSocket = _socket_1.default;\nconst index_3 = __importDefault(__webpack_require__(/*! ./commands/index */ \"../src/commands/index.ts\"));\nexports.RWSAppCommands = index_3.default;\nconst RWSTestSuite = __importStar(__webpack_require__(/*! ./tests/index */ \"../src/tests/index.ts\"));\nexports.RWSTestSuite = RWSTestSuite;\nconst RWSErrorCodes = __importStar(__webpack_require__(/*! ./errors/index */ \"../src/errors/index.ts\"));\nexports.RWSErrorCodes = RWSErrorCodes;\n\n\n/***/ }),\n\n/***/ \"../src/init.ts\":\n/*!**********************!*\\\n  !*** ../src/init.ts ***!\n  \\**********************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ./services/AppConfigService */ \"../src/services/AppConfigService.ts\"));\nconst ServerService_1 = __importDefault(__webpack_require__(/*! ./services/ServerService */ \"../src/services/ServerService.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./services/ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst UtilsService_1 = __importDefault(__webpack_require__(/*! ./services/UtilsService */ \"../src/services/UtilsService.ts\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst ProcessService_1 = __importDefault(__webpack_require__(/*! ./services/ProcessService */ \"../src/services/ProcessService.ts\"));\nasync function init(cfg, serverOptions = {}, addToConfig = null) {\n    var _a;\n    const AppConfigService = (0, AppConfigService_1.default)(cfg);\n    const port = await AppConfigService.get('port');\n    const ws_port = await AppConfigService.get('ws_port');\n    const wsRoutes = await AppConfigService.get('ws_routes');\n    const httpRoutes = await AppConfigService.get('http_routes');\n    const controler_list = await AppConfigService.get('controller_list');\n    const pub_dir = await AppConfigService.get('pub_dir');\n    const cors_domain = await AppConfigService.get('cors_domain');\n    const sslCert = AppConfigService.get('ssl_cert');\n    const sslKey = AppConfigService.get('ssl_key');\n    if (addToConfig !== null) {\n        await addToConfig(AppConfigService);\n    }\n    let https = true;\n    if (!sslCert || !sslKey) {\n        https = false;\n    }\n    const executeDir = process.cwd();\n    const packageRootDir = UtilsService_1.default.findRootWorkspacePath(executeDir);\n    const moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\n    const moduleCfgFile = `${moduleCfgDir}/_rws_installed`;\n    if (!fs_1.default.existsSync(moduleCfgFile)) {\n        ConsoleService_1.default.log(ConsoleService_1.default.color().yellow('No config path generated for CLI. Trying to initialize with \"yarn rws init config/config\"'));\n        await ProcessService_1.default.runShellCommand('yarn rws init config/config');\n        UtilsService_1.default.setRWSVar('_rws_installed', 'OK');\n    }\n    const theServer = await ServerService_1.default.initializeApp({ ...{\n            wsRoutes: wsRoutes,\n            httpRoutes: httpRoutes,\n            controllerList: controler_list,\n            pub_dir: pub_dir,\n            domain: `http${(await ((_a = AppConfigService.get('features')) === null || _a === void 0 ? void 0 : _a.ssl) ? 's' : '')}://${await AppConfigService.get('domain')}`,\n            cors_domain: cors_domain\n        }, ...serverOptions });\n    const wsStart = async () => {\n        return (await theServer.websocket.starter());\n    };\n    const httpStart = async () => {\n        return (await theServer.http.starter());\n    };\n    wsStart();\n    await httpStart();\n}\nexports[\"default\"] = init;\n\n\n/***/ }),\n\n/***/ \"../src/install.ts\":\n/*!*************************!*\\\n  !*** ../src/install.ts ***!\n  \\*************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.runShellCommand = exports.SetupRWS = void 0;\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ./services/AppConfigService */ \"../src/services/AppConfigService.ts\"));\nconst _model_1 = __importDefault(__webpack_require__(/*! ./models/_model */ \"../src/models/_model.ts\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\n__webpack_require__(/*! reflect-metadata */ \"reflect-metadata\");\nconst DBService_1 = __importDefault(__webpack_require__(/*! ./services/DBService */ \"../src/services/DBService.ts\"));\nconst TimeSeriesModel_1 = __importDefault(__webpack_require__(/*! ./models/types/TimeSeriesModel */ \"../src/models/types/TimeSeriesModel.ts\"));\nconst ProcessService_1 = __importDefault(__webpack_require__(/*! ./services/ProcessService */ \"../src/services/ProcessService.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./services/ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst UtilsService_1 = __importDefault(__webpack_require__(/*! ./services/UtilsService */ \"../src/services/UtilsService.ts\"));\nconst { log, warn, error, color } = ConsoleService_1.default;\nconst { runShellCommand } = ProcessService_1.default;\nexports.runShellCommand = runShellCommand;\nfunction generateModelSections(constructor) {\n    let section = '';\n    // Get the prototype of the model instance\n    const modelMetadatas = _model_1.default.getModelAnnotations(constructor); // Pass the class constructor   \n    let embed = false;\n    let modelName = constructor._collection;\n    // if(Model.isSubclass(constructor, EmbedModel)){\n    //   modelName = constructor.name;\n    //   embed = true;\n    //   throw new Error('Embed models are not supported');\n    // }\n    section += `model ${modelName} {\\n`;\n    section += `\\tid String @map(\"_id\") @id @default(auto()) @db.ObjectId\\n`;\n    for (const key in modelMetadatas) {\n        const modelMetadata = modelMetadatas[key].metadata;\n        const requiredString = modelMetadata.required ? '' : '?';\n        const annotationType = modelMetadatas[key].annotationType;\n        if (annotationType === 'Relation') {\n            section += `\\t${key} ${modelMetadata.relatedTo}${requiredString} @relation(fields: [${modelMetadata.relationField}], references: [${modelMetadata.relatedToField}])\\n`;\n            section += `\\t${modelMetadata.relationField} String${requiredString} @db.ObjectId\\n`;\n        }\n        else if (annotationType === 'InverseRelation') {\n            section += `\\t${key} ${modelMetadata.inversionModel}[]`;\n        }\n        else if (annotationType === 'InverseTimeSeries') {\n            section += `\\t${key} String[] @db.ObjectId`;\n        }\n        else if (annotationType === 'TrackType') {\n            const tags = modelMetadata.tags.map((item) => '@' + item);\n            section += `\\t${key} ${toConfigCase(modelMetadata)}${requiredString} ${tags.join(' ')}\\n`;\n        }\n    }\n    section += `\\n}`;\n    return section;\n}\nfunction toConfigCase(modelType) {\n    const type = modelType.type;\n    const input = type.name;\n    if (input == 'Number') {\n        return 'Int';\n    }\n    if (input == 'Object') {\n        return 'Json';\n    }\n    if (input == 'Date') {\n        return 'DateTime';\n    }\n    const firstChar = input.charAt(0).toUpperCase();\n    const restOfString = input.slice(1);\n    return firstChar + restOfString;\n}\nasync function main(cfg) {\n    const AppConfigService = (0, AppConfigService_1.default)(cfg);\n    const dbUrl = await AppConfigService.get('mongo_url');\n    const moduleDir = path_1.default.resolve(__dirname, '..', '..').replace('dist', '');\n    const executionDir = path_1.default.resolve(process.cwd());\n    const dbType = 'mongodb';\n    let template = `generator client {\\n\n    provider = \"prisma-client-js\"\\n\n  }\\n\\n`;\n    template += `\\ndatasource db {\\n\n    provider = \"${dbType}\"\\n\n    url = env(\"DATABASE_URL\")\\n    \n  }\\n\\n`;\n    const usermodels = await AppConfigService.get('user_models');\n    usermodels.forEach((model) => {\n        const modelSection = generateModelSections(model);\n        template += '\\n\\n' + modelSection;\n        if (_model_1.default.isSubclass(model, TimeSeriesModel_1.default)) {\n            DBService_1.default.collectionExists(model._collection).then((exists) => {\n                if (exists) {\n                    return;\n                }\n                log(color().green('[RWS Init]') + ` creating TimeSeries type collection from ${model} model`);\n                DBService_1.default.createTimeSeriesCollection(model._collection);\n            });\n        }\n    });\n    const schemaPath = path_1.default.join(moduleDir, 'prisma', 'schema.prisma');\n    fs_1.default.writeFileSync(schemaPath, template);\n    process.env.DB_URL = dbUrl;\n    // Define the command you want to run\n    await ProcessService_1.default.runShellCommand('npx prisma generate --schema=' + schemaPath);\n    log(color().green('[RWS Init]') + ' prisma schema generated from ', schemaPath);\n    UtilsService_1.default.setRWSVar('_rws_installed', 'OK');\n    return;\n}\nconst SetupRWS = main;\nexports.SetupRWS = SetupRWS;\n\n\n/***/ }),\n\n/***/ \"../src/models/_model.ts\":\n/*!*******************************!*\\\n  !*** ../src/models/_model.ts ***!\n  \\*******************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TrackType = void 0;\nconst index_1 = __webpack_require__(/*! ../index */ \"../src/index.ts\");\nconst TrackType_1 = __importDefault(__webpack_require__(/*! ./annotations/TrackType */ \"../src/models/annotations/TrackType.ts\"));\nexports.TrackType = TrackType_1.default;\nclass Model {\n    constructor(data) {\n        if (!this.getCollection()) {\n            throw new Error('Model must have a collection defined');\n        }\n        if (!data) {\n            return;\n        }\n        if (!this.hasTimeSeries()) {\n            this._fill(data);\n        }\n        else {\n            throw new Error('Time Series not supported in synchronous constructor. Use `await Model.create(data)` static method to instantiate this model.');\n        }\n    }\n    _fill(data) {\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const meta = Reflect.getMetadata(`InverseTimeSeries:${key}`, this.constructor.prototype);\n                if (meta) {\n                    data[key] = {\n                        create: data[key]\n                    };\n                }\n                else {\n                    this[key] = data[key];\n                }\n            }\n        }\n        return this;\n    }\n    async _asyncFill(data) {\n        const collections_to_models = {};\n        const timeSeriesIds = this.getTimeSeriesModelFields();\n        const _self = this;\n        this.loadModels().forEach((model) => {\n            collections_to_models[model.getCollection()] = model;\n        });\n        const seriesHydrationfields = [];\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                if (seriesHydrationfields.includes(key)) {\n                    continue;\n                }\n                const timeSeriesMetaData = timeSeriesIds[key];\n                if (timeSeriesMetaData) {\n                    this[key] = data[key];\n                    const seriesModel = collections_to_models[timeSeriesMetaData.collection];\n                    const dataModels = await seriesModel.findBy({\n                        id: { in: data[key] }\n                    });\n                    seriesHydrationfields.push(timeSeriesMetaData.hydrationField);\n                    this[timeSeriesMetaData.hydrationField] = dataModels;\n                }\n                else {\n                    this[key] = data[key];\n                }\n            }\n        }\n        return this;\n    }\n    getTimeSeriesModelFields() {\n        const timeSeriesIds = {};\n        for (const key in this) {\n            if (this.hasOwnProperty(key)) {\n                const meta = Reflect.getMetadata(`InverseTimeSeries:${key}`, this);\n                if (meta) {\n                    if (!timeSeriesIds[key]) {\n                        timeSeriesIds[key] = {\n                            collection: meta.timeSeriesModel,\n                            hydrationField: meta.hydrationField,\n                            ids: this[key]\n                        };\n                    }\n                }\n            }\n        }\n        return timeSeriesIds;\n    }\n    toMongo() {\n        let data = {};\n        const timeSeriesIds = this.getTimeSeriesModelFields();\n        const timeSeriesHydrationFields = [];\n        for (const key in this) {\n            if (!this.isDbVariable(key)) {\n                continue;\n            }\n            if (this.hasOwnProperty(key) && !(this.constructor._BANNED_KEYS || Model._BANNED_KEYS).includes(key) && !timeSeriesHydrationFields.includes(key)) {\n                data[key] = this[key];\n            }\n            if (!!timeSeriesIds[key]) {\n                data[key] = this[key];\n                timeSeriesHydrationFields.push(timeSeriesIds[key].hydrationField);\n            }\n        }\n        return data;\n    }\n    getCollection() {\n        return this.constructor._collection || this._collection;\n    }\n    static getCollection() {\n        return this.constructor._collection || this._collection;\n    }\n    async save() {\n        const data = this.toMongo();\n        let updatedModelData = data;\n        if (this.id) {\n            this.preUpdate();\n            updatedModelData = await index_1.DBService.update(data, this.getCollection());\n            await this._asyncFill(updatedModelData);\n            this.postUpdate();\n        }\n        else {\n            this.preCreate();\n            const timeSeriesModel = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./types/TimeSeriesModel */ \"../src/models/types/TimeSeriesModel.ts\")));\n            const isTimeSeries = this instanceof timeSeriesModel.default;\n            updatedModelData = await index_1.DBService.insert(data, this.getCollection(), isTimeSeries);\n            await this._asyncFill(updatedModelData);\n            this.postCreate();\n        }\n        return this;\n    }\n    static getModelAnnotations(constructor) {\n        const annotationsData = {};\n        const propertyKeys = Reflect.getMetadataKeys(constructor.prototype).map((item) => {\n            return item.split(':')[1];\n        });\n        propertyKeys.forEach(key => {\n            if (String(key) == 'id') {\n                return;\n            }\n            const annotations = ['TrackType', 'Relation', 'InverseRelation', 'InverseTimeSeries'];\n            annotations.forEach(annotation => {\n                const metadataKey = `${annotation}:${String(key)}`;\n                const meta = Reflect.getMetadata(metadataKey, constructor.prototype);\n                if (meta) {\n                    annotationsData[String(key)] = { annotationType: annotation, metadata: meta };\n                }\n            });\n        });\n        return annotationsData;\n    }\n    preUpdate() {\n        return;\n    }\n    postUpdate() {\n        return;\n    }\n    preCreate() {\n        return;\n    }\n    postCreate() {\n        return;\n    }\n    static isSubclass(constructor, baseClass) {\n        return baseClass.prototype.isPrototypeOf(constructor.prototype);\n    }\n    hasTimeSeries() {\n        return Model.checkTimeSeries(this.constructor);\n    }\n    static checkTimeSeries(constructor) {\n        const data = constructor.prototype;\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                if (Reflect.getMetadata(`InverseTimeSeries:${key}`, constructor.prototype)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    isDbVariable(variable) {\n        return Model.checkDbVariable(this.constructor, variable);\n    }\n    static checkDbVariable(constructor, variable) {\n        if (variable === 'id') {\n            return true;\n        }\n        const data = constructor.prototype;\n        const dbAnnotations = Model.getModelAnnotations(constructor);\n        const dbProperties = Object.keys(dbAnnotations).map((key) => { return { ...dbAnnotations[key], key }; }).filter((element) => element.annotationType === 'TrackType').map((element) => element.key);\n        return dbProperties.includes(variable);\n    }\n    sanitizeDBData(data) {\n        const dataKeys = Object.keys(data);\n        const sanitizedData = {};\n        for (const key of dataKeys) {\n            if (this.isDbVariable(key)) {\n                sanitizedData[key] = data[key];\n            }\n        }\n        return sanitizedData;\n    }\n    static async watchCollection(preRun) {\n        const collection = Reflect.get(this, '_collection');\n        return await index_1.DBService.watchCollection(collection, preRun);\n    }\n    static async findOneBy(conditions) {\n        const collection = Reflect.get(this, '_collection');\n        const dbData = await index_1.DBService.findOneBy(collection, conditions);\n        if (dbData) {\n            const inst = new this();\n            return await inst._asyncFill(dbData);\n        }\n        return null;\n    }\n    static async delete(conditions) {\n        const collection = Reflect.get(this, '_collection');\n        return await index_1.DBService.delete(collection, conditions);\n    }\n    async delete() {\n        const collection = Reflect.get(this, '_collection');\n        return await index_1.DBService.delete(collection, {\n            id: this.id\n        });\n    }\n    static async findBy(conditions, fields = null) {\n        const collection = Reflect.get(this, '_collection');\n        const dbData = await index_1.DBService.findBy(collection, conditions, fields);\n        if (dbData.length) {\n            const instanced = [];\n            for (const data of dbData) {\n                const inst = new this();\n                instanced.push((await inst._asyncFill(data)));\n            }\n            return instanced;\n        }\n        return [];\n    }\n    static async create(data) {\n        const newModel = new this();\n        const sanitizedData = newModel.sanitizeDBData(data);\n        await newModel._asyncFill(sanitizedData);\n        return newModel;\n    }\n    loadModels() {\n        const AppConfigService = (0, index_1.getAppConfig)();\n        return AppConfigService.get('user_models');\n    }\n}\nModel._collection = null;\nModel._BANNED_KEYS = ['_collection'];\n__decorate([\n    (0, TrackType_1.default)(String),\n    __metadata(\"design:type\", String)\n], Model.prototype, \"id\", void 0);\nexports[\"default\"] = Model;\n\n\n/***/ }),\n\n/***/ \"../src/models/annotations/InverseRelation.ts\":\n/*!****************************************************!*\\\n  !*** ../src/models/annotations/InverseRelation.ts ***!\n  \\****************************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! reflect-metadata */ \"reflect-metadata\");\nfunction InverseRelation(inversionModel) {\n    let metaOpts = {\n        inversionModel: inversionModel\n    };\n    return function (target, key) {\n        Reflect.defineMetadata(`InverseRelation:${key}`, metaOpts, target);\n    };\n}\nexports[\"default\"] = InverseRelation;\n\n\n/***/ }),\n\n/***/ \"../src/models/annotations/InverseTimeSeries.ts\":\n/*!******************************************************!*\\\n  !*** ../src/models/annotations/InverseTimeSeries.ts ***!\n  \\******************************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! reflect-metadata */ \"reflect-metadata\");\nfunction InverseTimeSeries(timeSeriesModel, hydrationField) {\n    let metaOpts = {\n        timeSeriesModel: timeSeriesModel,\n        hydrationField: hydrationField\n    };\n    return function (target, key) {\n        Reflect.defineMetadata(`InverseTimeSeries:${key}`, metaOpts, target);\n    };\n}\nexports[\"default\"] = InverseTimeSeries;\n\n\n/***/ }),\n\n/***/ \"../src/models/annotations/Relation.ts\":\n/*!*********************************************!*\\\n  !*** ../src/models/annotations/Relation.ts ***!\n  \\*********************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! reflect-metadata */ \"reflect-metadata\");\nfunction Relation(relatedTo, required = false, relationField = null, relatedToField = 'id') {\n    let metaOpts = { required };\n    metaOpts.relatedToField = relatedToField;\n    metaOpts.relatedTo = relatedTo;\n    if (!relationField) {\n        metaOpts.relationField = relatedTo + '_id';\n    }\n    else {\n        metaOpts.relationField = relationField;\n    }\n    return function (target, key) {\n        Reflect.defineMetadata(`Relation:${key}`, metaOpts, target);\n    };\n}\nexports[\"default\"] = Relation;\n\n\n/***/ }),\n\n/***/ \"../src/models/annotations/TrackType.ts\":\n/*!**********************************************!*\\\n  !*** ../src/models/annotations/TrackType.ts ***!\n  \\**********************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! reflect-metadata */ \"reflect-metadata\");\nfunction TrackType(type, opts = null, tags = []) {\n    if (!opts) {\n        opts = {\n            required: false\n        };\n    }\n    const required = opts.required;\n    let metaOpts = { type, tags, required };\n    if (opts.relatedToField && opts.relatedTo) {\n        metaOpts.relatedToField = opts.relatedToField;\n        metaOpts.relatedTo = opts.relatedTo;\n        if (!opts.relationField) {\n            metaOpts.relationField = opts.relatedTo + '_id';\n        }\n        else {\n            metaOpts.relationField = opts.relationField;\n        }\n    }\n    if (opts.inversionModel) {\n        metaOpts.inversionModel = opts.inversionModel;\n    }\n    const resolvedType = typeof type === 'function' ? type() : type;\n    if (!!type._collection) {\n        metaOpts.type = type;\n    }\n    return function (target, key) {\n        Reflect.defineMetadata(`TrackType:${key}`, metaOpts, target);\n    };\n}\nexports[\"default\"] = TrackType;\n\n\n/***/ }),\n\n/***/ \"../src/models/annotations/index.ts\":\n/*!******************************************!*\\\n  !*** ../src/models/annotations/index.ts ***!\n  \\******************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InverseTimeSeries = exports.TrackType = exports.Relation = exports.InverseRelation = void 0;\nconst InverseRelation_1 = __importDefault(__webpack_require__(/*! ./InverseRelation */ \"../src/models/annotations/InverseRelation.ts\"));\nexports.InverseRelation = InverseRelation_1.default;\nconst Relation_1 = __importDefault(__webpack_require__(/*! ./Relation */ \"../src/models/annotations/Relation.ts\"));\nexports.Relation = Relation_1.default;\nconst TrackType_1 = __importDefault(__webpack_require__(/*! ./TrackType */ \"../src/models/annotations/TrackType.ts\"));\nexports.TrackType = TrackType_1.default;\nconst InverseTimeSeries_1 = __importDefault(__webpack_require__(/*! ./InverseTimeSeries */ \"../src/models/annotations/InverseTimeSeries.ts\"));\nexports.InverseTimeSeries = InverseTimeSeries_1.default;\n\n\n/***/ }),\n\n/***/ \"../src/models/convo/ConvoLoader.ts\":\n/*!******************************************!*\\\n  !*** ../src/models/convo/ConvoLoader.ts ***!\n  \\******************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst text_1 = __webpack_require__(/*! langchain/document_loaders/fs/text */ \"langchain/document_loaders/fs/text\");\nconst text_splitter_1 = __webpack_require__(/*! langchain/text_splitter */ \"langchain/text_splitter\");\nconst VectorStoreService_1 = __importDefault(__webpack_require__(/*! ../../services/VectorStoreService */ \"../src/services/VectorStoreService.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ../../services/ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst document_1 = __webpack_require__(/*! langchain/document */ \"langchain/document\");\nconst uuid_1 = __webpack_require__(/*! uuid */ \"uuid\");\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ../../services/AppConfigService */ \"../src/services/AppConfigService.ts\"));\nconst chains_1 = __webpack_require__(/*! langchain/chains */ \"langchain/chains\");\nconst errors_1 = __webpack_require__(/*! ../../errors */ \"../src/errors/index.ts\");\nconst xml2js_1 = __importDefault(__webpack_require__(/*! xml2js */ \"xml2js\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst logConvo = (txt) => {\n    ConsoleService_1.default.rwsLog(ConsoleService_1.default.color().blueBright(txt));\n};\nclass ConvoLoader {\n    constructor(chatConstructor, embeddings, convoId = null, baseSplitterParams = {\n        chunkSize: 400, chunkOverlap: 80, separators: [\"/n/n\", \".\"]\n    }) {\n        this.docs = [];\n        this._initiated = false;\n        this.avgDocLength = (documents) => {\n            return documents.reduce((sum, doc) => sum + doc.pageContent.length, 0) / documents.length;\n        };\n        this.embeddings = embeddings;\n        if (convoId === null) {\n            this.convo_id = ConvoLoader.uuid();\n        }\n        else {\n            this.convo_id = convoId;\n        }\n        this.chatConstructor = chatConstructor;\n        this._baseSplitterParams = baseSplitterParams;\n    }\n    static uuid() {\n        return (0, uuid_1.v4)();\n    }\n    async splitDocs(filePath, params) {\n        const splitDir = ConvoLoader.debugSplitDir(this.getId());\n        if (!fs_1.default.existsSync(splitDir)) {\n            console.log(`Split dir ${ConsoleService_1.default.color().magentaBright(splitDir)} doesn't exist. Splitting docs...`);\n            this.loader = new text_1.TextLoader(filePath);\n            this.docSplitter = new text_splitter_1.RecursiveCharacterTextSplitter({\n                chunkSize: params.chunkSize, // The size of the chunk that should be split.\n                chunkOverlap: params.chunkOverlap, // Adding overalap so that if a text is broken inbetween, next document may have part of the previous document \n                separators: params.separators // In this case we are assuming that /n/n would mean one whole sentence. In case there is no nearing /n/n then \".\" will be used instead. This can be anything that helps derive a complete sentence .\n            });\n            fs_1.default.mkdirSync(splitDir, { recursive: true });\n            const orgDocs = await this.loader.load();\n            const splitDocs = await this.docSplitter.splitDocuments(orgDocs);\n            const avgCharCountPre = this.avgDocLength(orgDocs);\n            const avgCharCountPost = this.avgDocLength(splitDocs);\n            logConvo(`Average length among ${orgDocs.length} documents loaded is ${avgCharCountPre} characters.`);\n            logConvo(`After the split we have ${splitDocs.length} documents more than the original ${orgDocs.length}.`);\n            logConvo(`Average length among ${orgDocs.length} documents (after split) is ${avgCharCountPost} characters.`);\n            this.docs = splitDocs;\n            let i = 0;\n            this.docs.forEach((doc) => {\n                fs_1.default.writeFileSync(this.debugSplitFile(i), doc.pageContent);\n                i++;\n            });\n        }\n        else {\n            const splitFiles = fs_1.default.readdirSync(splitDir);\n            for (const filePath of splitFiles) {\n                const txt = fs_1.default.readFileSync(splitDir + '/' + filePath, 'utf-8');\n                this.docs.push(new document_1.Document({ pageContent: txt }));\n            }\n            ;\n        }\n        this.store = await VectorStoreService_1.default.createStore(this.docs, await this.embeddings.generateEmbeddings());\n    }\n    getId() {\n        return this.convo_id;\n    }\n    getDocs() {\n        return this.docs;\n    }\n    getStore() {\n        return this.store;\n    }\n    isInitiated() {\n        return this._initiated;\n    }\n    setPrompt(prompt) {\n        this.thePrompt = prompt;\n        this.llmChat = new this.chatConstructor({\n            streaming: true,\n            region: (0, AppConfigService_1.default)().get('aws_bedrock_region'),\n            credentials: {\n                accessKeyId: (0, AppConfigService_1.default)().get('aws_access_key'),\n                secretAccessKey: (0, AppConfigService_1.default)().get('aws_secret_key'),\n            },\n            model: \"anthropic.claude-v2\",\n            maxTokens: prompt.getHyperParameter('max_tokens_to_sample'),\n            temperature: prompt.getHyperParameter('temperature'),\n            modelKwargs: {\n                top_p: prompt.getHyperParameter('top_p'),\n                top_k: prompt.getHyperParameter('top_k'),\n            }\n        });\n        return this;\n    }\n    getChat() {\n        return this.llmChat;\n    }\n    async call(values, cfg, debugCallback = null) {\n        const output = await (this.chain()).invoke(values, cfg);\n        this.thePrompt.listen(output.text);\n        await this.debugCall(debugCallback);\n        return this.thePrompt;\n    }\n    async *callStreamGenerator(values, cfg, debugCallback = null) {\n        // const _self = this;\n        // const chain = this.chain() as ConversationChain;  \n        // console.log('call stream');      \n        // const stream = await chain.call(values, [{\n        //         handleLLMNewToken(token: string) {\n        //             yield token;\n        //         }\n        //     }\n        // ]);\n        // console.log('got stream');\n        // Listen to the stream and yield data chunks as they come\n        // for await (const chunk of stream) {                  \n        //     yield chunk.response;\n        // }\n    }\n    async callStream(values, callback, end = () => { }, cfg = {}, debugCallback) {\n        const _self = this;\n        const callGenerator = this.callStreamGenerator({ query: values.query }, cfg, debugCallback);\n        await this.chain().invoke(values, { callbacks: [{\n                    handleLLMNewToken(token) {\n                        callback({\n                            content: token,\n                            status: 'rws_streaming'\n                        });\n                        _self.thePrompt.listen(token, true);\n                    }\n                }\n            ] });\n        end();\n        this.debugCall(debugCallback);\n        return this.thePrompt;\n    }\n    ;\n    async similaritySearch(query, splitCount) {\n        console.log('Store is ready. Searching for embedds...');\n        const texts = await this.getStore().getFaiss().similaritySearchWithScore(`${query}`, splitCount);\n        console.log('Found best parts: ' + texts.length);\n        return texts.map(([doc, score]) => `${doc[\"pageContent\"]}`).join('\\n\\n');\n    }\n    async debugCall(debugCallback = null) {\n        try {\n            const debug = this.initDebugFile();\n            let callData = debug.xml;\n            callData.conversation.message.push(this.thePrompt.toJSON());\n            if (debugCallback) {\n                callData = await debugCallback(callData);\n            }\n            this.debugSave(callData);\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n    chain() {\n        if (this.llmChain) {\n            return this.llmChain;\n        }\n        if (!this.thePrompt) {\n            throw new errors_1.Error500(new Error('No prompt initialized for conversation'), __filename);\n        }\n        const chainParams = {\n            prompt: this.thePrompt.getMultiTemplate()\n        };\n        this.createChain(chainParams);\n        return this.llmChain;\n    }\n    async createChain(input) {\n        this.llmChain = new chains_1.ConversationChain({\n            llm: this.llmChat,\n            prompt: input.prompt,\n        });\n        return this.llmChain;\n    }\n    async waitForInit() {\n        const _self = this;\n        return new Promise((resolve, reject) => {\n            let i = 0;\n            const interval = setInterval(() => {\n                if (this.isInitiated()) {\n                    clearInterval(interval);\n                    resolve(_self);\n                }\n                if (i > 9) {\n                    clearInterval(interval);\n                    reject(null);\n                }\n                i++;\n            }, 300);\n        });\n    }\n    parseXML(xml, callback) {\n        const parser = new xml2js_1.default.Parser();\n        parser.parseString(xml, callback);\n        return parser;\n    }\n    static debugConvoDir(id) {\n        return path_1.default.resolve(process.cwd(), 'debug', 'conversations', id);\n    }\n    static debugSplitDir(id) {\n        return path_1.default.resolve(process.cwd(), 'debug', 'conversations', id, 'split');\n    }\n    debugConvoFile() {\n        return `${ConvoLoader.debugConvoDir(this.getId())}/conversation.xml`;\n    }\n    debugSplitFile(i) {\n        return `${ConvoLoader.debugSplitDir(this.getId())}/${i}.splitfile`;\n    }\n    initDebugFile() {\n        let xmlContent;\n        let debugXML = null;\n        const convoDir = ConvoLoader.debugConvoDir(this.getId());\n        if (!fs_1.default.existsSync(convoDir)) {\n            fs_1.default.mkdirSync(convoDir, { recursive: true });\n        }\n        const convoFilePath = this.debugConvoFile();\n        if (!fs_1.default.existsSync(convoFilePath)) {\n            xmlContent = `<conversation id=\"conversation\"></conversation>`;\n            fs_1.default.writeFileSync(convoFilePath, xmlContent);\n        }\n        else {\n            xmlContent = fs_1.default.readFileSync(convoFilePath, 'utf-8');\n        }\n        this.parseXML(xmlContent, (error, result) => {\n            debugXML = result;\n        });\n        if (!debugXML.conversation.message) {\n            debugXML.conversation.message = [];\n        }\n        return { xml: debugXML, path: convoFilePath };\n    }\n    debugSave(xml) {\n        const builder = new xml2js_1.default.Builder();\n        fs_1.default.writeFileSync(this.debugConvoFile(), builder.buildObject(xml), 'utf-8');\n    }\n}\nexports[\"default\"] = ConvoLoader;\n\n\n/***/ }),\n\n/***/ \"../src/models/convo/VectorStore.ts\":\n/*!******************************************!*\\\n  !*** ../src/models/convo/VectorStore.ts ***!\n  \\******************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst faiss_1 = __webpack_require__(/*! @langchain/community/vectorstores/faiss */ \"@langchain/community/vectorstores/faiss\");\nclass RWSVectorStore {\n    constructor(docs, embeddings) {\n        this.docs = docs;\n        this.embeddings = embeddings;\n    }\n    async init() {\n        this.faiss = await faiss_1.FaissStore.fromDocuments(this.docs, this.embeddings);\n        return this;\n    }\n    getFaiss() {\n        return this.faiss;\n    }\n}\nexports[\"default\"] = RWSVectorStore;\n\n\n/***/ }),\n\n/***/ \"../src/models/prompts/_prompt.ts\":\n/*!****************************************!*\\\n  !*** ../src/models/prompts/_prompt.ts ***!\n  \\****************************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass RWSPrompt {\n    constructor(params) {\n        this.output = '';\n        this.varStorage = {};\n        this.onStream = (chunk) => {\n        };\n        this.input = params.input;\n        this.originalInput = params.input;\n        this.hyperParameters = params.hyperParameters;\n        this.modelId = params.modelId;\n        this.modelType = params.modelType;\n        this.created_at = new Date();\n    }\n    listen(source, stream = true) {\n        this.output = '';\n        if (!stream) {\n            this.output = source;\n        }\n        else {\n            this.output += source;\n            this.onStream(source);\n        }\n        return this;\n    }\n    setStreamCallback(callback) {\n        this.onStream = callback;\n    }\n    addEnchantment(enchantment) {\n        this.enhancedInput.push(enchantment);\n        this.input = enchantment.input;\n    }\n    getEnchantedInput() {\n        return this.enhancedInput[this.enhancedInput.length - 1].output;\n    }\n    getModelId() {\n        return this.modelId;\n    }\n    readSentInput() {\n        return this.sentInput;\n    }\n    readInput() {\n        return this.input;\n    }\n    readBaseInput() {\n        return this.originalInput;\n    }\n    setBaseInput(input) {\n        this.originalInput = input;\n        return this;\n    }\n    injestOutput(content) {\n        this.output = content;\n        return this;\n    }\n    readOutput() {\n        return this.output;\n    }\n    getHyperParameters(base = null) {\n        if (base) {\n            this.hyperParameters = { ...base, ...this.hyperParameters };\n        }\n        return this.hyperParameters;\n    }\n    getHyperParameter(key) {\n        if (!this.hyperParameters[key]) {\n            return null;\n        }\n        return this.hyperParameters[key];\n    }\n    setHyperParameter(key, value) {\n        this.hyperParameters[key] = value;\n        return this;\n    }\n    setHyperParameters(value) {\n        this.hyperParameters = value;\n        return this;\n    }\n    setMultiTemplate(template) {\n        this.multiTemplate = template;\n        return this;\n    }\n    getMultiTemplate() {\n        return this.multiTemplate;\n    }\n    setConvo(convo) {\n        this.convo = convo.setPrompt(this);\n        return this;\n    }\n    getConvo() {\n        return this.convo;\n    }\n    replacePromptVar(key, val) {\n    }\n    getModelMetadata() {\n        return [this.modelType, this.modelId];\n    }\n    async requestWith(executor, intruderPrompt = null, debugVars = {}) {\n        this.sentInput = this.input;\n        const returnedRWS = await executor.promptRequest(this, null, intruderPrompt, debugVars);\n        this.output = returnedRWS.readOutput();\n    }\n    async singleRequestWith(executor, intruderPrompt = null) {\n        await executor.singlePromptRequest(this, null, intruderPrompt);\n        this.sentInput = this.input;\n    }\n    async streamWith(executor, read, end = () => { }, debugVars = {}) {\n        return executor.promptStream(this, read, end, debugVars);\n    }\n    setInput(content) {\n        this.input = content;\n        return this;\n    }\n    getVar(key) {\n        return Object.keys(this.varStorage).includes(key) ? this.varStorage[key] : null;\n    }\n    setVar(key, val) {\n        this.varStorage[key] = val;\n        return this;\n    }\n    async _oldreadStream(stream, react) {\n        let first = true;\n        const chunks = []; // Replace 'any' with the actual type of your chunks\n        for await (const event of stream) {\n            // Assuming 'event' has a specific structure. Adjust according to actual event structure.\n            if ('chunk' in event && event.chunk.bytes) {\n                const chunk = JSON.parse(Buffer.from(event.chunk.bytes).toString(\"utf-8\"));\n                if (first) {\n                    console.log('chunk', chunk);\n                    first = false;\n                }\n                react(chunk.completion);\n                chunks.push(chunk.completion || chunk.generation); // Use the actual property of 'chunk' you're interested in\n            }\n            else if ('internalServerException' in event ||\n                'modelStreamErrorException' in event ||\n                'throttlingException' in event ||\n                'validationException' in event) {\n                console.error(event);\n                break;\n            }\n        }\n    }\n    async isChainStreamType(source) {\n        if (source && typeof source[Symbol.asyncIterator] === 'function') {\n            const asyncIterator = source[Symbol.asyncIterator]();\n            if (typeof asyncIterator.next === 'function' &&\n                typeof asyncIterator.throw === 'function' &&\n                typeof asyncIterator.return === 'function') {\n                try {\n                    // Optionally check if the next method yields a value of the expected type\n                    const { value, done } = await asyncIterator.next();\n                    return !done && value instanceof ReadableStream; // or whatever check makes sense for IterableReadableStream<ChainValues>\n                }\n                catch (error) {\n                    // Handle or ignore error\n                }\n            }\n        }\n        return false;\n    }\n    async readStreamAsText(readableStream, callback) {\n        const reader = readableStream.getReader();\n        let readResult;\n        // Continuously read from the stream\n        while (!(readResult = await reader.read()).done) {\n            if (readResult.value && readResult.value.response) {\n                // Emit each chunk text as it's read\n                callback(readResult.value.response);\n            }\n        }\n    }\n    toJSON() {\n        return {\n            input: this.input,\n            enhancedInput: this.enhancedInput,\n            sentInput: this.sentInput,\n            originalInput: this.originalInput,\n            output: this.output,\n            modelId: this.modelId,\n            modelType: this.modelType,\n            multiTemplate: this.multiTemplate,\n            convo: {\n                id: this.convo.getId()\n            },\n            hyperParameters: this.hyperParameters,\n            varStorage: this.varStorage,\n            created_at: this.created_at.toISOString()\n        };\n    }\n}\nexports[\"default\"] = RWSPrompt;\n\n\n/***/ }),\n\n/***/ \"../src/models/types/TimeSeriesModel.ts\":\n/*!**********************************************!*\\\n  !*** ../src/models/types/TimeSeriesModel.ts ***!\n  \\**********************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _model_1 = __importStar(__webpack_require__(/*! ../_model */ \"../src/models/_model.ts\"));\nclass TimeSeriesModel extends _model_1.default {\n    constructor(data) {\n        super(data);\n        if (!this.timestamp) {\n            this.timestamp = new Date();\n        }\n    }\n}\nexports[\"default\"] = TimeSeriesModel;\n__decorate([\n    (0, _model_1.TrackType)(Number),\n    __metadata(\"design:type\", Number)\n], TimeSeriesModel.prototype, \"value\", void 0);\n__decorate([\n    (0, _model_1.TrackType)(Date),\n    __metadata(\"design:type\", Date)\n], TimeSeriesModel.prototype, \"timestamp\", void 0);\n__decorate([\n    (0, _model_1.TrackType)(Object),\n    __metadata(\"design:type\", Object)\n], TimeSeriesModel.prototype, \"params\", void 0);\n\n\n/***/ }),\n\n/***/ \"../src/routing/annotations/Route.ts\":\n/*!*******************************************!*\\\n  !*** ../src/routing/annotations/Route.ts ***!\n  \\*******************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! reflect-metadata */ \"reflect-metadata\");\nfunction Route(name, method = 'GET', params = { responseType: 'json' }) {\n    let metaOpts = { name, method, params };\n    return function (target, key) {\n        Reflect.defineMetadata(`Route:${key}`, metaOpts, target);\n    };\n}\nexports[\"default\"] = Route;\n\n\n/***/ }),\n\n/***/ \"../src/routing/annotations/index.ts\":\n/*!*******************************************!*\\\n  !*** ../src/routing/annotations/index.ts ***!\n  \\*******************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Route = void 0;\nconst Route_1 = __importDefault(__webpack_require__(/*! ./Route */ \"../src/routing/annotations/Route.ts\"));\nexports.Route = Route_1.default;\n\n\n/***/ }),\n\n/***/ \"../src/services/APIGatewayService.ts\":\n/*!********************************************!*\\\n  !*** ../src/services/APIGatewayService.ts ***!\n  \\********************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst AWSService_1 = __importDefault(__webpack_require__(/*! ./AWSService */ \"../src/services/AWSService.ts\"));\nconst LambdaService_1 = __importDefault(__webpack_require__(/*! ./LambdaService */ \"../src/services/LambdaService.ts\"));\nconst VPCService_1 = __importDefault(__webpack_require__(/*! ./VPCService */ \"../src/services/VPCService.ts\"));\nconst { log, error, rwsLog } = ConsoleService_1.default;\nclass APIGatewayService extends _service_1.default {\n    constructor() {\n        super();\n        this.region = AWSService_1.default.getRegion();\n    }\n    async findApiGateway(gatewayName) {\n        let theApi = null;\n        const apis = await AWSService_1.default.getAPIGateway().getRestApis().promise();\n        for (const api of apis.items) {\n            if (api.name === gatewayName + '-API') {\n                theApi = api;\n                break;\n            }\n        }\n        return theApi;\n    }\n    async deleteApiGateway(apiId) {\n        await AWSService_1.default.getAPIGateway().deleteRestApi({ restApiId: apiId }).promise();\n        error('Deleted API Gateway: ' + apiId);\n    }\n    async createApiGateway(gatewayName) {\n        const currentGateway = await this.findApiGateway(gatewayName);\n        let restApiId = null;\n        if (!currentGateway) {\n            const params = {\n                name: gatewayName + '-API',\n                description: `API Gateway for ${gatewayName}`,\n                endpointConfiguration: {\n                    types: [\"REGIONAL\"]\n                }\n            };\n            try {\n                const response = await AWSService_1.default.getAPIGateway().createRestApi(params).promise();\n                restApiId = response.id || null;\n            }\n            catch (err) {\n                error('Error creating API Gateway:', err);\n                throw err;\n            }\n        }\n        else {\n            restApiId = currentGateway.id;\n        }\n        return restApiId;\n    }\n    async createResource(restApiId, resourceLabel) {\n        const resources = await AWSService_1.default.getAPIGateway().getResources({ restApiId: restApiId }).promise();\n        const rootResource = resources.items.find(r => r.path === '/');\n        // Create a new resource under root (if it doesn't exist)\n        let resource;\n        const resourceName = resourceLabel + '-ENDPOINT';\n        for (const res of resources.items) {\n            if (res.pathPart === resourceName) {\n                resource = res;\n                break;\n            }\n        }\n        if (!resource) {\n            resource = await AWSService_1.default.getAPIGateway().createResource({\n                restApiId: restApiId,\n                parentId: rootResource.id,\n                pathPart: resourceName\n            }).promise();\n        }\n        return resource;\n    }\n    async createMethod(restApiId, resource, httpMethod = 'GET') {\n        return await AWSService_1.default.getAPIGateway().putMethod({\n            restApiId: restApiId,\n            resourceId: resource.id,\n            httpMethod: httpMethod,\n            authorizationType: \"NONE\", // Change this if you want to use an authorizer\n            apiKeyRequired: false\n        }).promise();\n    }\n    async associateNATGatewayWithLambda(lambdaFunctionName) {\n        rwsLog(`Creating NAT Gateway for \"${lambdaFunctionName}\" lambda function`);\n        const lambdaConfig = { ...(await LambdaService_1.default.getLambdaFunction(lambdaFunctionName)).Configuration };\n        const privateSubnetId = lambdaConfig.VpcConfig.SubnetIds[0];\n        // const publicSubnet = await VPCService.createPublicSubnet(lambdaConfig.VpcConfig.VpcId, 20);    \n        // const publicSubnetId = publicSubnet.Subnet.SubnetId;\n        try {\n            const eip = await AWSService_1.default.getEC2().allocateAddress({}).promise();\n            if (!eip.AllocationId) {\n                throw new Error('Failed to allocate Elastic IP.');\n            }\n            const natGateway = await AWSService_1.default.getEC2().createNatGateway({\n                SubnetId: privateSubnetId,\n                AllocationId: eip.AllocationId\n            }).promise();\n            const routeTable = await VPCService_1.default.getDefaultRouteTable(lambdaConfig.VpcConfig.VpcId);\n            if (!routeTable) {\n                throw new Error('No route table exists.');\n            }\n            await VPCService_1.default.waitForNatGatewayAvailable(natGateway.NatGateway.NatGatewayId);\n            await AWSService_1.default.getEC2().createRoute({\n                RouteTableId: routeTable.RouteTableId,\n                DestinationCidrBlock: '0.0.0.0/0',\n                NatGatewayId: natGateway.NatGateway.NatGatewayId\n            }).promise();\n            rwsLog('Lambda function associated with NAT Gateway successfully.');\n        }\n        catch (e) {\n            error(e.code, e.message);\n        }\n    }\n}\nexports[\"default\"] = APIGatewayService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/AWSService.ts\":\n/*!*************************************!*\\\n  !*** ../src/services/AWSService.ts ***!\n  \\*************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ./AppConfigService */ \"../src/services/AppConfigService.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst aws_sdk_1 = __importDefault(__webpack_require__(/*! aws-sdk */ \"aws-sdk\"));\nconst { log, warn, error, color, rwsLog } = ConsoleService_1.default;\nclass AWSService extends _service_1.default {\n    constructor() {\n        super();\n    }\n    _initApis(region) {\n        if (!region) {\n            this.region = (0, AppConfigService_1.default)().get('aws_lambda_region');\n        }\n        else {\n            this.region = region;\n        }\n        // console.log(region,this.s3, this.region)\n        if (!this.s3 && this.region) {\n            this.s3 = new aws_sdk_1.default.S3({\n                region: this.region,\n                credentials: {\n                    accessKeyId: (0, AppConfigService_1.default)().get('aws_access_key'),\n                    secretAccessKey: (0, AppConfigService_1.default)().get('aws_secret_key'),\n                }\n            });\n        }\n        if (!this.apiGateway && this.region) {\n            this.apiGateway = new aws_sdk_1.default.APIGateway({\n                region: this.region,\n                credentials: {\n                    accessKeyId: (0, AppConfigService_1.default)().get('aws_access_key'),\n                    secretAccessKey: (0, AppConfigService_1.default)().get('aws_secret_key'),\n                }\n            });\n        }\n        if (!this.iam && this.region) {\n            this.iam = new aws_sdk_1.default.IAM({\n                region: this.region,\n                credentials: {\n                    accessKeyId: (0, AppConfigService_1.default)().get('aws_access_key'),\n                    secretAccessKey: (0, AppConfigService_1.default)().get('aws_secret_key'),\n                }\n            });\n        }\n        if (!this.efs && this.region) {\n            this.efs = new aws_sdk_1.default.EFS({\n                region: this.region,\n                credentials: {\n                    accessKeyId: (0, AppConfigService_1.default)().get('aws_access_key'),\n                    secretAccessKey: (0, AppConfigService_1.default)().get('aws_secret_key'),\n                }\n            });\n        }\n        if (!this.ec2 && this.region) {\n            this.ec2 = new aws_sdk_1.default.EC2({\n                region: (0, AppConfigService_1.default)().get('aws_lambda_region'),\n                credentials: {\n                    accessKeyId: (0, AppConfigService_1.default)().get('aws_access_key'),\n                    secretAccessKey: (0, AppConfigService_1.default)().get('aws_secret_key'),\n                }\n            });\n        }\n        if (!this.lambda && this.region) {\n            this.lambda = new aws_sdk_1.default.Lambda({\n                region: this.region,\n                credentials: {\n                    accessKeyId: (0, AppConfigService_1.default)().get('aws_access_key'),\n                    secretAccessKey: (0, AppConfigService_1.default)().get('aws_secret_key'),\n                }\n            });\n        }\n        if (!this.cloudWatch && this.region) {\n            this.cloudWatch = new aws_sdk_1.default.CloudWatchLogs({\n                region: this.region,\n                credentials: {\n                    accessKeyId: (0, AppConfigService_1.default)().get('aws_access_key'),\n                    secretAccessKey: (0, AppConfigService_1.default)().get('aws_secret_key'),\n                }\n            });\n        }\n    }\n    async checkForRolePermissions(roleARN, permissions) {\n        const { OK, policies } = await this.firePermissionCheck(roleARN, permissions);\n        return {\n            OK,\n            policies\n        };\n    }\n    async firePermissionCheck(roleARN, permissions) {\n        const params = {\n            PolicySourceArn: roleARN, // Replace with your IAM role ARN\n            ActionNames: permissions\n        };\n        const policies = [];\n        let allowed = true;\n        try {\n            const data = await this.getIAM().simulatePrincipalPolicy(params).promise();\n            for (let result of data.EvaluationResults) {\n                if (result.EvalDecision !== 'allowed') {\n                    allowed = false;\n                    policies.push(result.EvalActionName);\n                }\n            }\n        }\n        catch (err) {\n            error('Permission check error:');\n            log(err);\n            allowed = false;\n        }\n        return {\n            OK: allowed,\n            policies: policies\n        };\n    }\n    getS3(region) {\n        this._initApis(region);\n        return this.s3;\n    }\n    getEC2(region) {\n        this._initApis(region);\n        return this.ec2;\n    }\n    getEFS(region) {\n        this._initApis(region);\n        return this.efs;\n    }\n    getLambda(region) {\n        this._initApis(region);\n        return this.lambda;\n    }\n    getRegion(region) {\n        this._initApis(region);\n        return this.region;\n    }\n    getIAM(region) {\n        this._initApis(region);\n        return this.iam;\n    }\n    getAPIGateway(region) {\n        this._initApis(region);\n        return this.apiGateway;\n    }\n    getCloudWatch(region) {\n        this._initApis(region);\n        return this.cloudWatch;\n    }\n}\nexports[\"default\"] = AWSService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/AppConfigService.ts\":\n/*!*******************************************!*\\\n  !*** ../src/services/AppConfigService.ts ***!\n  \\*******************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AppConfigService = void 0;\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst AppDefaultConfig = {\n    mongo_url: null,\n    mongo_db: null,\n    port: null,\n    ws_port: null,\n    test_port: null,\n    test_ws_port: null,\n    domain: null,\n    ssl_cert: null,\n    ssl_key: null,\n    secret_key: null,\n    user_class: null,\n    user_models: [],\n    controller_list: [],\n    ws_routes: {},\n    http_routes: [],\n    commands: [],\n    aws_lambda_region: null,\n    aws_access_key: null,\n    aws_secret_key: null,\n    aws_lambda_role: null,\n    aws_lambda_bucket: null,\n    pub_dir: null\n};\nclass AppConfigService extends _service_1.default {\n    constructor(cfg) {\n        super();\n        this._custom_data = {};\n        this.data = cfg;\n    }\n    get(key) {\n        if (key in this.data && this.data[key] !== null) {\n            return this.data[key];\n        }\n        if (key in this._custom_data) {\n            return this._custom_data[key];\n        }\n        return null;\n    }\n    set(key, val) {\n        this._custom_data[key] = val;\n    }\n    reloadConfig(cfgString) {\n        const cfg = (__webpack_require__(\"../src/services sync recursive\")(cfgString)).defaults;\n        this.data = cfg();\n        return this;\n    }\n    static getConfigSingleton(cfg) {\n        const className = this.name;\n        const instanceExists = _service_1.default._instances[className];\n        if (cfg) {\n            _service_1.default._instances[className] = new this(cfg);\n        }\n        else if (!instanceExists && !cfg) {\n            _service_1.default._instances[className] = new this(AppDefaultConfig);\n        }\n        return _service_1.default._instances[className];\n    }\n}\nexports.AppConfigService = AppConfigService;\nexports[\"default\"] = (cfg) => AppConfigService.getConfigSingleton(cfg);\n\n\n/***/ }),\n\n/***/ \"../src/services/AuthService.ts\":\n/*!**************************************!*\\\n  !*** ../src/services/AuthService.ts ***!\n  \\**************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ./AppConfigService */ \"../src/services/AppConfigService.ts\"));\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\"));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\n/**\n * @notExported\n */\nclass AuthService extends _service_1.default {\n    constructor() {\n        super();\n    }\n    async authorize(token, constructor) {\n        const secretKey = (0, AppConfigService_1.default)().get('secret_key');\n        try {\n            return await new Promise((approve, reject) => {\n                jsonwebtoken_1.default.verify(token, secretKey, (error, tokenData) => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n                    approve(new constructor(tokenData));\n                });\n            });\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n}\nexports[\"default\"] = AuthService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/CloudWatchService.ts\":\n/*!********************************************!*\\\n  !*** ../src/services/CloudWatchService.ts ***!\n  \\********************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst AWSService_1 = __importDefault(__webpack_require__(/*! ./AWSService */ \"../src/services/AWSService.ts\"));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst { log, rwsLog, error, color } = ConsoleService_1.default;\nconst _MS = 1000;\nclass CloudWatchService extends _service_1.default {\n    async printLogsForLambda(lambdaFunctionName, startTime, endTime, terminateTimeout = 30 * _MS) {\n        const cloudWatchLogs = AWSService_1.default.getCloudWatch();\n        const logGroupName = `/aws/lambda/${lambdaFunctionName}`; // Standard log group name format for Lambda\n        let logStreamName;\n        let logsTimeout = { core: null };\n        // Get the latest log stream\n        const describeParams = {\n            logGroupName,\n            orderBy: 'LastEventTime',\n            descending: true,\n            limit: 1\n        };\n        try {\n            const describeResult = await cloudWatchLogs.describeLogStreams(describeParams).promise();\n            if (describeResult.logStreams && describeResult.logStreams[0]) {\n                logStreamName = describeResult.logStreams[0].logStreamName;\n            }\n            else {\n                error(\"No log streams found for the specified Lambda function.\");\n                return;\n            }\n        }\n        catch (err) {\n            error(\"An error occurred while describing log streams:\", err);\n            return;\n        }\n        let terminateTimer = null;\n        const getLogs = async (nextToken) => {\n            // const lambdaDetails = await LambdaService.getLambdaFunction(lambdaFunctionName);     \n            const params = {\n                logGroupName,\n                logStreamName,\n                startTime,\n                endTime,\n                nextToken,\n                limit: 100\n            };\n            try {\n                const data = await cloudWatchLogs.getLogEvents(params).promise();\n                if (data.events && data.events.length > 0) {\n                    this.printLogs(data.events);\n                    // Reset the termination timer since we've received new logs\n                    if (terminateTimer !== null) {\n                        clearTimeout(terminateTimer);\n                    }\n                    terminateTimer = setTimeout(() => {\n                        log(\"Terminating log fetch due to timeout.\");\n                        clearTimeout(terminateTimer);\n                        return;\n                    }, terminateTimeout); // terminateTimeout is the time in milliseconds you want to wait\n                }\n                this.nextForwardToken = data.nextForwardToken;\n                // Recursive call to keep polling for new logs\n                logsTimeout.core = setTimeout(() => getLogs(this.nextForwardToken), 5000); //\n            }\n            catch (err) {\n                error(\"An error occurred while fetching logs:\", err);\n            }\n        };\n        getLogs();\n        return logsTimeout;\n    }\n    printLogs(events) {\n        events.forEach(event => {\n            log(color().blue(`[AWS CloudWatch] `) + `{${new Date(event.timestamp).toISOString()}} : ${event.message}`);\n        });\n    }\n}\nexports[\"default\"] = CloudWatchService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/ConsoleService.ts\":\n/*!*****************************************!*\\\n  !*** ../src/services/ConsoleService.ts ***!\n  \\*****************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst chalk_1 = __importDefault(__webpack_require__(/*! chalk */ \"chalk\"));\nconst pino_1 = __importDefault(__webpack_require__(/*! pino */ \"pino\"));\nconst pino_pretty_1 = __importDefault(__webpack_require__(/*! pino-pretty */ \"pino-pretty\")); // Import pino-pretty\nclass ConsoleService extends _service_1.default {\n    constructor() {\n        super();\n        this.isEnabled = true;\n        this.originalLogMethods = null;\n        this.getOriginalLogFunctions = () => {\n            return {\n                log: console.log,\n                warn: console.warn,\n                error: console.error,\n            };\n        };\n        this.disableOriginalLogFunctions = () => {\n            console.log = (...args) => { };\n            console.warn = (...args) => { };\n            console.error = (...args) => { };\n        };\n        this.restoreOriginalLogFunctions = () => {\n            const originalF = this.originalLogMethods;\n            console.log = originalF.log;\n            console.warn = originalF.warn;\n            console.error = originalF.error;\n        };\n        this.log = this.log.bind(this);\n        this.error = this.error.bind(this);\n        this.warn = this.warn.bind(this);\n        this.isEnabled = true;\n        this.originalLogMethods = this.getOriginalLogFunctions();\n    }\n    color() {\n        return chalk_1.default;\n    }\n    log(...obj) {\n        if (!this.isEnabled) {\n            return;\n        }\n        const _self = this;\n        let typeBucket = [];\n        let lastType = null;\n        obj.forEach((elem, index) => {\n            const elemType = typeof elem;\n            const isLast = index == obj.length - 1;\n            if (((lastType === null && obj.length === 1) || (lastType !== null && lastType !== elemType)) || isLast) {\n                if (lastType === 'string') {\n                    console.log(typeBucket.join(' '));\n                }\n                else {\n                    typeBucket.forEach((bucketElement) => {\n                        _self.prettyPrintObject(bucketElement);\n                    });\n                }\n                typeBucket = [];\n                if (isLast) {\n                    if (elemType === 'string') {\n                        console.log(elem);\n                    }\n                    else {\n                        _self.prettyPrintObject(elem);\n                    }\n                    return;\n                }\n            }\n            typeBucket.push(elem);\n            lastType = elemType; // Update the lastType for the next iteration\n        });\n    }\n    colorObject(obj) {\n        const _JSON_COLORS = {\n            'keys': 'green',\n            'objectValue': 'magenta',\n            'braces': 'blue',\n            'arrayBraces': 'yellow',\n            'colons': 'white', // Color for colons\n            'default': 'reset' // Default color to reset to default chalk color\n        };\n        const getCodeColor = (chalkKey, textValue) => {\n            return chalk_1.default[chalkKey](textValue);\n        };\n        const objString = JSON.stringify(this.sanitizeObject(obj), null, 2);\n        const lines = objString.split('\\n');\n        const coloredLines = [];\n        for (const line of lines) {\n            const parts = line.split(/(\"[^\"]*\"\\s*:\\s*)|(\"[^\"]*\":\\s*)|([{}[\\],])/); // Split the line into parts around keys, colons, commas, braces, and brackets\n            // Process each part and colorize accordingly\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                if (part !== undefined) {\n                    const trimmedPart = part.trim();\n                    if (trimmedPart === ':') {\n                        // This part is a colon, colorize it with white\n                        parts[i] = getCodeColor(_JSON_COLORS.colons, ':');\n                    }\n                    else if (trimmedPart === ',') {\n                        // This part is a comma, colorize it with white\n                        parts[i] = getCodeColor(_JSON_COLORS.colons, ',');\n                    }\n                    else if (trimmedPart === '[' || trimmedPart === ']') {\n                        // This part is a bracket, colorize it with the arrayBraces color\n                        parts[i] = getCodeColor(_JSON_COLORS.arrayBraces, part);\n                    }\n                    else if (i % 4 === 1) {\n                        // This part is a key, colorize it with the keys color\n                        const key = trimmedPart;\n                        if (key === ':') {\n                            parts[i] = getCodeColor(_JSON_COLORS.colons, key);\n                        }\n                        else {\n                            parts[i] = getCodeColor(_JSON_COLORS.keys, key);\n                        }\n                    }\n                    else if (i % 4 === 3) {\n                        // This part is a value, colorize it with objectValue\n                        const value = trimmedPart;\n                        parts[i] = getCodeColor(_JSON_COLORS.objectValue, value);\n                    }\n                }\n            }\n            coloredLines.push(parts.join('')); // Join and add the modified line to the result\n        }\n        return coloredLines.join('\\n'); // Join the colored lines and return as a single string\n    }\n    warn(...obj) {\n        if (!this.isEnabled) {\n            return;\n        }\n        console.log(...obj.map((txt) => chalk_1.default.yellowBright('[RWS CLI WARNING] ' + txt)));\n    }\n    sanitizeObject(obj) {\n        const sensitiveKeys = [\"mongo_url\", \"mongo_db\", \"ssl_cert\", \"ssl_key\", \"secret_key\", \"aws_access_key\", \"aws_secret_key\"];\n        const sanitizedObj = { ...obj }; // Create a shallow copy of the object\n        for (const key of sensitiveKeys) {\n            if (sanitizedObj.hasOwnProperty(key)) {\n                sanitizedObj[key] = \"<VALUE HIDDEN>\";\n            }\n        }\n        return sanitizedObj;\n    }\n    getPino() {\n        return (0, pino_1.default)((0, pino_pretty_1.default)());\n    }\n    prettyPrintObject(obj) {\n        this.getPino().info(this.colorObject(this.sanitizeObject(obj)));\n    }\n    error(...obj) {\n        if (!this.isEnabled) {\n            return;\n        }\n        console.error(obj);\n        console.log(...obj.map((txt) => chalk_1.default.red('[RWS CLI ERROR] ' + txt)));\n    }\n    stopLogging() {\n        this.isEnabled = false;\n        this.disableOriginalLogFunctions();\n    }\n    startLogging() {\n        this.isEnabled = true;\n        this.restoreOriginalLogFunctions();\n    }\n    updateLogLine(message) {\n        process.stdout.write('\\r' + message);\n    }\n    rwsLog(logCat, logString = null) {\n        const logName = logString ? `[${logCat}]` : '[RWS CLI]';\n        const logData = logString ? logString : logCat;\n        console.log(chalk_1.default.green(logName), logData);\n    }\n}\nexports[\"default\"] = ConsoleService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/DBService.ts\":\n/*!************************************!*\\\n  !*** ../src/services/DBService.ts ***!\n  \\************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DBService = void 0;\nconst client_1 = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\nconst mongodb_1 = __webpack_require__(/*! mongodb */ \"mongodb\");\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ./AppConfigService */ \"../src/services/AppConfigService.ts\"));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nclass DBService extends _service_1.default {\n    constructor(opts = null) {\n        super();\n        this.opts = null;\n        this.connected = false;\n    }\n    connectToDB(opts = null) {\n        if (opts) {\n            this.opts = opts;\n        }\n        else {\n            this.opts = {\n                dbUrl: (0, AppConfigService_1.default)().get('mongo_url'),\n                dbName: (0, AppConfigService_1.default)().get('mongo_db'),\n            };\n        }\n        if (!this.opts.dbUrl) {\n            return;\n        }\n        try {\n            this.client = new client_1.PrismaClient({\n                datasources: {\n                    db: {\n                        url: this.opts.dbUrl\n                    },\n                },\n            });\n            this.connected = true;\n        }\n        catch (e) {\n            ConsoleService_1.default.error('PRISMA CONNECTION ERROR');\n        }\n    }\n    async createBaseMongoClient() {\n        var _a;\n        const dbUrl = ((_a = this.opts) === null || _a === void 0 ? void 0 : _a.dbUrl) || (0, AppConfigService_1.default)().get('mongo_url');\n        const client = new mongodb_1.MongoClient(dbUrl);\n        await client.connect();\n        return client;\n    }\n    async createBaseMongoClientDB() {\n        var _a;\n        const dbName = ((_a = this.opts) === null || _a === void 0 ? void 0 : _a.dbName) || (0, AppConfigService_1.default)().get('mongo_db');\n        const client = await this.createBaseMongoClient();\n        return client.db(dbName);\n    }\n    async cloneDatabase(source, target) {\n        const client = await this.createBaseMongoClient();\n        // Source and target DB\n        const sourceDb = client.db(source);\n        const targetDb = client.db(target);\n        // Get all collections from source DB\n        const collections = await sourceDb.listCollections().toArray();\n        // Loop over all collections and copy them to the target DB\n        for (let collection of collections) {\n            const docs = await sourceDb.collection(collection.name).find({}).toArray();\n            await targetDb.collection(collection.name).insertMany(docs);\n        }\n        await client.close();\n    }\n    async watchCollection(collectionName, preRun) {\n        const db = await this.createBaseMongoClientDB();\n        const collection = db.collection(collectionName);\n        const changeStream = collection.watch();\n        return new Promise((resolve) => {\n            changeStream.on('change', (change) => {\n                resolve(change);\n            });\n            preRun();\n        });\n    }\n    async insert(data, collection, isTimeSeries = false) {\n        let result = data;\n        // Insert time-series data outside of the transaction\n        if (isTimeSeries) {\n            const db = await this.createBaseMongoClientDB();\n            const collectionHandler = db.collection(collection);\n            const insert = await collectionHandler.insertOne(data);\n            result = await this.findOneBy(collection, { id: insert.insertedId.toString() });\n            return result;\n        }\n        const prismaCollection = this.getCollectionHandler(collection);\n        result = await prismaCollection.create({ data });\n        return await this.findOneBy(collection, { id: result.id });\n    }\n    async update(data, collection) {\n        const model_id = data.id;\n        delete data['id'];\n        const prismaCollection = this.getCollectionHandler(collection);\n        await prismaCollection.update({\n            where: {\n                id: model_id,\n            },\n            data: data,\n        });\n        return await this.findOneBy(collection, { id: model_id });\n    }\n    ;\n    async findOneBy(collection, conditions) {\n        return await this.getCollectionHandler(collection).findFirst({ where: conditions });\n    }\n    async delete(collection, conditions) {\n        await this.getCollectionHandler(collection).deleteMany({ where: conditions });\n        return;\n    }\n    async findBy(collection, conditions, fields = null) {\n        const params = { where: conditions };\n        if (fields) {\n            params.select = {};\n            fields.forEach((fieldName) => {\n                params.select[fieldName] = true;\n            });\n        }\n        return await this.getCollectionHandler(collection).findMany(params);\n    }\n    async collectionExists(collection_name) {\n        var _a;\n        const dbUrl = ((_a = this.opts) === null || _a === void 0 ? void 0 : _a.dbUrl) || (0, AppConfigService_1.default)().get('mongo_url');\n        const client = new mongodb_1.MongoClient(dbUrl);\n        try {\n            await client.connect();\n            const db = client.db('junctioned'); // Replace with your database name\n            const collections = await db.listCollections().toArray();\n            const existingCollectionNames = collections.map((collection) => collection.name);\n            return existingCollectionNames.includes(collection_name);\n        }\n        catch (error) {\n            ConsoleService_1.default.error('Error connecting to MongoDB:', error);\n            throw error;\n        }\n    }\n    async createTimeSeriesCollection(collection_name) {\n        try {\n            const db = await this.createBaseMongoClientDB();\n            // Create a time series collection\n            const options = {\n                timeseries: {\n                    timeField: 'timestamp', // Replace with your timestamp field\n                    metaField: 'params' // Replace with your metadata field\n                }\n            };\n            await db.createCollection(collection_name, options); // Replace with your collection name\n            return db.collection(collection_name);\n        }\n        catch (error) {\n            ConsoleService_1.default.error('Error connecting to MongoDB:', error);\n            throw error;\n        }\n    }\n    getCollectionHandler(collection) {\n        if (!this.client || !this.connected) {\n            this.connectToDB();\n        }\n        return this.client[collection];\n    }\n}\nexports.DBService = DBService;\nexports[\"default\"] = DBService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/EFSService.ts\":\n/*!*************************************!*\\\n  !*** ../src/services/EFSService.ts ***!\n  \\*************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst LambdaService_1 = __importDefault(__webpack_require__(/*! ./LambdaService */ \"../src/services/LambdaService.ts\"));\nconst AWSService_1 = __importDefault(__webpack_require__(/*! ./AWSService */ \"../src/services/AWSService.ts\"));\nconst ProcessService_1 = __importDefault(__webpack_require__(/*! ./ProcessService */ \"../src/services/ProcessService.ts\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst VPCService_1 = __importDefault(__webpack_require__(/*! ./VPCService */ \"../src/services/VPCService.ts\"));\nconst { log, warn, error, color, rwsLog } = ConsoleService_1.default;\nconst __STATE_WAIT_TIME = 3000; //ms\nclass EFSService extends _service_1.default {\n    constructor() {\n        super();\n    }\n    async getOrCreateEFS(functionName, vpcId, subnetId) {\n        const response = await AWSService_1.default.getEFS().describeFileSystems({ CreationToken: functionName }).promise();\n        if (response.FileSystems && response.FileSystems.length > 0) {\n            const fileSystemId = response.FileSystems[0].FileSystemId;\n            const accessPoints = await this.getAccessPoints(fileSystemId);\n            if (!accessPoints.length) {\n                throw \"No acces point in EFS for RWS lambdas\";\n            }\n            log(`${color().green('[RWS Cloud FS Service]')} EFS exists:`, {\n                efsId: fileSystemId,\n                apARN: accessPoints[0].AccessPointArn\n            });\n            return [fileSystemId, accessPoints[0].AccessPointArn, true];\n        }\n        else {\n            const params = {\n                CreationToken: functionName,\n                PerformanceMode: 'generalPurpose',\n            };\n            try {\n                const response = await AWSService_1.default.getEFS().createFileSystem(params).promise();\n                await this.waitForEFS(response.FileSystemId);\n                const fsMountId = await this.createMountTarget(response.FileSystemId, subnetId);\n                await this.waitForFileSystemMount(response.FileSystemId);\n                const [accessPointId, accessPointArn] = await this.createAccessPoint(response.FileSystemId);\n                await this.waitForAccessPoint(accessPointId);\n                const endpointId = await VPCService_1.default.createVPCEndpointIfNotExist(vpcId);\n                await VPCService_1.default.ensureRouteToVPCEndpoint(vpcId, endpointId);\n                log(`${color().green('[RWS Cloud FS Service]')} EFS Created:`, response);\n                return [response.FileSystemId, accessPointArn, false];\n            }\n            catch (err) {\n                error('Error creating EFS:', err);\n                throw err; // It's a good practice to throw the error so the caller knows something went wrong.\n            }\n        }\n    }\n    async deleteEFS(fileSystemId) {\n        try {\n            await AWSService_1.default.getEFS().deleteFileSystem({ FileSystemId: fileSystemId }).promise();\n            error(`EFS with ID ${fileSystemId} has been deleted.`);\n        }\n        catch (err) {\n            error('Error while deleting EFS:');\n            log(err);\n            throw err;\n        }\n    }\n    async waitForEFS(fileSystemId) {\n        let isAvailable = false;\n        log(`${color().yellowBright('[EFS Listener] awaiting EFS state change')}`);\n        while (!isAvailable) {\n            const mountResponse = await AWSService_1.default.getEFS().describeFileSystems({ FileSystemId: fileSystemId }).promise();\n            if (mountResponse.FileSystems && mountResponse.FileSystems.length && mountResponse.FileSystems[0].LifeCycleState === 'available') {\n                isAvailable = true;\n            }\n            else {\n                log(`${color().yellowBright('[EFS Listener] .')}`);\n                await new Promise(resolve => setTimeout(resolve, __STATE_WAIT_TIME)); // wait for 5 seconds before checking again\n            }\n        }\n    }\n    sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    async waitForFileSystemMount(fileSystemId) {\n        while (true) {\n            try {\n                log(`${color().yellowBright('[EFS Mount Listener] awaiting EFS mount change')}`);\n                const response = await AWSService_1.default.getEFS().describeMountTargets({ FileSystemId: fileSystemId }).promise();\n                const isMounted = response.MountTargets.some(mountTarget => mountTarget.LifeCycleState === 'available');\n                if (isMounted) {\n                    log(`${color().yellowBright('[EFS Mount Listener] DONE')}`);\n                    return true;\n                }\n                else {\n                    log(`${color().yellowBright('[EFS Mount Listener] is during creation process...')}`);\n                }\n                log(`${color().yellowBright('[EFS Mount Listener] .')}`);\n                await ProcessService_1.default.sleep(__STATE_WAIT_TIME);\n            }\n            catch (error) {\n                console.error('Error while checking EFS mount status:', error);\n                throw error;\n            }\n        }\n    }\n    async waitForAccessPoint(accessPointId) {\n        let isAvailable = false;\n        log(`${color().yellowBright('[EFS AP Listener] awaiting EFS access point change')}`, accessPointId);\n        while (!isAvailable) {\n            const accessPointResponse = await AWSService_1.default.getEFS().describeAccessPoints({ AccessPointId: accessPointId }).promise();\n            if (accessPointResponse.AccessPoints && accessPointResponse.AccessPoints.length && accessPointResponse.AccessPoints[0].LifeCycleState === 'available') {\n                isAvailable = true;\n            }\n            else {\n                log(`${color().yellowBright('[EFS AP Listener] .')}`);\n                await new Promise(resolve => setTimeout(resolve, 5000)); // wait for 5 seconds before checking again                \n            }\n        }\n    }\n    generateClientToken() {\n        return Date.now().toString() + Math.random().toString(36).substr(2, 5);\n    }\n    async getAccessPoints(fileSystemId) {\n        try {\n            const params = {\n                FileSystemId: fileSystemId // specify the FileSystemId to filter access points for a specific EFS\n            };\n            const response = await AWSService_1.default.getEFS().describeAccessPoints(params).promise();\n            if (response.AccessPoints && response.AccessPoints.length > 0) {\n                return response.AccessPoints; // this will return an array of access points\n            }\n            else {\n                log('No access points found for the specified EFS.');\n                return null;\n            }\n        }\n        catch (err) {\n            error('Error getting access point:', error);\n            throw err;\n        }\n    }\n    async createAccessPoint(fileSystemId) {\n        const clientToken = this.generateClientToken(); // Generate a unique client token\n        const params = {\n            FileSystemId: fileSystemId,\n            ClientToken: clientToken, // Add the client token here\n            PosixUser: {\n                Uid: 1001, // You can adjust these values as per your requirements.\n                Gid: 1001\n            },\n            RootDirectory: {\n                Path: \"/mnt/efs\", // The path where Lambda will mount the EFS.\n                CreationInfo: {\n                    OwnerUid: 1001,\n                    OwnerGid: 1001,\n                    Permissions: \"755\"\n                }\n            }\n        };\n        try {\n            const response = await AWSService_1.default.getEFS().createAccessPoint(params).promise();\n            log(`${color().green('[RWS Cloud FS Service]')} EFS AP created:`, response);\n            return [response.AccessPointId, response.AccessPointArn];\n        }\n        catch (err) {\n            error('Error creating EFS access point:', err);\n            throw err;\n        }\n    }\n    async createMountTarget(fileSystemId, subnetId) {\n        const params = {\n            FileSystemId: fileSystemId,\n            SubnetId: subnetId,\n        };\n        try {\n            const response = await AWSService_1.default.getEFS().createMountTarget(params).promise();\n            log(`${color().green('[RWS Cloud FS Service]')} EFS Mount Target created:`, response);\n            return response.MountTargetId;\n        }\n        catch (error) {\n            console.error('Error creating Mount Target:', error);\n        }\n    }\n    async uploadToEFS(baseFunctionName, efsId, modulesS3Key, s3Bucket, vpcId, subnetId) {\n        const efsLoaderFunctionName = await this.processEFSLoader(vpcId, subnetId);\n        const params = {\n            functionName: `${baseFunctionName}`,\n            efsId,\n            modulesS3Key,\n            s3Bucket\n        };\n        try {\n            log(`${color().green(`[RWS Lambda Service]`)} invoking EFS Loader as \"${efsLoaderFunctionName}\" lambda function for \"${baseFunctionName}\" with ${modulesS3Key} in ${s3Bucket} bucket.`);\n            const response = await LambdaService_1.default.invokeLambda(efsLoaderFunctionName, params);\n            rwsLog('RWS Lambda Service', color().yellowBright(`\"${efsLoaderFunctionName}\" lambda function response:`));\n            log(response);\n            return; // JSON.parse(response.Response.Payload as string);\n        }\n        catch (error) {\n            // await EFSService.deleteEFS(efsId);\n            console.error('Error invoking Lambda:', error);\n            throw error;\n        }\n    }\n    async processEFSLoader(vpcId, subnetId) {\n        const executionDir = process.cwd();\n        const filePath = module.id;\n        const cmdDir = filePath.replace('./', '').replace(/\\/[^/]*\\.ts$/, '');\n        const moduleDir = path_1.default.resolve(cmdDir, '..', '..', '..', '..');\n        const moduleCfgDir = `${executionDir}/node_modules/.rws`;\n        const _UNZIP_FUNCTION_NAME = 'efs-loader';\n        if (!(await LambdaService_1.default.functionExists('RWS-' + _UNZIP_FUNCTION_NAME))) {\n            log(`${color().green(`[RWS Lambda Service]`)} creating EFS Loader as \"${_UNZIP_FUNCTION_NAME}\" lambda function.`, moduleDir);\n            const zipPath = await LambdaService_1.default.archiveLambda(`${moduleDir}/lambda-functions/efs-loader`, moduleCfgDir);\n            await LambdaService_1.default.deployLambda(_UNZIP_FUNCTION_NAME, zipPath, vpcId, subnetId, true);\n        }\n        return _UNZIP_FUNCTION_NAME;\n    }\n    async deleteDir() {\n    }\n}\nexports[\"default\"] = EFSService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/LambdaService.ts\":\n/*!****************************************!*\\\n  !*** ../src/services/LambdaService.ts ***!\n  \\****************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ./AppConfigService */ \"../src/services/AppConfigService.ts\"));\nconst EFSService_1 = __importDefault(__webpack_require__(/*! ./EFSService */ \"../src/services/EFSService.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst AWSService_1 = __importDefault(__webpack_require__(/*! ./AWSService */ \"../src/services/AWSService.ts\"));\nconst ZipService_1 = __importDefault(__webpack_require__(/*! ./ZipService */ \"../src/services/ZipService.ts\"));\nconst S3Service_1 = __importDefault(__webpack_require__(/*! ./S3Service */ \"../src/services/S3Service.ts\"));\nconst APIGatewayService_1 = __importDefault(__webpack_require__(/*! ./APIGatewayService */ \"../src/services/APIGatewayService.ts\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst UtilsService_1 = __importDefault(__webpack_require__(/*! ./UtilsService */ \"../src/services/UtilsService.ts\"));\nconst ProcessService_1 = __importDefault(__webpack_require__(/*! ./ProcessService */ \"../src/services/ProcessService.ts\"));\nconst VPCService_1 = __importDefault(__webpack_require__(/*! ./VPCService */ \"../src/services/VPCService.ts\"));\nconst { log, warn, error, color, rwsLog } = ConsoleService_1.default;\nconst MIN = 60; // 1MIN = 60s\nclass LambdaService extends _service_1.default {\n    constructor() {\n        super();\n    }\n    async archiveLambda(lambdaDirPath, moduleCfgDir, fullZip = false) {\n        const lambdaDirName = lambdaDirPath.split('/').filter(Boolean).pop();\n        const lambdaPath = path_1.default.join(moduleCfgDir, 'lambda', `RWS-${lambdaDirName}-app.zip`);\n        if (!fs_1.default.existsSync(path_1.default.join(moduleCfgDir, 'lambda'))) {\n            fs_1.default.mkdirSync(path_1.default.join(moduleCfgDir, 'lambda'));\n        }\n        // Create archives\n        const tasks = [];\n        if (fs_1.default.existsSync(lambdaPath)) {\n            fs_1.default.unlinkSync(lambdaPath);\n        }\n        // if(fs.existsSync(lambdaPath + '/package.json')){\n        //   await ProcessService.runShellCommand(`cd ${lambdaPath} && npm install`);\n        // }\n        const toolsFile = `${path_1.default.resolve(lambdaDirPath, '..')}/tools.js`;\n        const targetToolsFile = `${lambdaDirPath}/tools.js`;\n        fs_1.default.copyFileSync(toolsFile, targetToolsFile);\n        log(`${color().green('[RWS Lambda Service]')} archiving ${color().yellowBright(lambdaDirPath)} to:\\n ${color().yellowBright(lambdaPath)}`);\n        tasks.push(ZipService_1.default.createArchive(lambdaPath, lambdaDirPath, fullZip ? null : {\n            'ignore': ['node_modules/**/*']\n        }));\n        await Promise.all(tasks);\n        fs_1.default.unlinkSync(targetToolsFile);\n        log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('ZIP package complete.')}`);\n        return lambdaPath;\n    }\n    determineLambdaPackagePaths(lambdaDirName, moduleCfgDir) {\n        const modulesPath = path_1.default.join(moduleCfgDir, 'lambda', `RWS-modules.zip`);\n        const lambdaPath = path_1.default.join(moduleCfgDir, 'lambda', `lambda-${lambdaDirName}-app.zip`);\n        return [lambdaPath, modulesPath];\n    }\n    setRegion(region) {\n        this.region = region;\n    }\n    async deployLambda(functionDirName, zipPath, vpcId, subnetId, noEFS = false) {\n        this.region = (0, AppConfigService_1.default)().get('aws_lambda_region');\n        const zipFile = fs_1.default.readFileSync(zipPath);\n        try {\n            const s3BucketName = (0, AppConfigService_1.default)().get('aws_lambda_bucket');\n            await S3Service_1.default.bucketExists(s3BucketName);\n            const [efsId, accessPointArn, efsExisted] = await EFSService_1.default.getOrCreateEFS('RWS_EFS', vpcId, subnetId);\n            log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('deploying lambda on ' + this.region)} using ${color().red(`S3://${s3BucketName}/${functionDirName}.zip`)}`);\n            log(`${color().green('[RWS Lambda Service]')} uploading ${color().yellowBright(zipPath)}...`);\n            const s3params = {\n                Bucket: s3BucketName,\n                Key: 'RWS-' + functionDirName + '.zip', // File name you want to save as in S3\n                Body: zipFile\n            };\n            const s3Data = await S3Service_1.default.upload(s3params, true);\n            log(`${color().green('[RWS Lambda Service]')} uploaded ${color().yellowBright(zipPath)} to ${color().red(`S3://${s3BucketName}/RWS-${functionDirName}.zip`)}`);\n            const s3Path = s3Data.Key;\n            const Code = {\n                S3Bucket: s3BucketName,\n                S3Key: s3Path\n            };\n            const lambdaFunctionName = 'RWS-' + functionDirName;\n            const _HANDLER = 'index.handler';\n            const functionDidExist = await this.functionExists(lambdaFunctionName);\n            if (functionDidExist) {\n                await AWSService_1.default.getLambda().updateFunctionCode({\n                    FunctionName: lambdaFunctionName,\n                    ...Code\n                }).promise();\n            }\n            else {\n                const createParams = {\n                    FunctionName: lambdaFunctionName,\n                    Runtime: 'nodejs18.x',\n                    Role: (0, AppConfigService_1.default)().get('aws_lambda_role'),\n                    Handler: _HANDLER,\n                    Code,\n                    VpcConfig: {\n                        SubnetIds: [subnetId], // Add your subnet IDs\n                        SecurityGroupIds: await VPCService_1.default.listSecurityGroups(), // Add your security group ID\n                    },\n                    FileSystemConfigs: [\n                        {\n                            Arn: accessPointArn,\n                            LocalMountPath: '/mnt/efs' // The path in your Lambda function environment where the EFS will be mounted\n                        }\n                    ],\n                    MemorySize: 2048,\n                    Timeout: 15 * MIN,\n                    Environment: {\n                        Variables: {\n                            NODE_PATH: '/mnt/efs/res/modules/' + functionDirName,\n                            HOME: '/mnt/efs/res/tmp/' + functionDirName\n                        }\n                    }\n                };\n                log(color().green('[RWS Lambda Service] is ' + (functionDidExist ? 'updating' : 'creating') + ' lambda function named: ') + color().yellowBright(lambdaFunctionName));\n                await AWSService_1.default.getLambda().createFunction(createParams).promise();\n            }\n            await this.waitForLambda(functionDirName, functionDidExist ? 'update' : 'creation');\n            if (functionDidExist) {\n                const functionInfo = await this.getLambdaFunction(lambdaFunctionName);\n                if (functionInfo.Configuration.Handler !== _HANDLER) {\n                    log(color().green('[RWS Lambda Service]') + ' is changing handler for Lambda function named: ' + color().yellowBright(lambdaFunctionName));\n                    await AWSService_1.default.getLambda().updateFunctionConfiguration({\n                        FunctionName: lambdaFunctionName,\n                        Handler: _HANDLER\n                    }, (err, data) => {\n                        if (err) {\n                            console.log(err, err.stack);\n                        }\n                        else {\n                            console.log(data);\n                        }\n                    }).promise();\n                    await this.waitForLambda(functionDirName, 'handler update');\n                    // await S3Service.delete({\n                    //   Bucket: s3params.Bucket,\n                    //   Key: s3params.Key\n                    // });\n                    // rwsLog('Deleting S3 Object after deploy: ' + color().red(`s3://${s3params.Bucket}/${s3params.Key}`));\n                }\n            }\n            rwsLog('RWS Lambda Service', `lambda function \"${lambdaFunctionName}\" has been ${functionDidExist ? 'created' : 'updated'}`);\n            const npmPackage = this.getNPMPackage(functionDirName);\n            if ((!!npmPackage.deployConfig) && npmPackage.deployConfig.webLambda === true) {\n                if ((await APIGatewayService_1.default.findApiGateway(lambdaFunctionName)) === null) {\n                    await this.setupGatewayForWebLambda(lambdaFunctionName, vpcId);\n                }\n                if (!(await VPCService_1.default.findPublicSubnetInVPC(vpcId))) {\n                    await APIGatewayService_1.default.associateNATGatewayWithLambda(lambdaFunctionName);\n                }\n            }\n        }\n        catch (err) {\n            error(err.message);\n            log(err.stack);\n            throw err;\n        }\n    }\n    getNPMPackage(lambdaDirName) {\n        const moduleDir = path_1.default.resolve(__dirname, '..', '..').replace('dist/', '');\n        const npmPackagePath = `${moduleDir}/lambda-functions/${lambdaDirName}/package.json`;\n        if (!fs_1.default.existsSync(npmPackagePath)) {\n            throw new Error(`The lambda folder \"${lambdaDirName}\" has no package.json inside.`);\n        }\n        return JSON.parse(fs_1.default.readFileSync(npmPackagePath, 'utf-8'));\n    }\n    async deployModules(functionName, efsId, vpcId, subnetId, force = false) {\n        const _RWS_MODULES_UPLOADED = '_rws_efs_modules_uploaded';\n        const savedKey = !force ? UtilsService_1.default.getRWSVar(_RWS_MODULES_UPLOADED) : null;\n        const S3Bucket = (0, AppConfigService_1.default)().get('aws_lambda_bucket');\n        const moduleDir = path_1.default.resolve(__dirname, '..', '..').replace('dist/', '');\n        if (!this.region) {\n            this.region = (0, AppConfigService_1.default)().get('aws_lambda_region');\n        }\n        if (savedKey) {\n            log(`${color().green('[RWS Lambda Service]')} key saved. Deploying by cache.`);\n            await EFSService_1.default.uploadToEFS(functionName, efsId, savedKey, S3Bucket, vpcId, subnetId);\n            return;\n        }\n        log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('deploying lambda modules on ' + this.region)}`);\n        if (!savedKey) {\n            const oldDir = process.cwd();\n            process.chdir(`${moduleDir}/lambda-functions/${functionName}`);\n            rwsLog(`installing ${functionName} modules...`);\n            await ProcessService_1.default.runShellCommand(`npm install`, null, true);\n            rwsLog(color().green(`${functionName} modules have been installed.`));\n            process.chdir(oldDir);\n            const packagePath = `${moduleDir}/lambda-functions/${functionName}/node_modules`;\n            const zipPath = await ZipService_1.default.createArchive(`${process.cwd()}/node_modules/.rws/lambda/RWS-${functionName}-modules.zip`, packagePath);\n            const s3params = {\n                Bucket: S3Bucket,\n                Key: `RWS-${functionName}-modules.zip`,\n                Body: fs_1.default.readFileSync(zipPath)\n            };\n            log(`${color().green('[RWS Lambda Service]')} package file uploading ${zipPath} to S3Bucket`);\n            const s3Data = await S3Service_1.default.upload(s3params);\n            const s3Path = s3Data.Key;\n            // fs.unlinkSync(packagePath);      \n            log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('NPM package file is uploaded to ' + this.region + ' with key:  ' + s3Path)}`);\n            UtilsService_1.default.setRWSVar(_RWS_MODULES_UPLOADED, s3Path);\n            await EFSService_1.default.uploadToEFS(functionName, efsId, s3Path, S3Bucket, vpcId, subnetId);\n            // await S3Service.delete({\n            //   Bucket: s3params.Bucket,\n            //   Key: s3params.Key\n            // });\n            // rwsLog('Deleting S3 Object after module deploy: ' + color().red(`s3://${s3params.Bucket}/${s3params.Key}`));\n        }\n    }\n    async getLambdaFunction(lambdaFunctionName) {\n        try {\n            return await AWSService_1.default.getLambda().getFunction({ FunctionName: lambdaFunctionName }).promise();\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    async functionExists(lambdaFunctionName) {\n        return !!(await this.getLambdaFunction(lambdaFunctionName));\n    }\n    async waitForLambda(functionName, waitFor = null, timeoutMs = 300000, intervalMs = 5000) {\n        const lambdaFunctionName = 'RWS-' + functionName;\n        const startTime = Date.now();\n        log(`${color().yellowBright('[Lambda Listener] awaiting Lambda' + (waitFor !== null ? ' (' + waitFor + ')' : '') + ' state change')}`);\n        while (Date.now() - startTime < timeoutMs) {\n            log(`${color().yellowBright('[Lambda Listener] .')}`);\n            const { Configuration } = await this.getLambdaFunction(lambdaFunctionName);\n            if (Configuration.State === 'Active') {\n                return; // Lambda is active and ready\n            }\n            // If the state is 'Failed', you can either throw an error or handle it differently based on your use case\n            if (Configuration.State === 'Failed') {\n                throw new Error(`Lambda function ${lambdaFunctionName} failed to be ready. Reason: ${Configuration.StateReason}`);\n            }\n            // Wait for the specified interval\n            await new Promise(resolve => setTimeout(resolve, intervalMs));\n        }\n        throw new Error(`Lambda function ${lambdaFunctionName} did not become ready within ${timeoutMs}ms.`);\n    }\n    async deleteLambda(lambdaFunctionName) {\n        const restApi = await APIGatewayService_1.default.findApiGateway(lambdaFunctionName);\n        await APIGatewayService_1.default.deleteApiGateway(restApi.id);\n        await AWSService_1.default.getLambda().deleteFunction({\n            FunctionName: lambdaFunctionName\n        }).promise();\n    }\n    async invokeLambda(functionDirName, payload) {\n        let invocationType = 'RequestResponse';\n        const npmPackage = this.getNPMPackage(functionDirName);\n        if (!!npmPackage.deployConfig && npmPackage.deployConfig.invocationType) {\n            invocationType = npmPackage.deployConfig.invocationType;\n        }\n        if (!!payload._invocationConfig) {\n            const invocationConfig = payload._invocationConfig;\n            invocationType = invocationConfig.invocationType;\n            delete payload['_invocationConfig'];\n        }\n        const params = {\n            FunctionName: 'RWS-' + functionDirName,\n            InvocationType: invocationType,\n            Payload: JSON.stringify(payload),\n        };\n        log(color().green('[RWS Lambda Service]') + color().yellowBright(` invoking (with ${invocationType} type) \"RWS-${functionDirName}\" with payload: `));\n        log(payload);\n        try {\n            const response = await AWSService_1.default.getLambda()\n                .invoke(params)\n                .promise();\n            return {\n                StatusCode: response.StatusCode,\n                Response: response,\n                InvocationType: invocationType\n            };\n        }\n        catch (e) {\n            error(e.message);\n            throw new Error(e);\n        }\n    }\n    findPayload(lambdaArg) {\n        const executionDir = process.cwd();\n        const filePath = module.id;\n        const moduleDir = path_1.default.resolve(__dirname, '..', '..').replace('dist/', '');\n        const moduleCfgDir = `${executionDir}/node_modules/.rws`;\n        let payloadPath = `${executionDir}/payloads/${lambdaArg}.json`;\n        if (!fs_1.default.existsSync(payloadPath)) {\n            rwsLog(color().yellowBright(`No payload file in \"${payloadPath}\"`));\n            const rwsPayloadPath = `${moduleDir}/payloads/${lambdaArg}.json`;\n            if (!fs_1.default.existsSync(rwsPayloadPath)) {\n                rwsLog(color().red(`Found the payload file in \"${rwsPayloadPath}\"`));\n                throw new Error(`No payload`);\n            }\n            else {\n                rwsLog(color().green(`No payload file in \"${payloadPath}\"`));\n                payloadPath = rwsPayloadPath;\n            }\n        }\n        return payloadPath;\n    }\n    async integrateGatewayResource(lambdaFunctionName, restApiId, resource, httpMethod = 'GET') {\n        const lambdaInfo = await this.getLambdaFunction(lambdaFunctionName);\n        const lambdaArn = lambdaInfo.Configuration.FunctionArn;\n        await AWSService_1.default.getAPIGateway().putIntegration({\n            restApiId: restApiId,\n            resourceId: resource.id,\n            httpMethod: httpMethod,\n            type: \"AWS_PROXY\",\n            integrationHttpMethod: \"POST\",\n            uri: `arn:aws:apigateway:${AWSService_1.default.getRegion()}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations`\n        }).promise();\n    }\n    async setupGatewayForWebLambda(lambdaFunctionName, vpcId) {\n        rwsLog('Creating API Gateway for Web Lambda...');\n        const restApiId = await APIGatewayService_1.default.createApiGateway(lambdaFunctionName);\n        const resource = await APIGatewayService_1.default.createResource(restApiId, lambdaFunctionName);\n        const httpMethods = ['GET', 'POST', 'PUT', 'DELETE'];\n        const apiMethods = [];\n        rwsLog('Pushing methods to API Gateway resource.');\n        for (let methodKey in httpMethods) {\n            apiMethods.push(await APIGatewayService_1.default.createMethod(restApiId, resource, httpMethods[methodKey]));\n        }\n        rwsLog(`Integrating API Gateway resource with \"${color().yellowBright(lambdaFunctionName)}\" lambda function.`);\n        for (let apiMethodKey in apiMethods) {\n            const apiMethod = apiMethods[apiMethodKey];\n            await this.integrateGatewayResource(lambdaFunctionName, restApiId, resource, apiMethod.httpMethod);\n        }\n        await AWSService_1.default.getAPIGateway().createDeployment({\n            restApiId: restApiId,\n            stageName: \"prod\"\n        }).promise();\n        rwsLog(`API Gateway \"${color().yellowBright(lambdaFunctionName + '-API')}\" deployed.`);\n    }\n}\nexports[\"default\"] = LambdaService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/MD5Service.ts\":\n/*!*************************************!*\\\n  !*** ../src/services/MD5Service.ts ***!\n  \\*************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst TraversalService_1 = __importDefault(__webpack_require__(/*! ./TraversalService */ \"../src/services/TraversalService.ts\"));\nconst UtilsService_1 = __importDefault(__webpack_require__(/*! ./UtilsService */ \"../src/services/UtilsService.ts\"));\nclass MD5Service extends _service_1.default {\n    async calculateFileMD5(filePath) {\n        return new Promise((resolve, reject) => {\n            const hash = crypto_1.default.createHash('md5');\n            const input = fs_1.default.createReadStream(filePath);\n            input.on('readable', () => {\n                const data = input.read();\n                if (data) {\n                    hash.update(data);\n                }\n                else {\n                    resolve(hash.digest('hex'));\n                }\n            });\n            input.on('error', reject);\n        });\n    }\n    async generateCliHashes(fileNames) {\n        const md5Pack = [];\n        for (const key in fileNames) {\n            const fileName = fileNames[key];\n            const md5 = await this.calculateFileMD5(fileName);\n            md5Pack.push(md5);\n        }\n        return md5Pack;\n    }\n    async cliClientHasChanged(consoleClientHashFile, tsFilename) {\n        const generatedHash = fs_1.default.readFileSync(consoleClientHashFile, 'utf-8');\n        const cmdFiles = this.batchGenerateCommandFileMD5(path_1.default.resolve(UtilsService_1.default.findRootWorkspacePath(process.cwd()), 'node_modules', '.rws'));\n        const currentSumHashes = (await this.generateCliHashes([tsFilename, ...cmdFiles])).join('/');\n        if (generatedHash !== currentSumHashes) {\n            return true;\n        }\n        return false;\n    }\n    batchGenerateCommandFileMD5(moduleCfgDir) {\n        if (!fs_1.default.existsSync(moduleCfgDir)) {\n            fs_1.default.mkdirSync(moduleCfgDir);\n        }\n        if (!fs_1.default.existsSync(`${moduleCfgDir}/__rws_installed`) || !fs_1.default.existsSync(`${moduleCfgDir}/_cli_cmd_dir`)) {\n            return [];\n        }\n        const cmdDirPath = fs_1.default.readFileSync(`${moduleCfgDir}/_cli_cmd_dir`, 'utf-8');\n        //path.resolve(process.cwd()) + '/' + \n        return TraversalService_1.default.getAllFilesInFolder(cmdDirPath, [\n            process.cwd() + '/' + cmdDirPath + '/index.ts'\n        ]);\n        ;\n    }\n}\nexports[\"default\"] = MD5Service.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/ProcessService.ts\":\n/*!*****************************************!*\\\n  !*** ../src/services/ProcessService.ts ***!\n  \\*****************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst child_process_2 = __webpack_require__(/*! child_process */ \"child_process\");\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst readline_1 = __importDefault(__webpack_require__(/*! readline */ \"readline\"));\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\nconst { log, warn, error, color } = ConsoleService_1.default;\nconst totalMemoryBytes = os_1.default.totalmem();\nconst totalMemoryKB = totalMemoryBytes / 1024;\nconst totalMemoryMB = totalMemoryKB / 1024;\nconst totalMemoryGB = totalMemoryMB / 1024;\nclass ProcessService extends _service_1.default {\n    getParentPID(pid) {\n        const command = `ps -o ppid= -p ${pid} | awk '{print $1}'`;\n        return parseInt((0, child_process_1.execSync)(command).toString().trim(), 10);\n    }\n    getAllProcessesIds() {\n        const startingPID = process.pid;\n        return [startingPID, this.getParentPID(startingPID)];\n    }\n    async runShellCommand(command, cwd = null, silent = false) {\n        return new Promise((resolve, reject) => {\n            const [cmd, ...args] = command.split(' ');\n            if (!cwd) {\n                cwd = process.cwd();\n            }\n            const spawned = (0, child_process_2.spawn)(cmd, args, { stdio: silent ? 'ignore' : 'inherit', cwd });\n            spawned.on('exit', (code) => {\n                if (code !== 0) {\n                    return reject(new Error(`Command failed with exit code ${code}`));\n                }\n                resolve();\n            });\n            spawned.on('error', (error) => {\n                reject(error);\n            });\n        });\n    }\n    sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    async getInput(prompt) {\n        const rl = readline_1.default.createInterface({\n            input: process.stdin,\n            output: process.stdout\n        });\n        return new Promise((resolve) => {\n            rl.question(color().red('[RWS CLI Input Prompt] ' + prompt), (answer) => {\n                resolve(answer);\n                rl.close();\n            });\n        });\n    }\n}\nexports[\"default\"] = ProcessService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/RouterService.ts\":\n/*!****************************************!*\\\n  !*** ../src/services/RouterService.ts ***!\n  \\****************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! reflect-metadata */ \"reflect-metadata\");\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ./AppConfigService */ \"../src/services/AppConfigService.ts\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst index_1 = __webpack_require__(/*! ../errors/index */ \"../src/errors/index.ts\");\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\n/**\n *\n */\nclass RouterService extends _service_1.default {\n    constructor() {\n        super();\n    }\n    static responseTypeToMIME(responseType) {\n        switch (responseType) {\n            case 'html': return 'text/html';\n            default: return 'application/json';\n        }\n    }\n    getRouterAnnotations(constructor) {\n        const annotationsData = {};\n        const propertyKeys = Reflect.getMetadataKeys(constructor.prototype).map((item) => {\n            return item.split(':')[1];\n        });\n        propertyKeys.forEach(key => {\n            const annotations = ['Route'];\n            annotations.forEach(annotation => {\n                const metadataKey = `${annotation}:${String(key)}`;\n                const meta = Reflect.getMetadata(metadataKey, constructor.prototype);\n                if (meta) {\n                    annotationsData[String(key)] = { annotationType: annotation, metadata: meta };\n                }\n            });\n        });\n        return annotationsData;\n    }\n    async assignRoutes(app, routesPackage, controllerList) {\n        const controllerRoutes = {\n            get: {}, post: {}, put: {}, delete: {}\n        };\n        controllerList.forEach((controllerInstance) => {\n            const controllerMetadata = this.getRouterAnnotations(controllerInstance.constructor);\n            if (controllerMetadata) {\n                Object.keys(controllerMetadata).forEach((key) => {\n                    if (controllerMetadata[key].annotationType !== 'Route') {\n                        return;\n                    }\n                    this.setControllerRoutes(controllerInstance, controllerMetadata, controllerRoutes, key, app);\n                });\n            }\n        });\n        let routes = [];\n        routesPackage.forEach((item) => {\n            if ('prefix' in item && 'routes' in item && Array.isArray(item.routes)) {\n                // Handle the case where item is of type IPrefixedHTTProutes\n                routes = [...routes, ...item.routes.map((subRouteItem) => {\n                        const subRoute = {\n                            path: item.prefix + subRouteItem.path,\n                            name: subRouteItem.name\n                        };\n                        return subRoute;\n                    })];\n            }\n            else {\n                // Handle the case where item is of type IHTTProute\n                routes.push(item);\n            }\n        });\n        console.log('ROUTES IN ASSIGNMENT', routes);\n        routes.forEach((route) => {\n            Object.keys(controllerRoutes).forEach((_method) => {\n                const actions = controllerRoutes[_method];\n                if (!actions[route.name]) {\n                    return;\n                }\n                this.addRouteToServer(actions, route);\n            });\n        });\n        return routes;\n    }\n    addRouteToServer(actions, route) {\n        const [routeMethod, appMethod, routeParams, methodName] = actions[route.name];\n        if (!appMethod) {\n            return;\n        }\n        appMethod(route.path, async (req, res) => {\n            try {\n                const controllerMethodReturn = await routeMethod({\n                    req: req,\n                    query: req.query,\n                    params: route.noParams ? [] : req.params,\n                    data: req.body,\n                    res: res\n                });\n                res.setHeader('Content-Type', RouterService.responseTypeToMIME(routeParams.responseType));\n                let status = 200;\n                if (controllerMethodReturn instanceof index_1.RWSError) {\n                    status = controllerMethodReturn.getCode();\n                }\n                this.sendResponseWithStatus(res, status, routeParams, controllerMethodReturn);\n                return;\n            }\n            catch (err) {\n                let errMsg;\n                let stack;\n                if (!!err.printFullError) {\n                    err.printFullError();\n                    errMsg = err.getMessage();\n                    stack = err.getStack();\n                }\n                else {\n                    errMsg = err.message;\n                    ConsoleService_1.default.error(errMsg);\n                    console.log(err.stack);\n                    stack = err.stack;\n                    err.message = errMsg;\n                }\n                const code = err.getCode ? err.getCode() : 500;\n                this.sendResponseWithStatus(res, code, routeParams, {\n                    success: false,\n                    data: {\n                        error: {\n                            code: code,\n                            message: errMsg,\n                            stack\n                        }\n                    }\n                });\n            }\n        });\n    }\n    sendResponseWithStatus(res, status, routeParams, output) {\n        if (routeParams.responseType === 'json' || !routeParams.responseType) {\n            res.status(status).send(output);\n            return;\n        }\n        if (routeParams.responseType === 'html' && (0, AppConfigService_1.default)().get('pub_dir')) {\n            res.status(status).sendFile(path_1.default.join((0, AppConfigService_1.default)().get('pub_dir'), output.template_name + '.html'));\n            return;\n        }\n        res.status(status).send();\n    }\n    setControllerRoutes(controllerInstance, controllerMetadata, controllerRoutes, key, app) {\n        const action = controllerInstance.callMethod(key);\n        const meta = controllerMetadata[key].metadata;\n        switch (meta.method) {\n            case 'GET':\n                controllerRoutes.get[meta.name] = [action.bind(controllerInstance), app.get.bind(app), meta.params, key];\n                break;\n            case 'POST':\n                controllerRoutes.post[meta.name] = [action.bind(controllerInstance), app.post.bind(app), meta.params, key];\n                break;\n            case 'PUT':\n                controllerRoutes.put[meta.name] = [action.bind(controllerInstance), app.put.bind(app), meta.params, key];\n                break;\n            case 'DELETE':\n                controllerRoutes.delete[meta.name] = [action.bind(controllerInstance), app.delete.bind(app), meta.params, key];\n                break;\n        }\n    }\n    hasRoute(routePath, routes) {\n        return this.getRoute(routePath, routes) !== null;\n    }\n    getRoute(routePath, routes) {\n        const front_routes = (0, AppConfigService_1.default)().get('front_routes');\n        const foundRoute = routes.find((item) => {\n            return item.path.indexOf(routePath) > -1 && !item.noParams;\n        });\n        return !!foundRoute ? foundRoute : null;\n    }\n}\nexports[\"default\"] = RouterService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/S3Service.ts\":\n/*!************************************!*\\\n  !*** ../src/services/S3Service.ts ***!\n  \\************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst AWSService_1 = __importDefault(__webpack_require__(/*! ./AWSService */ \"../src/services/AWSService.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst { log, warn, error, color } = ConsoleService_1.default;\nclass S3Service extends _service_1.default {\n    constructor() {\n        super();\n    }\n    async upload(params, override = true, region = null) {\n        if (override) {\n            const exists = await this.objectExists({ Bucket: params.Bucket, Key: params.Key }, region);\n            if (exists) {\n                log(`${color().green('[RWS Lambda Service]')} ${color().red('Deleting existing S3 object:')} ${params.Key}`);\n                await this.deleteObject({ Bucket: params.Bucket, Key: params.Key });\n            }\n        }\n        else {\n            const exists = await this.objectExists({ Bucket: params.Bucket, Key: params.Key }, region);\n            if (exists) {\n                return null;\n            }\n        }\n        return AWSService_1.default.getS3(region).upload(params).promise();\n    }\n    async downloadObject(params, region = null) {\n        return AWSService_1.default.getS3(region).getObject(params).promise();\n    }\n    async downloadToString(s3key, bucket, region) {\n        return new Promise(async (resolve, reject) => {\n            let s3pageResponse = await this.downloadObject({\n                Key: s3key,\n                Bucket: bucket\n            }, region);\n            if (s3pageResponse.Body instanceof Buffer || s3pageResponse.Body instanceof Uint8Array) {\n                resolve(s3pageResponse.Body.toString());\n            }\n            else if (typeof s3pageResponse.Body === 'string') {\n                resolve(s3pageResponse.Body);\n            }\n            else {\n                // Handle other types or throw an error\n                console.error('Unsupported data type');\n                reject('Unsupported data type');\n            }\n        });\n    }\n    async delete(params, region = null) {\n        await this.deleteObject({ Bucket: params.Bucket, Key: params.Key }, region);\n        return;\n    }\n    async objectExists(params, region = null) {\n        try {\n            await AWSService_1.default.getS3(region).headObject(params).promise();\n            return true;\n        }\n        catch (error) {\n            if (error.code === 'NotFound') {\n                return false;\n            }\n            throw error;\n        }\n    }\n    async deleteObject(params, region = null) {\n        await AWSService_1.default.getS3(region).deleteObject(params).promise();\n    }\n    async bucketExists(bucketName, region = null) {\n        try {\n            await AWSService_1.default.getS3(region).headBucket({ Bucket: bucketName }).promise();\n            return bucketName;\n        }\n        catch (err) {\n            if (err.code === 'NotFound') {\n                // Create bucket if it doesn't exist\n                const params = {\n                    Bucket: bucketName,\n                };\n                await AWSService_1.default.getS3(region).createBucket(params).promise();\n                log(`${color().green(`[RWS Lambda Service]`)} s3 bucket ${bucketName} created.`);\n                return bucketName;\n            }\n            else {\n                // Handle other errors\n                error(`Error checking bucket ${bucketName}:`, err);\n            }\n        }\n    }\n}\nexports[\"default\"] = S3Service.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/ServerService.ts\":\n/*!****************************************!*\\\n  !*** ../src/services/ServerService.ts ***!\n  \\****************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst socket_io_1 = __webpack_require__(/*! socket.io */ \"socket.io\");\nconst https_1 = __importDefault(__webpack_require__(/*! https */ \"https\"));\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ./AppConfigService */ \"../src/services/AppConfigService.ts\"));\nconst cors_1 = __importDefault(__webpack_require__(/*! cors */ \"cors\"));\nconst http_1 = __importStar(__webpack_require__(/*! http */ \"http\"));\nconst AuthService_1 = __importDefault(__webpack_require__(/*! ./AuthService */ \"../src/services/AuthService.ts\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\nconst RouterService_1 = __importDefault(__webpack_require__(/*! ./RouterService */ \"../src/services/RouterService.ts\"));\nconst ProcessService_1 = __importDefault(__webpack_require__(/*! ./ProcessService */ \"../src/services/ProcessService.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst UtilsService_1 = __importDefault(__webpack_require__(/*! ./UtilsService */ \"../src/services/UtilsService.ts\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst body_parser_1 = __importDefault(__webpack_require__(/*! body-parser */ \"body-parser\"));\nconst Error404_1 = __importDefault(__webpack_require__(/*! ../errors/Error404 */ \"../src/errors/Error404.ts\"));\nconst compression_1 = __importDefault(__webpack_require__(/*! compression */ \"compression\"));\nconst fileUpload = __webpack_require__(/*! express-fileupload */ \"express-fileupload\");\nconst getCurrentLineNumber = UtilsService_1.default.getCurrentLineNumber;\nconst wsLog = async (fakeError, text, socketId = null, isError = false) => {\n    const logit = isError ? console.error : console.log;\n    const filePath = module.id;\n    const fileName = filePath.split('/').pop();\n    const marker = '[RWS Websocket]';\n    logit(isError ? ConsoleService_1.default.color().red(marker) : ConsoleService_1.default.color().green(marker), `|`, `${filePath}:${await getCurrentLineNumber(fakeError)}`, `|${socketId ? ConsoleService_1.default.color().blueBright(` (${socketId})`) : ''}:`, `${text}`);\n};\nconst MINUTE = 1000 * 60;\nclass ServerService extends socket_io_1.Server {\n    constructor(webServer, expressApp, opts) {\n        const _DOMAIN = opts.cors_domain || opts.domain;\n        const WEBSOCKET_CORS = {\n            origin: _DOMAIN,\n            methods: [\"GET\", \"POST\"]\n        };\n        const cors_headers = ['Content-Type', 'x-csrf-token', 'Accept', 'Authorization', 'x-junctionapi-version'];\n        super(webServer, {\n            cors: WEBSOCKET_CORS,\n            transports: [opts.transport || 'websocket'],\n            pingTimeout: 5 * MINUTE\n        });\n        this.tokens = {};\n        this.users = {};\n        this.disconnectClient = (clientSocket) => {\n            clientSocket.disconnect(true);\n        };\n        const _self = this;\n        this.server_app = expressApp;\n        this.srv = webServer;\n        this.options = opts;\n        const corsHeadersSettings = {\n            \"Access-Control-Allow-Origin\": _DOMAIN, // Replace with your frontend domain\n            \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n            \"Access-Control-Allow-Headers\": cors_headers.join(', '),\n            \"Access-Control-Allow-Credentials\": 'true'\n        };\n        this.srv.on(\"options\", (req, res) => {\n            res.writeHead(200, corsHeadersSettings);\n            res.end();\n        });\n        this.server_app.use((req, res, next) => {\n            Object.keys(corsHeadersSettings).forEach((key) => {\n                res.setHeader(key, corsHeadersSettings[key]);\n            });\n            next();\n        });\n        const corsOptions = {\n            origin: _DOMAIN, // Replace with the appropriate origins or set it to '*'\n            methods: ['GET', 'POST', 'OPTIONS'],\n            allowedHeaders: cors_headers\n        };\n        console.log('cors-options', corsOptions);\n        const corsMiddleware = (0, cors_1.default)(corsOptions);\n        this.use(async (socket, next) => {\n            const request = socket.request;\n            const response = new http_1.ServerResponse(request);\n            corsMiddleware(request, response, next);\n        });\n        this.server_app.options('*', (0, cors_1.default)(corsOptions)); // Enable pre-flight for all routes\n        if (opts.authorization) {\n            this.setupAuth();\n        }\n    }\n    static async initializeApp(opts) {\n        var _b, _c;\n        if (!_a.http_server) {\n            const [baseHttpServer, expressHttpServer] = await _a.createServerInstance(opts);\n            const http_instance = new _a(baseHttpServer, expressHttpServer, opts);\n            const isSSL = (_b = (0, AppConfigService_1.default)().get('features')) === null || _b === void 0 ? void 0 : _b.ssl;\n            const httpPort = (0, AppConfigService_1.default)().get('port');\n            _a.http_server = { instance: await http_instance.configureHTTPServer(), starter: http_instance.createServerStarter(httpPort, () => {\n                    ConsoleService_1.default.log(ConsoleService_1.default.color().green('Request/response server' + ` is working on port ${httpPort} using HTTP${isSSL ? 'S' : ''} protocol`));\n                }) };\n        }\n        if (!_a.ws_server) {\n            const [baseWsServer, expressWsServer] = await _a.createServerInstance(opts);\n            const ws_instance = new _a(baseWsServer, expressWsServer, opts);\n            const isSSL = (_c = (0, AppConfigService_1.default)().get('features')) === null || _c === void 0 ? void 0 : _c.ssl;\n            const wsPort = (0, AppConfigService_1.default)().get('ws_port');\n            _a.ws_server = { instance: await ws_instance.configureWSServer(), starter: ws_instance.createServerStarter(wsPort, () => {\n                    ConsoleService_1.default.log(ConsoleService_1.default.color().green('Websocket server' + ` is working on port ${wsPort}. SSL is ${isSSL ? 'enabled' : 'disabled'}.`));\n                }) };\n        }\n        const allProcessesIds = ProcessService_1.default.getAllProcessesIds();\n        const executeDir = process.cwd();\n        const pacakgeDir = UtilsService_1.default.findRootWorkspacePath(process.cwd());\n        const rwsDir = `${pacakgeDir}/node_modules/.rws`;\n        if (!fs_1.default.existsSync(rwsDir)) {\n            fs_1.default.mkdirSync(rwsDir);\n        }\n        return {\n            websocket: this.ws_server,\n            http: this.http_server,\n        };\n    }\n    setJWTToken(socketId, token) {\n        if (token.indexOf('Bearer') > -1) {\n            this.tokens[socketId] = token.split(' ')[1];\n        }\n        else {\n            this.tokens[socketId] = token;\n        }\n    }\n    webServer() {\n        return this.srv;\n    }\n    static async createServerInstance(opts) {\n        var _b;\n        const app = (0, express_1.default)();\n        const isSSL = (_b = (0, AppConfigService_1.default)().get('features')) === null || _b === void 0 ? void 0 : _b.ssl;\n        const options = {};\n        if (isSSL) {\n            const sslCert = (0, AppConfigService_1.default)().get('ssl_cert');\n            const sslKey = (0, AppConfigService_1.default)().get('ssl_key');\n            if (!sslKey || !sslCert || !fs_1.default.existsSync(sslCert) || !fs_1.default.existsSync(sslKey)) {\n                throw new Error('SSL keys set in config do not exist.');\n            }\n            options.key = fs_1.default.readFileSync(sslKey);\n            options.cert = fs_1.default.readFileSync(sslCert);\n        }\n        const webServer = isSSL ? https_1.default.createServer(options, app) : http_1.default.createServer(app);\n        return [webServer, app];\n    }\n    createServerStarter(port, injected = () => { }) {\n        return (async (callback = () => { }) => {\n            this.webServer().listen(port, () => {\n                injected();\n                callback();\n            });\n        }).bind(this);\n    }\n    async configureHTTPServer() {\n        var _b;\n        this.server_app.use(fileUpload());\n        // app.use(express.json({ limit: '200mb' }));\n        this.server_app.use(body_parser_1.default.json({ limit: '200mb' }));\n        if ((_b = (0, AppConfigService_1.default)().get('features')) === null || _b === void 0 ? void 0 : _b.routing_enabled) {\n            if (this.options.pub_dir) {\n                this.server_app.use(express_1.default.static(this.options.pub_dir));\n            }\n            this.server_app.set('view engine', 'ejs');\n            const processed_routes = await RouterService_1.default.assignRoutes(this.server_app, this.options.httpRoutes, this.options.controllerList);\n            this.server_app.use((req, res, next) => {\n                if (!RouterService_1.default.hasRoute(req.originalUrl, processed_routes)) {\n                    _a.on404(req, res);\n                }\n                else {\n                    next();\n                }\n            });\n        }\n        this.use(compression_1.default);\n        return this;\n    }\n    async configureWSServer() {\n        var _b;\n        if ((_b = (0, AppConfigService_1.default)().get('features')) === null || _b === void 0 ? void 0 : _b.ws_enabled) {\n            this.sockets.on('connection', async (socket) => {\n                const socketId = socket.id;\n                wsLog(new Error(), `Client connection recieved`, socketId);\n                socket.on(\"disconnect\", async (reason) => {\n                    wsLog(new Error(), `Client disconnected due to ${reason}`, socketId);\n                    if (reason === 'transport error') {\n                        wsLog(new Error(), `Transport error`, socketId, true);\n                    }\n                });\n                socket.on('error', async (error) => {\n                    wsLog(new Error(), error, socketId, true);\n                });\n                socket.on('__PING__', async () => {\n                    wsLog(new Error(), `Recieved ping... Emmiting response callback.`, socketId);\n                    socket.emit('__PONG__', '__PONG__');\n                });\n                Object.keys(this.options.wsRoutes).forEach((eventName) => {\n                    const SocketClass = this.options.wsRoutes[eventName];\n                    new SocketClass(_a.ws_server).handleConnection(socket, eventName);\n                });\n            });\n        }\n        return this;\n    }\n    setupAuth() {\n        const _self = this;\n        this.use(async (socket, next) => {\n            const AppConfigService = (0, AppConfigService_1.default)();\n            const request = socket.request;\n            const response = new http_1.ServerResponse(request);\n            const authHeader = request.headers.authorization;\n            const UserClass = await AppConfigService.get('user_class');\n            if (!authHeader) {\n                response.writeHead(400, 'No token provided');\n                response.end();\n                return;\n            }\n            if (!_self.tokens[socket.id]) {\n                _self.setJWTToken(socket.id, authHeader);\n            }\n            if (!_self.users[socket.id]) {\n                try {\n                    _self.users[socket.id] = await AuthService_1.default.authorize(_self.tokens[socket.id], UserClass);\n                }\n                catch (e) {\n                    ConsoleService_1.default.error('Token authorization error: ', e.message);\n                }\n            }\n            if (!_self.users[socket.id]) {\n                _self.disconnectClient(socket);\n                ConsoleService_1.default.error('Token unauthorized');\n                response.writeHead(403, 'Token unauthorized');\n                response.end();\n                return;\n            }\n        });\n    }\n    static on404(req, res) {\n        const error = new Error404_1.default(new Error('Sorry, the page you\\'re looking for doesn\\'t exist.'), req.url);\n        error.printFullError();\n        let response = error.getMessage();\n        if (req.headers.accept.indexOf('text/html') > -1) {\n            const htmlTemplate = this.processErrorTemplate(error);\n            response = htmlTemplate;\n        }\n        res.status(404).send(response);\n    }\n    static processErrorTemplate(error) {\n        return fs_1.default.readFileSync(path_1.default.resolve(__dirname, '..', '..', '..', 'html') + '/error.html', 'utf-8')\n            .replace('{{error_number}}', error.getCode().toString())\n            .replace('{{error_message}}', error.getMessage())\n            .replace('{{error_stack_trace}}', error.getStackTraceString() !== '' ? `<h4>Stack trace:</h4><pre>${error.getStackTraceString()}</pre>` : '');\n    }\n    getOptions() {\n        return this.options;\n    }\n}\n_a = ServerService;\nServerService.cookies = {\n    getCookies: async (headers) => {\n        return new Promise((resolve) => {\n            resolve(headers.cookie.split(';').map((cookieEntry) => {\n                const [key, value] = cookieEntry.split('=');\n                return {\n                    [key]: value\n                };\n            }));\n        });\n    },\n    getCookie: async (headers, key) => {\n        const cookiesBin = await _a.cookies.getCookies(headers);\n        if (!cookiesBin[key]) {\n            return null;\n        }\n        return cookiesBin[key];\n    }\n};\nexports[\"default\"] = ServerService;\n\n\n/***/ }),\n\n/***/ \"../src/services/TraversalService.ts\":\n/*!*******************************************!*\\\n  !*** ../src/services/TraversalService.ts ***!\n  \\*******************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nclass TraversalService extends _service_1.default {\n    getAllFilesInFolder(folderPath, ignoreFilenames = [], recursive = false) {\n        const files = [];\n        function traverseDirectory(currentPath) {\n            const entries = fs_1.default.readdirSync(currentPath, { withFileTypes: true });\n            entries.forEach(entry => {\n                const entryPath = path_1.default.join(currentPath, entry.name);\n                if (entry.isFile()) {\n                    if (!ignoreFilenames.includes(entryPath)) {\n                        files.push(entryPath);\n                    }\n                }\n                else if (entry.isDirectory() && recursive) {\n                    traverseDirectory(entryPath);\n                }\n            });\n        }\n        traverseDirectory(folderPath);\n        return files;\n    }\n}\nexports[\"default\"] = TraversalService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/UtilsService.ts\":\n/*!***************************************!*\\\n  !*** ../src/services/UtilsService.ts ***!\n  \\***************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst source_map_1 = __webpack_require__(/*! source-map */ \"source-map\");\nclass UtilsService extends _service_1.default {\n    startExecTimeRecord() {\n        this._startTime = process.hrtime();\n    }\n    endExecTimeRecord() {\n        if (this._startTime === null) {\n            return 0;\n        }\n        const elapsed = process.hrtime(this._startTime);\n        this._startTime = null;\n        return Math.round(elapsed[0] * 1000 + elapsed[1] / 1e6);\n    }\n    filterNonEmpty(arr) {\n        return arr.filter((argElement) => argElement !== '' && typeof argElement !== 'undefined' && argElement !== null);\n    }\n    isInterface(func) {\n        return typeof func === 'function';\n    }\n    getRWSVar(fileName) {\n        const packageDir = this.findRootWorkspacePath(process.cwd());\n        const moduleCfgDir = `${packageDir}/node_modules/.rws`;\n        if (!fs_1.default.existsSync(`${moduleCfgDir}/${fileName}`)) {\n            return;\n        }\n        try {\n            return fs_1.default.readFileSync(`${moduleCfgDir}/${fileName}`, 'utf-8');\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    setRWSVar(fileName, value) {\n        const packageDir = this.findRootWorkspacePath(process.cwd());\n        const moduleCfgDir = `${packageDir}/node_modules/.rws`;\n        if (!fs_1.default.existsSync(moduleCfgDir)) {\n            fs_1.default.mkdirSync(moduleCfgDir);\n        }\n        fs_1.default.writeFileSync(`${moduleCfgDir}/${fileName}`, value);\n    }\n    findRootWorkspacePath(currentPath) {\n        const parentPackageJsonPath = path_1.default.join(currentPath + '/..', 'package.json');\n        const parentPackageDir = path_1.default.dirname(parentPackageJsonPath);\n        if (fs_1.default.existsSync(parentPackageJsonPath)) {\n            const packageJson = JSON.parse(fs_1.default.readFileSync(parentPackageJsonPath, 'utf-8'));\n            if (packageJson.workspaces) {\n                return this.findRootWorkspacePath(parentPackageDir);\n            }\n        }\n        return currentPath;\n    }\n    async getCurrentLineNumber(error = null) {\n        if (!error) {\n            error = new Error();\n        }\n        const stack = error.stack || '';\n        const stackLines = stack.split('\\n');\n        const relevantLine = stackLines[1];\n        // Extract file path from the stack line\n        const match = relevantLine.match(/\\((.*?):\\d+:\\d+\\)/);\n        if (!match)\n            return -1;\n        const filePath = match[1];\n        // Assuming the source map is in the same directory with '.map' extension\n        const sourceMapPath = `${filePath}.map`;\n        // Read the source map\n        const sourceMapContent = fs_1.default.readFileSync(sourceMapPath, 'utf-8');\n        const sourceMap = JSON.parse(sourceMapContent);\n        const consumer = await new source_map_1.SourceMapConsumer(sourceMap);\n        // Extract line and column number\n        const lineMatch = relevantLine.match(/:(\\d+):(\\d+)/);\n        if (!lineMatch)\n            return -1;\n        const originalPosition = consumer.originalPositionFor({\n            line: parseInt(lineMatch[1]),\n            column: parseInt(lineMatch[2]),\n        });\n        return originalPosition.line;\n    }\n}\nexports[\"default\"] = UtilsService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/VPCService.ts\":\n/*!*************************************!*\\\n  !*** ../src/services/VPCService.ts ***!\n  \\*************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst AWSService_1 = __importDefault(__webpack_require__(/*! ./AWSService */ \"../src/services/AWSService.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst { log, warn, error, color, rwsLog } = ConsoleService_1.default;\nclass VPCService extends _service_1.default {\n    async findDefaultSubnetForVPC() {\n        try {\n            const response = await AWSService_1.default.getEC2().describeVpcs({ Filters: [{ Name: 'isDefault', Values: ['true'] }] }).promise();\n            if (response.Vpcs && response.Vpcs.length > 0) {\n                return [await this.getSubnetIdForVpc(response.Vpcs[0].VpcId), response.Vpcs[0].VpcId];\n            }\n            else {\n                console.log('No default VPC found.');\n            }\n        }\n        catch (error) {\n            console.error('Error fetching default VPC:', error);\n        }\n    }\n    async getSubnetIdForVpc(vpcId) {\n        const params = {\n            Filters: [{\n                    Name: 'vpc-id',\n                    Values: [vpcId]\n                }]\n        };\n        const result = await AWSService_1.default.getEC2().describeSubnets(params).promise();\n        if (result.Subnets && result.Subnets.length > 0) {\n            return result.Subnets.map(subnet => subnet.SubnetId)[0];\n        }\n        else {\n            return null;\n        }\n    }\n    async listSecurityGroups() {\n        try {\n            const result = await AWSService_1.default.getEC2().describeSecurityGroups().promise();\n            const securityGroups = result.SecurityGroups || [];\n            const securityGroupIds = securityGroups.map(sg => sg.GroupId);\n            return securityGroupIds;\n        }\n        catch (error) {\n            console.error('Error fetching security groups:', error);\n            return [];\n        }\n    }\n    async getDefaultRouteTable(vpcId, subnetId = null) {\n        var _a;\n        const filters = [{\n                Name: \"vpc-id\",\n                Values: [vpcId]\n            }];\n        if (subnetId) {\n            filters.push({\n                Name: \"association.subnet-id\",\n                Values: [subnetId]\n            });\n        }\n        const routeTablesResponse = await AWSService_1.default.getEC2().describeRouteTables({\n            Filters: filters\n        }).promise();\n        return (_a = routeTablesResponse.RouteTables) === null || _a === void 0 ? void 0 : _a.find(rt => {\n            // A default route table won't have explicit subnet associations\n            return !rt.Associations || rt.Associations.every(assoc => !assoc.SubnetId);\n        });\n    }\n    async createVPCEndpointIfNotExist(vpcId) {\n        const endpointName = \"RWS-S3-GATE\";\n        const serviceName = `com.amazonaws.${AWSService_1.default.getRegion()}.s3`;\n        // Describe VPC Endpoints\n        const existingEndpoints = await AWSService_1.default.getEC2().describeVpcEndpoints({\n            Filters: [\n                {\n                    Name: \"tag:Name\",\n                    Values: [endpointName]\n                }\n            ]\n        }).promise();\n        const defaultRouteTable = await this.getDefaultRouteTable(vpcId);\n        // Check if the endpoint already exists\n        const endpointExists = existingEndpoints.VpcEndpoints && existingEndpoints.VpcEndpoints.length > 0;\n        if (!endpointExists) {\n            // Create VPC Endpoint for S3\n            const endpointResponse = await AWSService_1.default.getEC2().createVpcEndpoint({\n                VpcId: vpcId,\n                ServiceName: serviceName,\n                VpcEndpointType: \"Gateway\",\n                RouteTableIds: [defaultRouteTable.RouteTableId], // Add your route table IDs here\n                TagSpecifications: [\n                    {\n                        ResourceType: \"vpc-endpoint\",\n                        Tags: [\n                            {\n                                Key: \"Name\",\n                                Value: endpointName\n                            }\n                        ]\n                    }\n                ]\n            }).promise();\n            if (endpointResponse.VpcEndpoint) {\n                log(`VPC Endpoint \"${endpointName}\" created with ID: ${endpointResponse.VpcEndpoint.VpcEndpointId}`);\n                return endpointResponse.VpcEndpoint.VpcEndpointId;\n            }\n            else {\n                error(\"Failed to create VPC Endpoint\");\n                throw new Error(\"Failed to create VPC Endpoint\");\n            }\n        }\n        else {\n            log(`VPC Endpoint \"${endpointName}\" already exists.`);\n            return existingEndpoints.VpcEndpoints[0].VpcEndpointId;\n        }\n    }\n    async ensureRouteToVPCEndpoint(vpcId, vpcEndpointId) {\n        try {\n            const routeTable = await this.getDefaultRouteTable(vpcId);\n            const routes = routeTable.Routes || [];\n            const hasS3EndpointRoute = routes.some((route) => route.GatewayId === vpcEndpointId);\n            if (!hasS3EndpointRoute) {\n                // Get the prefix list associated with the S3 VPC endpoint\n                const vpcEndpointDescription = (await AWSService_1.default.getEC2().describeVpcEndpoints({\n                    VpcEndpointIds: [vpcEndpointId]\n                }).promise()).VpcEndpoints;\n                rwsLog('Creating VPC Endpoint route');\n                // Add a route to the route table\n                await AWSService_1.default.getEC2().createRoute({\n                    RouteTableId: routeTable.RouteTableId,\n                    DestinationCidrBlock: '0.0.0.0/0',\n                    VpcEndpointId: vpcEndpointDescription[0].VpcEndpointId\n                }).promise();\n                log(`Added route to VPC Endpoint ${vpcEndpointId} in Route Table ${routeTable.RouteTableId}`);\n            }\n            else {\n                log(`Route to VPC Endpoint ${vpcEndpointId} already exists in Route Table ${routeTable.RouteTableId}`);\n            }\n        }\n        catch (error) {\n            console.error('Error ensuring route to VPC Endpoint:', error);\n        }\n    }\n    async findPublicSubnetInVPC(vpcId) {\n        const subnets = await AWSService_1.default.getEC2().describeSubnets({ Filters: [{ Name: 'vpc-id', Values: [vpcId] }] }).promise();\n        for (const subnet of subnets.Subnets || []) {\n            const routeTables = await AWSService_1.default.getEC2().describeRouteTables({\n                Filters: [{ Name: 'association.subnet-id', Values: [subnet.SubnetId] }]\n            }).promise();\n            for (const routeTable of routeTables.RouteTables || []) {\n                for (const route of routeTable.Routes || []) {\n                    if (route.DestinationCidrBlock === '0.0.0.0/0' && route.GatewayId && route.GatewayId.startsWith('igw-')) {\n                        return subnet;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    calculateNextThirdOctetIncrement(range) {\n        const thirdOctet = 0;\n        // Calculate the number of addresses represented by the CIDR range\n        const numAddresses = Math.pow(2, 32 - range);\n        // Calculate how many blocks in the third octet those addresses span\n        const increment = Math.ceil(numAddresses / 256);\n        const nextThirdOctet = increment;\n        return nextThirdOctet;\n    }\n    async createPublicSubnet(vpcId, range = 24, passedCIDRBlock = null) {\n        var _a;\n        const _SUBNET_PASS_VAL = this.calculateNextThirdOctetIncrement(range);\n        const vpcInfo = await AWSService_1.default.getEC2().describeVpcs({ VpcIds: [vpcId] }).promise();\n        if (!vpcInfo.Vpcs || vpcInfo.Vpcs.length === 0) {\n            throw new Error('VPC not found.');\n        }\n        const vpcCidrBlock = vpcInfo.Vpcs[0].CidrBlock;\n        // Retrieve existing subnets within the VPC\n        const subnets = await AWSService_1.default.getEC2().describeSubnets({ Filters: [{ Name: 'vpc-id', Values: [vpcId] }] }).promise();\n        const existingCidrs = ((_a = subnets.Subnets) === null || _a === void 0 ? void 0 : _a.map(subnet => subnet.CidrBlock).sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }))) || [];\n        // Propose a new CIDR block\n        let newCidrBlock;\n        const baseIp = (passedCIDRBlock ? passedCIDRBlock : vpcCidrBlock).split('/')[0];\n        const maxThirdOctet = Math.max(...existingCidrs.map(cidr => {\n            const octets = cidr.split('.');\n            return parseInt(octets[2]);\n        }));\n        const rerun = async (newOctet, newRange) => await this.createPublicSubnet(vpcId, range, `${baseIp.split('.').slice(0, 2).join('.')}.${newOctet}.0/${newRange}`);\n        const baseThirdOctet = existingCidrs.length ? maxThirdOctet : 0;\n        let nextThirdOctet = baseThirdOctet + _SUBNET_PASS_VAL;\n        newCidrBlock = `${baseIp.split('.').slice(0, 2).join('.')}.${nextThirdOctet}.0/${range.toString()}`;\n        rwsLog(`Trying to create public subnet for \"${vpcId}\" VPC with \"${newCidrBlock}\" address`);\n        if (!existingCidrs.includes(newCidrBlock)) {\n            try {\n                const subnet = await AWSService_1.default.getEC2().createSubnet({\n                    VpcId: vpcId,\n                    CidrBlock: newCidrBlock\n                }).promise();\n                rwsLog(`Created public subnet \"${subnet.Subnet.SubnetId}\" for \"${vpcId}\" VPC with \"${newCidrBlock}\" address`);\n                return subnet;\n            }\n            catch (err) {\n                // If there's an error due to the CIDR block, adjust and try again\n                warn(err.code);\n                if (['InvalidSubnet.Range', 'InvalidSubnet.Conflict'].includes(err.code)) {\n                    nextThirdOctet += _SUBNET_PASS_VAL;\n                    error(`CIDR Address taken. Retrying...`);\n                    return await rerun(nextThirdOctet, range);\n                }\n                else {\n                    throw err;\n                }\n            }\n        }\n        else {\n            nextThirdOctet += _SUBNET_PASS_VAL;\n            error(`CIDR Address already used. Retrying...`);\n            return await rerun(nextThirdOctet, range);\n        }\n    }\n    extractThirdOctet(ip) {\n        return parseInt(ip.split('.')[2]);\n    }\n    async waitForNatGatewayAvailable(natGatewayId) {\n        try {\n            rwsLog(`Waiting for NAT Gateway ${natGatewayId}...`);\n            await AWSService_1.default.getEC2().waitFor('natGatewayAvailable', {\n                NatGatewayIds: [natGatewayId]\n            }).promise();\n            rwsLog(`NAT Gateway ${natGatewayId} is now available.`);\n        }\n        catch (err) {\n            error(`Error waiting for NAT Gateway ${natGatewayId} to become available:`);\n            log(err);\n            throw err;\n        }\n    }\n}\nexports[\"default\"] = VPCService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/VectorStoreService.ts\":\n/*!*********************************************!*\\\n  !*** ../src/services/VectorStoreService.ts ***!\n  \\*********************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst VectorStore_1 = __importDefault(__webpack_require__(/*! ../models/convo/VectorStore */ \"../src/models/convo/VectorStore.ts\"));\nclass VectorStoreService extends _service_1.default {\n    async createStore(docs, embeddings) {\n        return await (new VectorStore_1.default(docs, embeddings)).init();\n    }\n}\nexports[\"default\"] = VectorStoreService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/ZipService.ts\":\n/*!*************************************!*\\\n  !*** ../src/services/ZipService.ts ***!\n  \\*************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst _service_1 = __importDefault(__webpack_require__(/*! ./_service */ \"../src/services/_service.ts\"));\nconst ConsoleService_1 = __importDefault(__webpack_require__(/*! ./ConsoleService */ \"../src/services/ConsoleService.ts\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst archiver_1 = __importDefault(__webpack_require__(/*! archiver */ \"archiver\"));\nconst { log, warn, error, color } = ConsoleService_1.default;\nconst defaultZipParams = {\n    recursive: true,\n    format: 'zip',\n    ignore: []\n};\nclass ZipService extends _service_1.default {\n    constructor() {\n        super();\n    }\n    async createArchive(outputPath, sourcePath, params = null) {\n        if (params) {\n            params = Object.assign(defaultZipParams, params);\n        }\n        else {\n            params = defaultZipParams;\n        }\n        const archive = (0, archiver_1.default)(params.format);\n        const output = fs_1.default.createWriteStream(outputPath);\n        archive.pipe(output);\n        // archive.directory(sourcePath, params.recursive ? false : params.destpath);\n        archive.glob('**/*', {\n            cwd: sourcePath,\n            dot: true, //include .dotpaths\n            ignore: params.ignore\n        });\n        log(`${color().green('[RWS Lambda Service]')} ZIP params:`);\n        log(params);\n        return new Promise((resolve, reject) => {\n            archive.on('error', reject);\n            output.on('close', () => {\n                log(`Files in archive: ${archive.pointer()} bytes`);\n                resolve(outputPath);\n            });\n            output.on('error', reject);\n            archive.finalize();\n        });\n    }\n    listFilesInDirectory(directoryPath) {\n        const files = fs_1.default.readdirSync(directoryPath);\n        const filePaths = [];\n        files.forEach(file => {\n            const fullPath = path_1.default.join(directoryPath, file);\n            const stats = fs_1.default.statSync(fullPath);\n            if (stats.isFile()) {\n                filePaths.push(fullPath);\n            }\n        });\n        return filePaths;\n    }\n}\nexports[\"default\"] = ZipService.getSingleton();\n\n\n/***/ }),\n\n/***/ \"../src/services/_service.ts\":\n/*!***********************************!*\\\n  !*** ../src/services/_service.ts ***!\n  \\***********************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass TheService {\n    constructor() {\n        this._RELOADABLE = false;\n    }\n    static getSingleton() {\n        const className = this.name;\n        if (!TheService._instances[className]) {\n            TheService._instances[className] = new this();\n        }\n        return TheService._instances[className];\n    }\n    getReloadable() {\n        return this.constructor._RELOADABLE || this._RELOADABLE;\n    }\n    reloadService(...params) {\n        const className = this.name;\n        TheService._instances[className] = new this(...params);\n        return TheService._instances[className];\n    }\n}\nTheService._instances = {};\nexports[\"default\"] = TheService;\n\n\n/***/ }),\n\n/***/ \"../src/sockets/_socket.ts\":\n/*!*********************************!*\\\n  !*** ../src/sockets/_socket.ts ***!\n  \\*********************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass TheSocket {\n    constructor(server) {\n        this.server = server;\n    }\n    handleConnection(socket, routeName) {\n        throw new Error(\"Method not implemented.\");\n    }\n    middlewareImplementation(next) {\n        throw new Error(\"Method not implemented.\");\n    }\n    getJson(input) {\n        return JSON.parse(input);\n    }\n    sendJson(input) {\n        return JSON.stringify(input);\n    }\n    emitMessage(method, socket, data = null) {\n        socket.emit(method, this.sendJson({ success: true, data, method }));\n    }\n}\nexports[\"default\"] = TheSocket;\n\n\n/***/ }),\n\n/***/ \"../src/tests/actions/_action.ts\":\n/*!***************************************!*\\\n  !*** ../src/tests/actions/_action.ts ***!\n  \\***************************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass TestAction {\n    constructor(vars) {\n        this.vars = vars;\n    }\n}\nexports[\"default\"] = TestAction;\n\n\n/***/ }),\n\n/***/ \"../src/tests/helpers/AxiosHelper.ts\":\n/*!*******************************************!*\\\n  !*** ../src/tests/helpers/AxiosHelper.ts ***!\n  \\*******************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\nconst https_1 = __importDefault(__webpack_require__(/*! https */ \"https\"));\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ../../services/AppConfigService */ \"../src/services/AppConfigService.ts\"));\nexports[\"default\"] = {\n    createInstance: (opts) => {\n        const axiosInstance = axios_1.default.create(Object.assign({\n            headers: {\n                'Content-Type': 'application/json',\n                'Origin': (0, AppConfigService_1.default)().get('domain')\n            },\n            withCredentials: true,\n            httpsAgent: new https_1.default.Agent({\n                rejectUnauthorized: false // This line will ignore SSL verification.\n            })\n        }, opts));\n        axiosInstance.defaults.timeout = 60000; // Increase timeout to 60000ms (60 seconds)\n        axiosInstance.interceptors.request.use((config) => {\n            return config;\n        });\n        return axiosInstance;\n    }\n};\n\n\n/***/ }),\n\n/***/ \"../src/tests/helpers/BrowserHelper.ts\":\n/*!*********************************************!*\\\n  !*** ../src/tests/helpers/BrowserHelper.ts ***!\n  \\*********************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebBrowser = void 0;\nconst puppeteer_1 = __importDefault(__webpack_require__(/*! puppeteer */ \"puppeteer\"));\nclass WebBrowser {\n    constructor(app, params) {\n        this.app = app;\n        this.params = params;\n    }\n    async getCookies() {\n        const page = await this.app.newPage();\n        await page.goto(this.params.url);\n        // Get cookies\n        const cookiesArray = await page.cookies();\n        await this.app.close();\n        return cookiesArray.reduce((acc, cookie) => {\n            acc[cookie.name] = cookie;\n            return acc;\n        }, {});\n    }\n    async getCookieString() {\n        return Object.entries(await this.getCookies())\n            .map(([name, cookie]) => `${name}=${cookie.value}`)\n            .join('; ');\n    }\n}\nexports.WebBrowser = WebBrowser;\nasync function create(params) {\n    const browser = await puppeteer_1.default.launch({\n        headless: 'new',\n        args: ['--no-sandbox', '--disable-setuid-sandbox'],\n        ignoreHTTPSErrors: true,\n    });\n    return new WebBrowser(browser, params);\n}\nexports[\"default\"] = {\n    create,\n};\n\n\n/***/ }),\n\n/***/ \"../src/tests/helpers/TestHelper.ts\":\n/*!******************************************!*\\\n  !*** ../src/tests/helpers/TestHelper.ts ***!\n  \\******************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TestCase = exports.MOCHA = void 0;\nconst AppConfigService_1 = __importDefault(__webpack_require__(/*! ../../services/AppConfigService */ \"../src/services/AppConfigService.ts\"));\nconst ServerService_1 = __importDefault(__webpack_require__(/*! ../../services/ServerService */ \"../src/services/ServerService.ts\"));\nconst socket_io_client_1 = __webpack_require__(/*! socket.io-client */ \"socket.io-client\");\nconst _mocha = __importStar(__webpack_require__(/*! mocha */ \"mocha\"));\nconst chai_1 = __importStar(__webpack_require__(/*! chai */ \"chai\"));\nconst chai_like_1 = __importDefault(__webpack_require__(/*! chai-like */ \"chai-like\"));\nconst chai_things_1 = __importDefault(__webpack_require__(/*! chai-things */ \"chai-things\"));\nconst _test_case_1 = __importDefault(__webpack_require__(/*! ../test_cases/_test_case */ \"../src/tests/test_cases/_test_case.ts\"));\nexports.TestCase = _test_case_1.default;\nchai_1.default.use(chai_like_1.default);\nchai_1.default.use(chai_things_1.default);\nconst createTestVars = (cfg = null) => {\n    (0, AppConfigService_1.default)(cfg);\n    return {\n        server: null,\n        socket: null,\n        theUser: null,\n        browser: null\n    };\n};\nconst connectToWS = async (jwt_token, ping_event = '__PING__', ping_response_event = '__PONG__') => {\n    const headers = {\n        Authorization: 'Bearer ' + jwt_token\n    };\n    try {\n        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n        const _TESTPORT = await (0, AppConfigService_1.default)().get('test_port');\n        const socket = (0, socket_io_client_1.io)(`https://localhost:${_TESTPORT}`, {\n            extraHeaders: headers,\n            rejectUnauthorized: false\n        });\n        socket.on('error', (error) => {\n            console.error('Socket Error:', error);\n        });\n        socket.on('connect_error', (error) => {\n            console.error('Connection error:', error);\n        });\n        return new Promise((done) => {\n            socket.on(ping_response_event, () => {\n                done(socket);\n            });\n            socket.emit(ping_event);\n        });\n    }\n    catch (error) {\n        console.error('Error initializing socket:', error.context.responseText);\n        throw error;\n    }\n};\nconst setLoggedLifeCycle = (testVars, callbacks) => {\n    setLifeCycle(testVars, {\n        before: async () => {\n            testVars.server = await startServer();\n            if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.after) {\n                return await callbacks.after(testVars);\n            }\n            return;\n        },\n        beforeEach: async () => {\n            if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.beforeEach) {\n                return await callbacks.beforeEach(testVars);\n            }\n            return;\n        },\n        afterEach: async () => {\n            if (testVars.socket && testVars.socket.connected) {\n                testVars.socket.disconnect();\n            }\n            return;\n        },\n        after: async () => {\n            if (testVars.server) {\n                testVars.server.http.instance.close();\n                testVars.server.websocket.instance.close();\n            }\n            if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.after) {\n                return await callbacks.after(testVars);\n            }\n            return;\n        }\n    }, {\n        beforeEach: 30000\n    });\n};\nconst startServer = async () => {\n    const _TESTPORT = await (0, AppConfigService_1.default)().get('test_port');\n    const _TESTWSPORT = await (0, AppConfigService_1.default)().get('test_ws_port');\n    const server = await ServerService_1.default.initializeApp({\n        controllerList: await (0, AppConfigService_1.default)().get('controller_list'),\n        wsRoutes: await (0, AppConfigService_1.default)().get('ws_routes'),\n        httpRoutes: await (0, AppConfigService_1.default)().get('http_routes')\n    });\n    const startHTTPListener = async () => new Promise((resolve) => {\n        server.http.starter();\n    });\n    const startWSListener = async () => new Promise((resolve) => {\n        server.websocket.starter();\n    });\n    return server;\n};\nconst setLifeCycle = (testVars, callbacks, timeouts) => {\n    MOCHA.before(async function () {\n        if (timeouts === null || timeouts === void 0 ? void 0 : timeouts.before) {\n            this.timeout(timeouts.before);\n        }\n        if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.before) {\n            await callbacks.before(testVars);\n        }\n    });\n    MOCHA.beforeEach(async function () {\n        if (timeouts === null || timeouts === void 0 ? void 0 : timeouts.beforeEach) {\n            this.timeout(timeouts.beforeEach);\n        }\n        if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.beforeEach) {\n            await callbacks.beforeEach(testVars);\n        }\n        return;\n    });\n    MOCHA.afterEach(async function () {\n        if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.afterEach) {\n            await callbacks.afterEach(testVars);\n        }\n    });\n    MOCHA.after(async function () {\n        if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.after) {\n            await callbacks.after(testVars);\n        }\n    });\n};\nexports[\"default\"] = {\n    connectToWS,\n    startServer,\n    createTestVars,\n    disableLogging: () => { console.log = () => { }; }\n};\nconst MOCHA = Object.assign(_mocha, {\n    expect: chai_1.expect,\n    setLifeCycle,\n    setLoggedLifeCycle\n});\nexports.MOCHA = MOCHA;\n\n\n/***/ }),\n\n/***/ \"../src/tests/index.ts\":\n/*!*****************************!*\\\n  !*** ../src/tests/index.ts ***!\n  \\*****************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MOCHA = exports.TestHelper = exports.TestCase = exports.TestAction = exports.BrowserHelper = exports.AxiosHelper = void 0;\nconst AxiosHelper_1 = __importDefault(__webpack_require__(/*! ./helpers/AxiosHelper */ \"../src/tests/helpers/AxiosHelper.ts\"));\nexports.AxiosHelper = AxiosHelper_1.default;\nconst BrowserHelper_1 = __importDefault(__webpack_require__(/*! ./helpers/BrowserHelper */ \"../src/tests/helpers/BrowserHelper.ts\"));\nexports.BrowserHelper = BrowserHelper_1.default;\nconst TestHelper_1 = __importStar(__webpack_require__(/*! ./helpers/TestHelper */ \"../src/tests/helpers/TestHelper.ts\"));\nexports.TestHelper = TestHelper_1.default;\nObject.defineProperty(exports, \"MOCHA\", ({ enumerable: true, get: function () { return TestHelper_1.MOCHA; } }));\nconst _action_1 = __importDefault(__webpack_require__(/*! ./actions/_action */ \"../src/tests/actions/_action.ts\"));\nexports.TestAction = _action_1.default;\nconst _test_case_1 = __importDefault(__webpack_require__(/*! ./test_cases/_test_case */ \"../src/tests/test_cases/_test_case.ts\"));\nexports.TestCase = _test_case_1.default;\n\n\n/***/ }),\n\n/***/ \"../src/tests/test_cases/_test_case.ts\":\n/*!*********************************************!*\\\n  !*** ../src/tests/test_cases/_test_case.ts ***!\n  \\*********************************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass TestCase {\n    constructor() {\n        throw new Error('Class not instantiable');\n    }\n    static declare(testVars) {\n        throw new Error('Method not implemented.');\n    }\n}\nexports[\"default\"] = TestCase;\n\n\n/***/ }),\n\n/***/ \"@langchain/community/vectorstores/faiss\":\n/*!**********************************************************!*\\\n  !*** external \"@langchain/community/vectorstores/faiss\" ***!\n  \\**********************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"@langchain/community/vectorstores/faiss\");\n\n/***/ }),\n\n/***/ \"@prisma/client\":\n/*!*********************************!*\\\n  !*** external \"@prisma/client\" ***!\n  \\*********************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"@prisma/client\");\n\n/***/ }),\n\n/***/ \"archiver\":\n/*!***************************!*\\\n  !*** external \"archiver\" ***!\n  \\***************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"archiver\");\n\n/***/ }),\n\n/***/ \"aws-sdk\":\n/*!**************************!*\\\n  !*** external \"aws-sdk\" ***!\n  \\**************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"aws-sdk\");\n\n/***/ }),\n\n/***/ \"axios\":\n/*!************************!*\\\n  !*** external \"axios\" ***!\n  \\************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"axios\");\n\n/***/ }),\n\n/***/ \"body-parser\":\n/*!******************************!*\\\n  !*** external \"body-parser\" ***!\n  \\******************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"body-parser\");\n\n/***/ }),\n\n/***/ \"chai\":\n/*!***********************!*\\\n  !*** external \"chai\" ***!\n  \\***********************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"chai\");\n\n/***/ }),\n\n/***/ \"chai-like\":\n/*!****************************!*\\\n  !*** external \"chai-like\" ***!\n  \\****************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"chai-like\");\n\n/***/ }),\n\n/***/ \"chai-things\":\n/*!******************************!*\\\n  !*** external \"chai-things\" ***!\n  \\******************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"chai-things\");\n\n/***/ }),\n\n/***/ \"chalk\":\n/*!************************!*\\\n  !*** external \"chalk\" ***!\n  \\************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"chalk\");\n\n/***/ }),\n\n/***/ \"compression\":\n/*!******************************!*\\\n  !*** external \"compression\" ***!\n  \\******************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"compression\");\n\n/***/ }),\n\n/***/ \"cors\":\n/*!***********************!*\\\n  !*** external \"cors\" ***!\n  \\***********************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"cors\");\n\n/***/ }),\n\n/***/ \"express\":\n/*!**************************!*\\\n  !*** external \"express\" ***!\n  \\**************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"express\");\n\n/***/ }),\n\n/***/ \"express-fileupload\":\n/*!*************************************!*\\\n  !*** external \"express-fileupload\" ***!\n  \\*************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"express-fileupload\");\n\n/***/ }),\n\n/***/ \"fs\":\n/*!*********************!*\\\n  !*** external \"fs\" ***!\n  \\*********************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"fs\");\n\n/***/ }),\n\n/***/ \"fs/promises\":\n/*!******************************!*\\\n  !*** external \"fs/promises\" ***!\n  \\******************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"fs/promises\");\n\n/***/ }),\n\n/***/ \"jsonwebtoken\":\n/*!*******************************!*\\\n  !*** external \"jsonwebtoken\" ***!\n  \\*******************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"jsonwebtoken\");\n\n/***/ }),\n\n/***/ \"langchain/chains\":\n/*!***********************************!*\\\n  !*** external \"langchain/chains\" ***!\n  \\***********************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"langchain/chains\");\n\n/***/ }),\n\n/***/ \"langchain/document\":\n/*!*************************************!*\\\n  !*** external \"langchain/document\" ***!\n  \\*************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"langchain/document\");\n\n/***/ }),\n\n/***/ \"langchain/document_loaders/fs/text\":\n/*!*****************************************************!*\\\n  !*** external \"langchain/document_loaders/fs/text\" ***!\n  \\*****************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"langchain/document_loaders/fs/text\");\n\n/***/ }),\n\n/***/ \"langchain/text_splitter\":\n/*!******************************************!*\\\n  !*** external \"langchain/text_splitter\" ***!\n  \\******************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"langchain/text_splitter\");\n\n/***/ }),\n\n/***/ \"mocha\":\n/*!************************!*\\\n  !*** external \"mocha\" ***!\n  \\************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"mocha\");\n\n/***/ }),\n\n/***/ \"mongodb\":\n/*!**************************!*\\\n  !*** external \"mongodb\" ***!\n  \\**************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"mongodb\");\n\n/***/ }),\n\n/***/ \"path\":\n/*!***********************!*\\\n  !*** external \"path\" ***!\n  \\***********************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"path\");\n\n/***/ }),\n\n/***/ \"pino\":\n/*!***********************!*\\\n  !*** external \"pino\" ***!\n  \\***********************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"pino\");\n\n/***/ }),\n\n/***/ \"pino-pretty\":\n/*!******************************!*\\\n  !*** external \"pino-pretty\" ***!\n  \\******************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"pino-pretty\");\n\n/***/ }),\n\n/***/ \"puppeteer\":\n/*!****************************!*\\\n  !*** external \"puppeteer\" ***!\n  \\****************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"puppeteer\");\n\n/***/ }),\n\n/***/ \"reflect-metadata\":\n/*!***********************************!*\\\n  !*** external \"reflect-metadata\" ***!\n  \\***********************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"reflect-metadata\");\n\n/***/ }),\n\n/***/ \"socket.io\":\n/*!****************************!*\\\n  !*** external \"socket.io\" ***!\n  \\****************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"socket.io\");\n\n/***/ }),\n\n/***/ \"socket.io-client\":\n/*!***********************************!*\\\n  !*** external \"socket.io-client\" ***!\n  \\***********************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"socket.io-client\");\n\n/***/ }),\n\n/***/ \"source-map\":\n/*!*****************************!*\\\n  !*** external \"source-map\" ***!\n  \\*****************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"source-map\");\n\n/***/ }),\n\n/***/ \"uuid\":\n/*!***********************!*\\\n  !*** external \"uuid\" ***!\n  \\***********************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"uuid\");\n\n/***/ }),\n\n/***/ \"xml2js\":\n/*!*************************!*\\\n  !*** external \"xml2js\" ***!\n  \\*************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"xml2js\");\n\n/***/ }),\n\n/***/ \"child_process\":\n/*!********************************!*\\\n  !*** external \"child_process\" ***!\n  \\********************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"child_process\");\n\n/***/ }),\n\n/***/ \"crypto\":\n/*!*************************!*\\\n  !*** external \"crypto\" ***!\n  \\*************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"crypto\");\n\n/***/ }),\n\n/***/ \"http\":\n/*!***********************!*\\\n  !*** external \"http\" ***!\n  \\***********************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"http\");\n\n/***/ }),\n\n/***/ \"https\":\n/*!************************!*\\\n  !*** external \"https\" ***!\n  \\************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"https\");\n\n/***/ }),\n\n/***/ \"os\":\n/*!*********************!*\\\n  !*** external \"os\" ***!\n  \\*********************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"os\");\n\n/***/ }),\n\n/***/ \"readline\":\n/*!***************************!*\\\n  !*** external \"readline\" ***!\n  \\***************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = require(\"readline\");\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/node module decorator */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.nmd = (module) => {\n/******/ \t\t\tmodule.paths = [];\n/******/ \t\t\tif (!module.children) module.children = [];\n/******/ \t\t\treturn module;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be in strict mode.\n(() => {\n\"use strict\";\nvar exports = __webpack_exports__;\n/*!********************!*\\\n  !*** ./src/rws.ts ***!\n  \\********************/\n//#!/usr/bin/env node\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst index_1 = __webpack_require__(/*! ../../src/index */ \"../src/index.ts\");\nconst { log, warn, error, color, rwsLog } = index_1.ConsoleService;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\n// process.argv[2] will be the first command line argument after `rws`\nconst command = process.argv[2];\n// process.argv[3] will be the parameter args for commands\nconst cmdParamString = process.argv[3];\nconst cmdArgs = !!cmdParamString && cmdParamString.length > 2 ? cmdParamString.split(',') : [];\nconst commandExecutionArgs = { _default: null, _extra_args: {} };\nif (cmdParamString && cmdParamString.indexOf('=') > -1) {\n    cmdArgs.forEach((arg) => {\n        const argData = arg.split('=');\n        commandExecutionArgs[argData[0].replace('--', '')] = argData[1];\n        if (!commandExecutionArgs._default) {\n            commandExecutionArgs._default = argData[1];\n        }\n    });\n}\nelse if (!cmdParamString || !cmdArgs.length) {\n    commandExecutionArgs._default = null;\n}\nelse {\n    commandExecutionArgs._default = cmdParamString;\n}\nif (process.argv.length > 4) {\n    for (let i = 4; i <= process.argv.length - 1; i++) {\n        const parameter = process.argv[i].replace('--', '').replace('-', '_');\n        const valuePair = parameter.split('=');\n        commandExecutionArgs._extra_args[valuePair[0]] = valuePair.length > 1 ? valuePair[1] : true;\n    }\n}\nconst executionDir = process.cwd();\nconst packageRootDir = index_1.UtilsService.findRootWorkspacePath(executionDir);\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\nconst moduleCfgFile = `${moduleCfgDir}/_cfg_path`;\nfunction getConfig(configPath, cfgPathFile = null) {\n    if (cfgPathFile === null) {\n        cfgPathFile = configPath;\n        if (cfgPathFile) {\n            const rwsConfigVar = index_1.UtilsService.getRWSVar(cfgPathFile);\n            if (rwsConfigVar) {\n                configPath = rwsConfigVar;\n            }\n        }\n    }\n    else {\n        index_1.UtilsService.setRWSVar(cfgPathFile, configPath);\n    }\n    const pathWorkspaceToCwd = path.relative(__dirname, process.cwd());\n    console.log(__dirname);\n    const frameworkConfigFactory = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'undefined'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()).default;\n    return frameworkConfigFactory();\n}\nfunction copyFileSync(source, destination) {\n    try {\n        const content = fs.readFileSync(source);\n        fs.writeFileSync(destination, content);\n        console.log(`File copied from ${source} to ${destination}`);\n    }\n    catch (error) {\n        console.error('Error occurred while copying file:', error);\n    }\n}\nconst main = async () => {\n    const cfgPathFile = `_cfg_path`;\n    const tsFile = path.resolve(__dirname, '..', 'src') + '/rws.ts';\n    let APP_CFG = null;\n    if (command === 'init') {\n        const configPath = commandExecutionArgs.config || commandExecutionArgs._default || 'config/config';\n        const cfgData = getConfig(configPath, cfgPathFile);\n        APP_CFG = cfgData;\n    }\n    let savedHash = null;\n    const consoleClientHashFile = `${moduleCfgDir}/_cli_hash`;\n    if (fs.existsSync(`${moduleCfgDir}/_cli_hash`)) {\n        savedHash = fs.readFileSync(consoleClientHashFile, 'utf-8');\n    }\n    if (!APP_CFG) {\n        APP_CFG = getConfig('config/config', cfgPathFile);\n    }\n    if (!APP_CFG) {\n        throw new Error(`No config for CLI. Try to initialize with \"yarn rws init config=path/to/config.ts\" (config path from ${process.cwd()}/src)`);\n    }\n    const APP = (0, index_1.getAppConfig)(APP_CFG);\n    const commands = [...index_1.RWSAppCommands, ...APP.get('commands')];\n    const theCommand = commands.find((cmd) => cmd.getName() == command);\n    commandExecutionArgs._rws_config = APP_CFG;\n    const cmdFiles = index_1.MD5Service.batchGenerateCommandFileMD5(moduleCfgDir);\n    const currentSumHashes = (await index_1.MD5Service.generateCliHashes([tsFile, ...cmdFiles])).join('/');\n    if (!savedHash || currentSumHashes !== savedHash) {\n        fs.writeFileSync(consoleClientHashFile, currentSumHashes);\n    }\n    if (theCommand) {\n        await theCommand.execute(commandExecutionArgs);\n        return;\n    }\n    if (!fs.existsSync(`${moduleCfgDir}/${cfgPathFile}`)) {\n        throw new Error('No config path generated for CLI. Try to initialize with \"npx rws init config=path/to/config.ts\"');\n    }\n    error(`Unknown command: ${command}.`);\n    return;\n};\nmain().then(() => {\n    process.exit(0);\n});\n\n})();\n\n/******/ })()\n;\n//# sourceMappingURL=cfg.js.map","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"../src/services sync recursive\";\nmodule.exports = webpackEmptyContext;","import Command, { ICmdParams } from './_command';\nimport { SetupRWS } from '../install';\nimport ConsoleService from '../services/ConsoleService';\n\nimport { rmdir } from 'fs/promises';\nimport path from 'path';\nimport fs from 'fs';\nimport UtilsService from '../services/UtilsService';\nconst { log, warn, error, color } = ConsoleService;\n\nconst executionDir = process.cwd();\n\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir)\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\nconst cfgPathFile = `${moduleCfgDir}/_cfg_path`;  \n\nconst moduleDir = path.resolve(path.dirname(module.id), '..', '..').replace('dist', '');\n\n\nclass ClearCommand extends Command \n{\n    constructor(){\n        super('clear', module);\n    }\n\n    \n\n    async removeDirRecursively(path: string) {\n    try {\n        await rmdir(path, { recursive: true });\n        console.log(`Directory at ${path} removed successfully`);\n    } catch (error) {\n        console.error(`Error while removing directory: ${error}`);\n    }\n    }\n\n    async execute(params?: ICmdParams): Promise<void>\n    {\n        ConsoleService.log('clearing systems...');              \n    \n        await this.removeDirRecursively(moduleCfgDir);\n\n        ConsoleService.log(color().green('[RWS]') + ' systems cleared. Use npx rws init to reinitialize.');              \n    }\n\n    \n}\n\nexport default ClearCommand.createCommand();\n","import Command, { ICmdParams } from './_command';\nimport { SetupRWS } from '../install';\nimport ConsoleService from '../services/ConsoleService';\nimport UtilsService from '../services/UtilsService';\nimport path from 'path';\nimport fs from 'fs';\n\nconst { log, warn, error, color } = ConsoleService;\n\nconst executionDir = process.cwd();\n\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir)\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\nconst moduleDir = path.resolve(path.dirname(module.id), '..', '..').replace('dist', '');\n\n\nclass InitCommand extends Command \n{\n    constructor(){\n        super('init', module);\n    }\n\n    async execute(params?: ICmdParams): Promise<void>\n    {\n        ConsoleService.log(color().green('[RWS]') + ' starting systems...');              \n    \n        const configPath: string = params.config || params._default || 'config/config'; \n\n        if(!configPath){\n            ConsoleService.error('[RWS] No config path provided! Use \"npx rws init path/to/config/file (from ./src)\"');\n            return;\n        }\n\n       try{                     \n            const cfgData = params._rws_config;\n\n            try {                              \n                await SetupRWS(cfgData);\n                const prismaCfgPath = moduleDir + '/prisma/schema.prisma';        \n                fs.unlinkSync(prismaCfgPath);\n                ConsoleService.log(color().green('[RWS]') + ' systems initialized.'); \n            } catch (error) {\n                ConsoleService.error('Error while initiating RWS server installation:', error);\n            }            \n        } catch(e: Error | any){    \n            ConsoleService.log(color().red('[RWS]') + ' wrong config file path...');         \n            throw new Error(e)            \n        }\n    }\n\n    \n}\n\nexport default InitCommand.createCommand();\n","\nimport Command, { ICmdParams } from \"./_command\";\nimport ConsoleService from '../services/ConsoleService';\nimport AWSService from '../services/AWSService';\nimport fs from 'fs';\nimport path from 'path';\nimport UtilsService from \"../services/UtilsService\";\nimport EFSService from \"../services/EFSService\";\nimport LambdaService from \"../services/LambdaService\";\nimport VPCService from \"../services/VPCService\";\nimport CloudWatchService from \"../services/CloudWatchService\";\n\nconst { log, warn, error, color, rwsLog } = ConsoleService;\n\nconst executionDir = process.cwd();\n\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir)\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\nconst cfgPathFile = `${moduleCfgDir}/_cfg_path`;  \n\nconst moduleDir = path.resolve(path.dirname(module.id), '..', '..').replace('dist/', '');\n\ninterface ILambdaParams {\n    rwsConfig?: any\n    subnetId?: string\n}\n\ntype ILifeCycleMethod = (params: ILambdaParams) => Promise<void> | null;\n\ntype ILambdaLifeCycleEvents = {\n    preArchive?: ILifeCycleMethod;\n    postArchive?: ILifeCycleMethod;\n    preDeploy?: ILifeCycleMethod;\n    postDeploy?: ILifeCycleMethod;\n};\n\ninterface ILambdasLifeCycleConfig {\n    [key: string]: ILambdaLifeCycleEvents\n}\n\nconst lambdasCfg: ILambdasLifeCycleConfig = {\n    artillery: {\n        preArchive: async (params: ILambdaParams): Promise<void> => {\n            const sourceArtilleryCfg = `${path.resolve(process.cwd())}/artillery-config.yml`;\n            const targetArtilleryCfg = `${moduleDir}/lambda-functions/artillery/artillery-config.yml`;\n\n            if (fs.existsSync(targetArtilleryCfg)) {\n                fs.unlinkSync(targetArtilleryCfg);\n            }\n\n            if (!fs.existsSync(sourceArtilleryCfg)) {\n                throw `Create \"artillery-config.yml\" in your project root directory.`;\n            }\n            \n            rwsLog('RWS Lambda CLI | artillery | preDeploy', ' copying artillery config.');\n\n            fs.copyFileSync(sourceArtilleryCfg, targetArtilleryCfg);\n        },\n        postDeploy: async (params: ILambdaParams): Promise<void> => {        \n            const targetArtilleryCfg = `${moduleDir}/lambda-functions/artillery/artillery-config.yml`;\n\n            if (fs.existsSync(targetArtilleryCfg)) {\n                fs.unlinkSync(targetArtilleryCfg);\n                rwsLog('RWS Lambda CLI | artillery | postDeploy', 'artillery config cleaned up');\n            }            \n        }\n    }\n}\n\ntype ILambdaSubCommand = 'deploy' | 'delete' | string;\n\ninterface ILambdaParamsReturn {\n    lambdaCmd: ILambdaSubCommand\n    lambdaDirName: string\n    subnetId: string\n    vpcId: string\n    lambdaArg: string\n    extraParams: {\n        [key: string]: any\n    }\n}\n\nclass LambdaCommand extends Command \n{\n    constructor(){\n        super('lambda', module);\n    }\n\n    async execute(params?: ICmdParams): Promise<void>\n    {\n        AWSService._initApis();\n        \n        const { lambdaCmd, extraParams, subnetId, vpcId } = await this.getLambdaParameters(params);\n\n        const PermissionCheck = await AWSService.checkForRolePermissions(params._rws_config.aws_lambda_role, [\n            'lambda:CreateFunction',\n            'lambda:UpdateFunctionCode',\n            'lambda:UpdateFunctionConfiguration',\n            'lambda:InvokeFunction',\n            'lambda:ListFunctions',\n            \n            's3:GetObject',\n            's3:PutObject',\n\n            'elasticfilesystem:CreateFileSystem',\n            'elasticfilesystem:DeleteFileSystem',\n            \"elasticfilesystem:DescribeFileSystems\",\n\n            'elasticfilesystem:CreateAccessPoint',\n            'elasticfilesystem:DeleteAccessPoint',\n            \"elasticfilesystem:DescribeAccessPoints\",\n\n            'elasticfilesystem:CreateMountTarget',            \n            \"elasticfilesystem:DeleteMountTarget\",\n            'elasticfilesystem:DescribeMountTargets',\n\n            \"ec2:CreateSecurityGroup\",    \n            \"ec2:DescribeSecurityGroups\",\n            \"ec2:DescribeSubnets\",\n\n            \"ec2:DescribeVpcs\",   \n            \n            \"ec2:CreateVpcEndpoint\",\n            \"ec2:DescribeVpcEndpoints\",\n            \"ec2:ModifyVpcEndpoint\",\n            \"ec2:DeleteVpcEndpoint\",\n\n            'cloudwatch:PutMetricData',\n            'cloudwatch:GetMetricData'\n        ]);\n\n        if(!PermissionCheck.OK){\n            error('Lambda role has not enough permissions. Add following actions to your IAM role permissions policies:');\n            log(PermissionCheck.policies);\n            return;\n        }else{\n            rwsLog(color().green('AWS IAM Role is eligible for operations.'));\n        }\n\n        if(!!extraParams && !!extraParams.redeploy_loader){            \n            const zipPath = await LambdaService.archiveLambda(`${moduleDir}/lambda-functions/efs-loader`, moduleCfgDir, true);\n            await LambdaService.deployLambda('efs-loader', zipPath, vpcId, subnetId, true);\n        }\n        \n        switch(lambdaCmd){\n            case 'deploy':\n                await this.deploy(params);            \n                return;\n            case 'undeploy':\n                await this.undeploy(params);            \n                return;    \n            case 'invoke':\n                await this.invoke(params);            \n                return;\n            case 'delete':\n                await this.delete(params);\n                return;    \n            case 'list':\n                await this.list(params);\n                return;    \n            case 'open-to-web':\n                await this.openToWeb(params);\n                return;        \n            default:\n                error(`[RWS Lambda CLI] \"${lambdaCmd}\" command is not supported in RWS Lambda CLI`);\n                log(`Try: \"deploy:${lambdaCmd}\", \"delete:${lambdaCmd}\", invoke:${lambdaCmd} or \"list:${lambdaCmd}\"`)\n                return;    \n        }    \n    }   \n\n    public executeLambdaLifeCycle = async (lifeCycleEventName: keyof ILambdaLifeCycleEvents, lambdaDirName: keyof ILambdasLifeCycleConfig, params: ILambdaParams): Promise<void> => {\n        if (!lambdasCfg[lambdaDirName] || !lambdasCfg[lambdaDirName][lifeCycleEventName]) {\n            return;\n        }\n    \n        const theAction = lambdasCfg[lambdaDirName][lifeCycleEventName];\n    \n        if (theAction && UtilsService.isInterface<ILambdasLifeCycleConfig>(theAction)) {            \n            await theAction(params);\n        }\n    }\n\n    public async getLambdaParameters(params: ICmdParams): Promise<ILambdaParamsReturn>\n    {\n        const lambdaString: string = params.lambdaString || params._default;    \n        const [subnetId, vpcId] = params.subnetId || await VPCService.findDefaultSubnetForVPC();\n        const lambdaStringArr: string[] = lambdaString.split(':');        \n        const lambdaCmd: ILambdaSubCommand = lambdaStringArr[0];\n        const lambdaDirName = lambdaStringArr[1];    \n        const lambdaArg = lambdaStringArr.length > 2 ? lambdaStringArr[2] : null;    \n        const extraParams = params._extra_args.deploy_loader;\n\n        return {\n            lambdaCmd,\n            lambdaDirName,\n            subnetId,\n            vpcId,\n            lambdaArg,\n            extraParams\n        }\n    }\n    \n    public async invoke(params: ICmdParams)\n    {\n        const {lambdaDirName, lambdaArg} = await this.getLambdaParameters(params);\n\n        let payload = {};\n\n        if(lambdaArg){\n            const payloadPath = LambdaService.findPayload(lambdaArg); \n    \n            payload = JSON.parse(fs.readFileSync(payloadPath, 'utf-8'));\n        }\n    \n        const response = await LambdaService.invokeLambda(lambdaDirName, payload);\n\n        const logsTimeout = await CloudWatchService.printLogsForLambda(`RWS-${lambdaDirName}`);\n\n        rwsLog('RWS Lambda Service', color().yellowBright(`\"RWS-${lambdaDirName}\" lambda function response (Code: ${response.Response.StatusCode}):`));            \n\n        if(response.InvocationType === 'RequestResponse'){\n            log(response.Response.Payload);\n            clearTimeout(logsTimeout.core);\n        }\n    }\n\n    public async list(params: ICmdParams)\n    {\n        const listFunctionsParams: AWS.Lambda.ListFunctionsRequest = {\n            MaxItems: 100,\n          };\n        \n        const rwsLambdaFunctions: AWS.Lambda.FunctionConfiguration[] = [];\n\n        try {\n            const functionsResponse = await AWSService.getLambda().listFunctions(listFunctionsParams).promise();\n        \n            if (functionsResponse.Functions) {\n              for (const functionConfig of functionsResponse.Functions) {\n                if (functionConfig.FunctionName && functionConfig.FunctionName.startsWith('RWS-')) {\n                  rwsLambdaFunctions.push(functionConfig);\n                }\n              }\n            }\n        } catch (error) {\n            throw new Error(`Error listing Lambda functions: ${(error as AWS.AWSError).message}`);\n        }\n\n        rwsLog('RWS Lambda Service', color().yellowBright(`RWS lambda functions list:`));    \n        rwsLog('RWS Lambda Service', color().yellowBright(`ARN  |  NAME`));  \n\n        rwsLambdaFunctions.map((funct: AWS.Lambda.FunctionConfiguration) => funct.FunctionArn + '  |  ' +funct.FunctionName).forEach((msg) => {\n            log(msg);\n        })\n    }\n\n    public async deploy(params: ICmdParams)\n    {\n        const {lambdaDirName, vpcId, subnetId, lambdaArg} = await this.getLambdaParameters(params);            \n\n        if (lambdaDirName === 'modules') {        \n            const [efsId] = await EFSService.getOrCreateEFS('RWS_EFS', vpcId, subnetId);\n            LambdaService.setRegion(params._rws_config.aws_lambda_region);\n            await LambdaService.deployModules(lambdaArg, efsId, vpcId,subnetId, true);        \n            return;\n        }        \n\n        const lambdaParams: ILambdaParams = {\n            rwsConfig: params._rws_config,\n            subnetId: subnetId\n        };\n\n        log(color().green('[RWS Lambda CLI]') + ' preparing artillery lambda function...');\n\n        await this.executeLambdaLifeCycle('preArchive', lambdaDirName, lambdaParams);\n\n        const zipPath = await LambdaService.archiveLambda(`${moduleDir}/lambda-functions/${lambdaDirName}`, moduleCfgDir, lambdaDirName === 'efs-loader');\n\n        await this.executeLambdaLifeCycle('postArchive', lambdaDirName, lambdaParams);\n\n        await this.executeLambdaLifeCycle('preDeploy', lambdaDirName, lambdaParams);\n\n        try {\n            await LambdaService.deployLambda(lambdaDirName, zipPath, vpcId, subnetId);                                           \n\n            await this.executeLambdaLifeCycle('postDeploy', lambdaDirName, lambdaParams);\n\n            let payload = {};\n\n            if(lambdaArg){                       \n                let payloadPath = LambdaService.findPayload(lambdaArg);             \n\n                payload = JSON.parse(fs.readFileSync(payloadPath, 'utf-8'));\n                \n                const response = await LambdaService.invokeLambda(lambdaDirName, payload);\n\n                rwsLog('RWS Lambda Deploy Invoke', color().yellowBright(`\"RWS-${lambdaDirName}\" lambda function response (Code: ${response.Response.StatusCode})`));    \n\n                if(response.Response.Payload.toString()){\n                    const responseData = JSON.parse(response.Response.Payload.toString());\n                    \n                    log(response.Response.Payload.toString());\n\n                    if(!responseData.success){\n                        error(responseData.errorMessage);\n                    }\n                }\n            }\n        } catch (e: Error | any) {\n            error(e.message);\n            log(e.stack);\n        }\n\n        log(color().green(`[RWS Lambda CLI] \"${moduleDir}/lambda-functions/${lambdaDirName}\" function directory\\nhas been deployed to \"RWS-${lambdaDirName}\" named AWS Lambda function.`));\n    }\n\n    public async undeploy(params: ICmdParams)\n    {\n        const {lambdaDirName, vpcId, subnetId, lambdaArg} = await this.getLambdaParameters(params);            \n\n        if (lambdaDirName === 'modules') {        \n            const [efsId] = await EFSService.getOrCreateEFS('RWS_EFS', vpcId, subnetId);\n            LambdaService.setRegion(params._rws_config.aws_lambda_region);\n            await LambdaService.deployModules(lambdaArg, efsId, vpcId,subnetId, true);        \n            return;\n        }        \n\n        const lambdaParams: ILambdaParams = {\n            rwsConfig: params._rws_config,\n            subnetId: subnetId\n        };\n    }\n\n    public async openToWeb(params: ICmdParams)\n    {\n        const {lambdaDirName} = await this.getLambdaParameters(params);                  \n\n        // await APIGatewayService.associateNATGatewayWithLambda('RWS-' + lambdaDirName);        \n    }    \n\n    public async delete(params: ICmdParams)\n    {\n        const {lambdaDirName} = await this.getLambdaParameters(params);  \n                \n        if(!(await LambdaService.functionExists('RWS-' + lambdaDirName))){\n            error(`There is no lambda function named \"RWS-${lambdaDirName}\" in AWS region \"${AWSService.getRegion()}\"`);\n            return;\n        }    \n\n        await LambdaService.deleteLambda('RWS-' + lambdaDirName);\n        log(color().green(`[RWS Lambda CLI] \"RWS-${lambdaDirName}\" lambda function has been ${color().red('deleted')} from AWS region \"${AWSService.getRegion()}\"`));\n    }    \n}\n\nexport default LambdaCommand.createCommand();\nexport {ILambdaParams, ILambdaParamsReturn}","import IAppConfig from \"../interfaces/IAppConfig\";\nimport path from 'path';\nimport fs from 'fs';\nimport UtilsService from \"../services/UtilsService\";\n\ninterface ICmdParams {\n    [key: string]: any\n    verbose?: boolean\n    _rws_config?: IAppConfig\n    _extra_args: {\n        [key: string]: any\n    }\n}\n\ninterface ICmdParamsReturn {\n    subCmd: string;\n    apiCmd: string;\n    apiArg: string;\n    extraParams: {\n        [key: string]: any\n    };\n}\n\nexport default abstract class TheCommand {\n    public name: string;\n    protected static _instances: { [key: string]: TheCommand } | null = {};\n\n\n    constructor(name: string, childModule: {id: string, loaded: boolean, exports: any, paths: any[], children: any[]}){\n        this.name = name;\n\n        const rootPackageDir = UtilsService.findRootWorkspacePath(process.cwd());\n        const moduleCfgDir = path.resolve(rootPackageDir, 'node_modules', '.rws');\n        const cmdDirFile = `${moduleCfgDir}/_cli_cmd_dir`;       \n        \n\n        if(!fs.existsSync(moduleCfgDir)){\n            fs.mkdirSync(moduleCfgDir);\n        }\n        \n        const filePath:string = childModule.id;\n        \n        const cmdDir = `${filePath.replace('./', '').replace(/\\/[^/]*\\.ts$/, '')}`;        \n\n        let finalCmdDir = cmdDir;\n\n        if(cmdDir.indexOf('node_modules') > -1){\n            finalCmdDir = rootPackageDir + '/' + finalCmdDir.substring(finalCmdDir.indexOf(\"node_modules\"));\n        }\n        \n        \n        if(!fs.existsSync(cmdDirFile)){\n            fs.writeFileSync(cmdDirFile, finalCmdDir);\n        }     \n    }\n\n    getSourceFilePath() {\n        const err = new Error();\n        if (err.stack) {\n          const match = err.stack.match(/at [^\\s]+ \\((.*):\\d+:\\d+\\)/);\n          if (match && match[1]) {\n            return match[1];\n          }\n        }\n        return '';\n    }\n\n    async execute(params: ICmdParams = null): Promise<void>\n    {\n        throw new Error('Implement method.');\n    }\n\n    getName(): string\n    {\n        return this.name;\n    }\n\n    public static createCommand<T extends new (...args: any[]) => TheCommand>(this: T): InstanceType<T> {\n        const className = this.name;        \n\n        if (!TheCommand._instances[className]) {\n            TheCommand._instances[className] = new this();\n        }\n\n        return TheCommand._instances[className] as InstanceType<T>;\n    }\n\n    getCommandParameters(params: ICmdParams): ICmdParamsReturn\n    {\n        const cmdString: string = params.cmdString || params._default;\n        const cmdStringArr: string[] = cmdString.split(':');        \n        const subCmd: string = cmdStringArr[0];\n        const apiCmd = cmdStringArr[1];    \n        const apiArg = cmdStringArr.length > 2 ? cmdStringArr[2] : null;    \n        const extraParams = params._extra_args.deploy_loader;\n\n        return {\n            subCmd,\n            apiCmd,\n            apiArg,\n            extraParams\n        }\n    }\n}\n\nexport {ICmdParams, ICmdParamsReturn}","import LambdaCommand from './LambdaCommand';\nimport InitCommand from './InitCommand';\nimport ClearCommand from './ClearCommand';\n\nexport default [\n    InitCommand,    \n    LambdaCommand,\n    ClearCommand\n];","import { Response, Request } from \"express\";\nimport RWSService from \"../services/_service\";\n\nimport AppConfig from '../services/AppConfigService'\n\nimport Error404 from '../errors/Error404';\nimport Error500 from '../errors/Error500';\n\ntype IHTTProuteMethod  = (params: IRequestParams<any>) => any\ninterface IRequestParams<T>{\n    query: {\n        [key: string]: any\n    },\n    data: {\n        [key: string]: any\n    },\n    params: {\n        [key: string]: any\n    },\n    res: Response,\n    req: Request\n}\n\nexport {IRequestParams, IHTTProuteMethod}\n\n/**\n * @category Core extendable objects\n */\nexport default class Controller extends RWSService {\n    private _hasError: boolean;\n\n    constructor() {\n        super();        \n    }\n\n    callMethod(methodName: string): (params: IRequestParams<any>) => any\n    {\n        return (params: IRequestParams<any>) => {                            \n            if((!(this as any)[methodName])){\n                const error = new Error404(new Error('The method does not exist in controller.'), `${__filename}::${methodName}`);\n\n                return error;\n            }\n\n            try {              \n                return (this as any)[methodName](params);\n            }catch(e: Error | unknown){\n                const error = new Error500(e, `${__filename}::${methodName}`, params);\n                return error;\n            }\n        }\n    }\n\n    hasError(){\n        const hasError: boolean = this._hasError;\n        this._hasError = false;\n        return hasError;\n    }\n\n    flagError(){\n        this._hasError = true;\n    }\n}","import RWSError from './_error';\n\nexport default class Error404 extends RWSError{\n    name = '403 not authorized.';\n\n    constructor(baseError: Error | unknown, resourcePath: string, params: any = null){\n        super(403, baseError, params);\n\n        this.message = `RWS resource \"$${resourcePath}\" was not autorized for current user.`\n    }\n}","import RWSError from './_error';\n\nexport default class Error404 extends RWSError{\n    name = '404 Resource not found'\n\n    constructor(baseError: Error | unknown, resourcePath: string, params: any = null){\n        super(404, baseError, params);\n\n        this.message = `Resource \"${resourcePath}\" was not found`\n    }\n}","import RWSError from './_error';\n\nexport default class Error500 extends RWSError {\n    name = '500 internal server error'\n\n    constructor(baseError: Error | unknown, resourcePath: string, params: any = null){\n        super(500, baseError, params);\n\n        this.message = `RWS resource \"$${resourcePath}\" has internal error`\n    }\n}","export default class RWSError{\n    protected baseError: Error | unknown;\n    protected name: string;\n    protected message: string;\n    protected code: number;\n    protected stack?: string = null;\n\n    constructor(code: number, baseError: Error | any = null, params: any = null){        \n        if(!baseError){\n            baseError = new Error('Error code ' + code);\n        }\n\n        this.code = code;\n        this.baseError = baseError;\n        this.stack = baseError.stack;\n    }\n\n    printFullError(): void\n    {\n        console.error('[RWS Error]')\n        console.log(`[${this.name}] ${this.message}`);\n        console.log('Stack:', this.stack);\n        console.error('[/RWS Error]')\n    }\n\n    getMessage(): string\n    {\n        return this.message;\n    }\n\n    getCode(): number\n    {\n        return this.code;\n    }  \n    \n    getStackTraceString(): string\n    {\n        return this.stack;\n    }\n}","import Error404 from './Error404';\nimport Error403 from './Error403';\nimport Error500 from './Error500';\nimport RWSError from './_error';\n\nexport {\n    Error403, Error404, Error500, RWSError\n}","import path from 'path';\nimport { Socket } from 'socket.io';\n\nimport { RWSHTTPRoutingEntry, IPrefixedHTTProutes, IHTTProute, WsRoutes, ITheSocket } from './services/ServerService';\n\nimport init from './init';\nimport {SetupRWS} from './install';\n\nimport ITimeSeries from './models/interfaces/ITimeSeries';\nimport TimeSeriesModel from './models/types/TimeSeriesModel';\n\nimport ServerService from './services/ServerService';\nimport DBService from './services/DBService';\nimport AuthService from './services/AuthService';\nimport S3Service from './services/S3Service';\nimport ConsoleService from './services/ConsoleService';\nimport ProcessService from './services/ProcessService';\nimport LambdaService from './services/LambdaService';\nimport AWSService from './services/AWSService';\nimport EFSService from './services/EFSService';\nimport MD5Service from './services/MD5Service';\nimport TraversalService from './services/TraversalService';\nimport UtilsService from './services/UtilsService';\nimport VectorStoreService from './services/VectorStoreService';\nimport RWSPrompt, { ILLMChunk, IRWSPromptRequestExecutor, IRWSSinglePromptRequestExecutor, IRWSPromptStreamExecutor, IChainCallOutput, IRWSPromptJSON, ChainStreamType } from './models/prompts/_prompt';\nimport RWSConvo, { IConvoDebugXMLData, IEmbeddingsHandler, ISplitterParams } from './models/convo/ConvoLoader';\nimport RWSVectorStore from './models/convo/VectorStore';\nimport { InverseRelation, InverseTimeSeries, Relation, TrackType} from './models/annotations/index';\nimport { Route } from './routing/annotations/index';\nimport getAppConfig, { IAppConfig, AppConfigService } from './services/AppConfigService';\n\nimport { IContextToken } from './interfaces/IContextToken';\n\nconst RWSannotations = {\n    modelAnnotations: { InverseRelation, InverseTimeSeries, Relation, TrackType },\n    routingAnnotations: { Route }\n}\n\n\nimport TheCommand, {ICmdParams} from './commands/_command';\nimport Model, { IModel, TrackType as RWSTrackType } from './models/_model';\nimport Controller, { IRequestParams} from './controllers/_controller';\nimport TheService from './services/_service';\nimport TheSocket, { JSONMessage } from './sockets/_socket';\n\nimport RWSAppCommands from './commands/index';\nimport * as RWSTestSuite from './tests/index';\n\nimport * as RWSErrorCodes from './errors/index';\n\nexport {\n    init as serverInit,\n    SetupRWS,\n    getAppConfig,    \n    AppConfigService,\n\n    Controller as RWSController,\n    TheService as RWSService,\n    TheSocket as RWSSocket,\n    TheCommand as RWSCommand,\n    Model as RWSModel,\n    IModel as IRWSModel,\n\n    ServerService as RWSServer,\n    DBService,\n    AuthService,\n    S3Service,\n    ConsoleService,\n    LambdaService,\n    AWSService,\n    EFSService,\n    MD5Service,\n    TraversalService,\n    UtilsService,\n    VectorStoreService,\n\n    TimeSeriesModel,\n\n    WsRoutes,\n    IRequestParams,\n    ITheSocket,    \n    ITimeSeries,\n    IAppConfig,\n    IContextToken,\n            \n    Socket,      \n    ProcessService,    \n    RWSannotations,\n    JSONMessage as RWSJSONMessage,\n    ICmdParams,      \n    IHTTProute,\n    IPrefixedHTTProutes,\n    RWSHTTPRoutingEntry,\n    RWSAppCommands,\n    RWSTestSuite,  \n    \n    RWSVectorStore,\n    RWSConvo,\n    RWSPrompt,    \n    RWSErrorCodes,\n    ChainStreamType,\n\n    IRWSPromptRequestExecutor,\n    IRWSSinglePromptRequestExecutor,\n    IRWSPromptStreamExecutor,\n    IChainCallOutput,\n    IConvoDebugXMLData,\n    IEmbeddingsHandler,\n    IRWSPromptJSON,\n    ISplitterParams,\n    ILLMChunk\n}","\n\n\nimport IAppConfig from \"./interfaces/IAppConfig\";\nimport getConfigService, { AppConfigService } from \"./services/AppConfigService\";\nimport ServerService, { IInitOpts } from \"./services/ServerService\";\nimport ConsoleService from \"./services/ConsoleService\";\nimport UtilsService from \"./services/UtilsService\";\n\nimport fs from \"fs\";\nimport ProcessService from \"./services/ProcessService\";\n\n\nasync function init(cfg: IAppConfig, serverOptions: IInitOpts = {}, addToConfig: (configService: AppConfigService) => Promise<void> = null){    \n    const AppConfigService = getConfigService(cfg);\n    const port = await AppConfigService.get('port');\n    const ws_port = await AppConfigService.get('ws_port');\n    const wsRoutes = await AppConfigService.get('ws_routes');\n    const httpRoutes = await AppConfigService.get('http_routes');\n    const controler_list = await AppConfigService.get('controller_list');\n    const pub_dir = await AppConfigService.get('pub_dir');\n    const cors_domain = await AppConfigService.get('cors_domain');\n\n    const sslCert = AppConfigService.get('ssl_cert');\n    const sslKey = AppConfigService.get('ssl_key');      \n\n    if(addToConfig !== null){\n        await addToConfig(AppConfigService);\n    }\n\n    let https = true;\n\n    if(!sslCert || !sslKey){\n        https = false;\n    }\n\n    const executeDir: string = process.cwd();\n    const packageRootDir = UtilsService.findRootWorkspacePath(executeDir)\n    const moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\n    const moduleCfgFile = `${moduleCfgDir}/_rws_installed`;\n\n    if(!fs.existsSync(moduleCfgFile)){        \n        ConsoleService.log(ConsoleService.color().yellow('No config path generated for CLI. Trying to initialize with \"yarn rws init config/config\"'));\n        await ProcessService.runShellCommand('yarn rws init config/config');\n        UtilsService.setRWSVar('_rws_installed', 'OK');    \n    }\n\n    const theServer = await ServerService.initializeApp({...{        \n        wsRoutes: wsRoutes,\n        httpRoutes: httpRoutes,\n        controllerList: controler_list,\n        pub_dir: pub_dir,\n        domain: `http${(await AppConfigService.get('features')?.ssl ? 's' : '')}://${await AppConfigService.get('domain')}`,\n        cors_domain: cors_domain\n    },...serverOptions});\n\n    const wsStart = async () => {\n        return (await theServer.websocket.starter());\n    }\n\n    const httpStart = async () => {\n        return (await theServer.http.starter());\n    }\n\n    wsStart();\n    await httpStart();    \n}\n\nexport default init;\n","import getConfigService, { IAppConfig } from \"./services/AppConfigService\";\nimport Model, { IMetaOpts } from './models/_model';\nimport fs from 'fs';\nimport path from 'path';\nimport 'reflect-metadata';\nimport DBService from \"./services/DBService\";\nimport TimeSeriesModel from \"./models/types/TimeSeriesModel\";\nimport ProcessService from \"./services/ProcessService\";\nimport ConsoleService from \"./services/ConsoleService\";\nimport UtilsService from \"./services/UtilsService\";\n\nconst { log, warn, error, color } = ConsoleService;\n\nconst {runShellCommand} = ProcessService;\n\nfunction generateModelSections<T extends Model<T>>(constructor: new () => T): string {\n    let section = '';\n  \n    // Get the prototype of the model instance\n    const modelMetadatas: Record<string, {annotationType: string, metadata: any}> = Model.getModelAnnotations(constructor); // Pass the class constructor   \n    let embed = false;   \n    let modelName: string = (constructor as any)._collection;\n\n \n\n    // if(Model.isSubclass(constructor, EmbedModel)){\n    //   modelName = constructor.name;\n    //   embed = true;\n    //   throw new Error('Embed models are not supported');\n    // }\n\n    \n    section += `model ${modelName} {\\n`;\n\n    section += `\\tid String @map(\"_id\") @id @default(auto()) @db.ObjectId\\n`;     \n    \n    for (const key in modelMetadatas) {\n      const modelMetadata: IMetaOpts = modelMetadatas[key].metadata            \n      const requiredString = modelMetadata.required ? '' : '?';  \n      \n      const annotationType: string = modelMetadatas[key].annotationType;\n      \n      if(annotationType === 'Relation'){\n          section += `\\t${key} ${modelMetadata.relatedTo}${requiredString} @relation(fields: [${modelMetadata.relationField}], references: [${modelMetadata.relatedToField}])\\n`;      \n          section += `\\t${modelMetadata.relationField} String${requiredString} @db.ObjectId\\n`;\n      }else if (annotationType === 'InverseRelation'){        \n          section += `\\t${key} ${modelMetadata.inversionModel}[]`;\n      }else if (annotationType === 'InverseTimeSeries'){        \n          section += `\\t${key} String[] @db.ObjectId`;      \n      }else if (annotationType === 'TrackType'){        \n        const tags: string[] = modelMetadata.tags.map((item: string) => '@' + item);          \n          section += `\\t${key} ${toConfigCase(modelMetadata)}${requiredString} ${tags.join(' ')}\\n`;\n      }\n    }\n\n    section += `\\n}`;\n  \n  \n    return section;\n}\n\nfunction toConfigCase(modelType: any): string {\n  const type = modelType.type;\n  const input = type.name;  \n\n  if(input == 'Number'){\n    return 'Int';\n  }\n\n  if(input == 'Object'){\n    return 'Json';\n  }\n\n  if(input == 'Date'){\n    return 'DateTime';\n  }\n\n\n  const firstChar = input.charAt(0).toUpperCase();\n  const restOfString = input.slice(1);\n  return firstChar + restOfString;\n}\n\nasync function main(cfg: IAppConfig)\n{   \n  const AppConfigService = getConfigService(cfg);\n  const dbUrl = await AppConfigService.get('mongo_url');\n  const moduleDir = path.resolve(__dirname, '..', '..').replace('dist', '');\n  \n  const executionDir = path.resolve(process.cwd());\n\n  const dbType = 'mongodb';\n\n  let template: string = `generator client {\\n\n    provider = \"prisma-client-js\"\\n\n  }\\n\\n`;\n\n  template += `\\ndatasource db {\\n\n    provider = \"${dbType}\"\\n\n    url = env(\"DATABASE_URL\")\\n    \n  }\\n\\n`;\n\n  const usermodels = await AppConfigService.get('user_models');\n\n  usermodels.forEach((model: any) => {    \n    const modelSection = generateModelSections(model);\n\n    template += '\\n\\n' + modelSection;  \n    \n    if(Model.isSubclass(model, TimeSeriesModel)){      \n     \n      DBService.collectionExists(model._collection).then((exists: boolean) => {\n        if (exists){\n          return;\n        }\n\n        log(color().green('[RWS Init]') + ` creating TimeSeries type collection from ${model} model`);\n\n        DBService.createTimeSeriesCollection(model._collection);    \n      })\n    }\n  });\n\n  const schemaPath = path.join(moduleDir, 'prisma', 'schema.prisma');\n  fs.writeFileSync(schemaPath, template);  \n  process.env.DB_URL = dbUrl;\n  // Define the command you want to run\n  await ProcessService.runShellCommand('npx prisma generate --schema='+schemaPath);  \n\n  log(color().green('[RWS Init]') + ' prisma schema generated from ', schemaPath);\n\n  UtilsService.setRWSVar('_rws_installed', 'OK');\n\n  return;\n}\n\nconst SetupRWS = main;\n\nexport {SetupRWS, runShellCommand};\n\n","import {DBService, getAppConfig} from \"../index\";\n\nimport TrackType, {IMetaOpts} from \"./annotations/TrackType\";\ninterface IModel{\n    [key: string]: any;\n    id: string | null;\n    save: ()=>void;\n    getCollection: ()=>string | null;\n}\n\nclass Model<ChildClass> implements IModel{\n    [key: string]: any;\n    @TrackType(String)\n    id: string;\n    static _collection: string = null;\n\n    static _BANNED_KEYS = ['_collection'];\n\n    constructor(data?: any) {    \n        if(!this.getCollection()){\n            throw new Error('Model must have a collection defined');\n        \n        }\n\n        if(!data){\n            return;    \n        }\n  \n        if(!this.hasTimeSeries()){\n          this._fill(data);\n        }else{\n          throw new Error('Time Series not supported in synchronous constructor. Use `await Model.create(data)` static method to instantiate this model.');\n        }\n    }    \n\n    protected _fill(data: any): Model<ChildClass>{\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {   \n              \n              const meta = Reflect.getMetadata(`InverseTimeSeries:${key}`, (this as any).constructor.prototype);\n          \n              if(meta){\n                data[key] = {\n                  create: data[key]\n                }\n              }else{\n                this[key] = data[key];\n              }                          \n            }\n        }       \n        \n        return this;\n    }\n\n    public async _asyncFill(data: any): Promise<ChildClass>{\n      const collections_to_models: {[key: string]: any} = {};           \n      const timeSeriesIds: {[key: string] : {collection: string, hydrationField:string,ids: string[]}} = this.getTimeSeriesModelFields();\n      const _self: this = this;\n      this.loadModels().forEach((model) => {\n        collections_to_models[model.getCollection()] = model;      \n      });      \n\n      const seriesHydrationfields: string[] = [];      \n\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          if(seriesHydrationfields.includes(key)){\n            continue;\n          }                    \n\n          const timeSeriesMetaData = timeSeriesIds[key]  \n          \n          if(timeSeriesMetaData){\n            this[key] = data[key];\n            const seriesModel = collections_to_models[timeSeriesMetaData.collection];\n            \n            const dataModels = await seriesModel.findBy({\n              id: { in: data[key] }\n            });                        \n\n            seriesHydrationfields.push(timeSeriesMetaData.hydrationField);\n            \n            this[timeSeriesMetaData.hydrationField] = dataModels;\n          } else {\n            this[key] = data[key];            \n          }        \n\n        }        \n      }     \n\n      return this as any as ChildClass;\n    }\n\n    private getTimeSeriesModelFields()\n    {\n      const timeSeriesIds: {[key: string] : {collection: string, hydrationField:string, ids: string[]}} = {};\n\n      for (const key in this as any) {\n          if (this.hasOwnProperty(key)) {             \n          \n            const meta = Reflect.getMetadata(`InverseTimeSeries:${key}`, (this as any));            \n            if(meta){\n              if(!timeSeriesIds[key]){\n                timeSeriesIds[key] = {\n                  collection: meta.timeSeriesModel,\n                  hydrationField: meta.hydrationField,\n                  ids: this[key]\n                };\n              }\n            }                         \n          }\n      } \n\n      return timeSeriesIds;\n    }   \n\n    public toMongo(): any{\n       \n        let data: any = {};\n\n        const timeSeriesIds: {[key: string] : {collection: string, hydrationField:string, ids: string[]}} = this.getTimeSeriesModelFields();\n        const timeSeriesHydrationFields: string[] = []\n      \n        for (const key in (this as any)) {      \n            if(!this.isDbVariable(key)){\n              continue;\n            } \n\n            if (this.hasOwnProperty(key) && !((this as any).constructor._BANNED_KEYS || Model._BANNED_KEYS).includes(key) && !timeSeriesHydrationFields.includes(key)) {              \n              data[key] = this[key];\n            }\n\n            if(!!timeSeriesIds[key]){\n              data[key] = this[key];\n              timeSeriesHydrationFields.push(timeSeriesIds[key].hydrationField);              \n            }\n        }                \n\n        return data;\n    }   \n\n    getCollection(): string | null {\n        return (this as any).constructor._collection || this._collection;\n    }\n\n    static getCollection(): string | null {\n      return (this as any).constructor._collection || this._collection;\n  }\n\n\n  async save(): Promise<this> {\n    const data = this.toMongo();\n    let updatedModelData = data;\n  \n    if (this.id) {\n      this.preUpdate();\n\n      updatedModelData = await DBService.update(data, this.getCollection());\n\n      await this._asyncFill(updatedModelData);\n      this.postUpdate();\n    } else {\n      this.preCreate();      \n      \n      const timeSeriesModel = await import('./types/TimeSeriesModel');      \n      const isTimeSeries = this instanceof timeSeriesModel.default;\n\n      updatedModelData = await DBService.insert(data, this.getCollection(), isTimeSeries);      \n\n      await this._asyncFill(updatedModelData);   \n\n      this.postCreate();\n    }\n  \n    return this;\n  }\n\n    static getModelAnnotations<T extends object>(constructor: new () => T): Record<string, {annotationType: string, metadata: any}> {    \n      const annotationsData: Record<string, {annotationType: string, metadata: any}> = {};\n\n      const propertyKeys: string[] = Reflect.getMetadataKeys(constructor.prototype).map((item: string): string => {\n        return item.split(':')[1];\n      });\n      \n      propertyKeys.forEach(key => {\n        if(String(key) == 'id'){\n          return\n        }  \n\n        const annotations: string[] = ['TrackType', 'Relation', 'InverseRelation', 'InverseTimeSeries'];\n\n        annotations.forEach(annotation => {\n          const metadataKey = `${annotation}:${String(key)}`;\n        \n          const meta = Reflect.getMetadata(metadataKey, constructor.prototype);\n          \n          if (meta) {\n            annotationsData[String(key)] = {annotationType: annotation, metadata: meta};\n          }\n        });                 \n      });\n\n      return annotationsData;\n    }\n\n    public preUpdate(): void\n    {\n      return;\n    }\n\n    public postUpdate(): void\n    {\n      return;\n    }\n\n    public preCreate(): void\n    {\n      return;\n    }\n\n    public postCreate(): void\n    {\n      return;\n    }\n\n    public static isSubclass<T extends Model<T>, C extends new () => T>(constructor: C, baseClass: new () => T): boolean {\n      return baseClass.prototype.isPrototypeOf(constructor.prototype);\n    }\n\n    hasTimeSeries(): boolean \n    {\n      return Model.checkTimeSeries((this as any).constructor);\n    }\n\n    static checkTimeSeries(constructor: any): boolean\n    {            \n      const data = constructor.prototype as any;\n\n      for (const key in data) {\n\n        if (data.hasOwnProperty(key)) {   \n\n          if(Reflect.getMetadata(`InverseTimeSeries:${key}`, constructor.prototype)){\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    isDbVariable(variable: string): boolean \n    {\n      return Model.checkDbVariable((this as any).constructor, variable);\n    }\n\n    static checkDbVariable(constructor: any, variable: string): boolean\n    {                   \n\n      if(variable === 'id'){\n        return true;\n      }\n\n      const data = constructor.prototype as any;\n      const dbAnnotations = Model.getModelAnnotations(constructor);\n      type AnnotationType = { annotationType: string, key: string };\n\n      const dbProperties: string[] = Object.keys(dbAnnotations).map((key: string): AnnotationType => {return {...dbAnnotations[key], key}}).filter((element: AnnotationType) => element.annotationType === 'TrackType' ).map((element: AnnotationType) => element.key);\n\n      return dbProperties.includes(variable);\n    }\n\n    sanitizeDBData(data: any): any\n    {\n      const dataKeys = Object.keys(data);\n      const sanitizedData: {[key: string]: any} = {};\n\n      for (const key of dataKeys){\n        if(this.isDbVariable(key)){\n          sanitizedData[key] = data[key];\n        }\n      }\n\n      return sanitizedData;\n    }\n\n    public static async watchCollection<ChildClass extends Model<ChildClass>>(\n      this: { new(): ChildClass; _collection: string }, \n      preRun: () => void\n    ){\n      const collection = Reflect.get(this, '_collection');\n      return await DBService.watchCollection(collection, preRun);\n    }\n\n    public static async findOneBy<ChildClass extends Model<ChildClass>>(\n      this: { new(): ChildClass; _collection: string },\n      conditions: any\n    ): Promise<ChildClass | null> {\n      const collection = Reflect.get(this, '_collection');\n      const dbData = await DBService.findOneBy(collection, conditions);\n    \n      if (dbData) {\n        const inst: ChildClass = new (this as { new(): ChildClass })();\n        return await inst._asyncFill(dbData);\n      }\n    \n      return null;\n    }\n\n    public static async delete<ChildClass extends Model<ChildClass>>(\n      this: { new(): ChildClass; _collection: string },\n      conditions: any\n    ): Promise<void> {\n      const collection = Reflect.get(this, '_collection');\n      return await DBService.delete(collection, conditions);\n    }\n\n    public async delete<ChildClass extends Model<ChildClass>>(): Promise<void> {\n      const collection = Reflect.get(this, '_collection');\n      return await DBService.delete(collection, {\n        id: this.id\n      });  \n    }    \n    \n    public static async findBy<ChildClass extends Model<ChildClass>>(\n      this: { new(): ChildClass; _collection: string },    \n      conditions: any,\n      fields: string[] | null = null\n    ): Promise<ChildClass[]> {\n      const collection = Reflect.get(this, '_collection');\n      const dbData = await DBService.findBy(collection, conditions, fields);\n    \n      if (dbData.length) {\n        const instanced: ChildClass[] = [];\n    \n        for (const data of dbData) {\n          const inst: ChildClass = new (this as { new(): ChildClass })();\n          instanced.push((await inst._asyncFill(data)) as ChildClass);\n        }\n    \n        return instanced;\n      }\n    \n      return [];\n    }\n    \n\n    static async create<T extends Model<T>>(this: new () => T, data: any): Promise<T> {\n      const newModel = new this();\n\n      const sanitizedData = newModel.sanitizeDBData(data);\n     \n      await newModel._asyncFill(sanitizedData);\n    \n      return newModel;\n    }\n\n    private loadModels(): Model<any>[]\n    {\n      const AppConfigService = getAppConfig();\n  \n      return AppConfigService.get('user_models');\n    }\n}\n\n\n\nexport default Model;\nexport { IModel, TrackType, IMetaOpts };","import 'reflect-metadata';\n\ninterface InverseRelationOpts{\n    required?: boolean,\n    relationField?: string\n    relatedToField?: string,\n    relatedTo?: string,\n    inversionModel?: string,\n  }\n  \n  function InverseRelation(inversionModel: string) {\n  \n    let metaOpts: InverseRelationOpts = {\n      inversionModel: inversionModel\n    };\n\n  \n    return function(target: any, key: string) {          \n      Reflect.defineMetadata(`InverseRelation:${key}`, metaOpts, target);\n    };\n  }\n\n  export default InverseRelation;\n  export {InverseRelationOpts}","import 'reflect-metadata';\n\ninterface InverseTimeSeriesOpts{\n    timeSeriesModel: string\n    hydrationField: string\n  }\n  \nfunction InverseTimeSeries(timeSeriesModel: string, hydrationField: string) {\n\n  let metaOpts: InverseTimeSeriesOpts = {\n    timeSeriesModel: timeSeriesModel,\n    hydrationField: hydrationField\n  };\n\n\n  return function(target: any, key: string) {          \n    Reflect.defineMetadata(`InverseTimeSeries:${key}`, metaOpts, target);\n  };\n}\n\n  export default InverseTimeSeries;\n  export {InverseTimeSeriesOpts}","import 'reflect-metadata';\n\ninterface IRelationOpts{\n    required?: boolean,\n    relationField?: string\n    relatedToField?: string,\n    relatedTo?: string,\n    inversionModel?: string,\n  }\n  \n  function Relation(relatedTo: string, required: boolean = false, relationField: string = null,  relatedToField: string = 'id') {\n  \n    let metaOpts: IRelationOpts = {required};\n  \n    metaOpts.relatedToField = relatedToField;      \n    metaOpts.relatedTo = relatedTo;\n\n    if(!relationField){\n      metaOpts.relationField = relatedTo + '_id';\n    } else{\n      metaOpts.relationField = relationField;\n    }  \n  \n    return function(target: any, key: string) {          \n      Reflect.defineMetadata(`Relation:${key}`, metaOpts, target);\n    };\n  }\n\n  export default Relation;\n  export {IRelationOpts}","import 'reflect-metadata';\n\ninterface ITrackerOpts{\n    required?: boolean,\n    relationField?: string\n    relatedToField?: string,\n    relatedTo?: string,\n    inversionModel?: string,\n  }\n  \n  interface IMetaOpts extends ITrackerOpts{\n    type: any,\n    tags: string[]\n  }\n  \n  function TrackType(type: any, opts: ITrackerOpts = null, tags: string[] = []) {\n    if(!opts){\n      opts = {\n        required: false\n      };\n    }\n  \n    const required = opts.required;\n  \n    let metaOpts: IMetaOpts = {type, tags, required};\n  \n    if(opts.relatedToField && opts.relatedTo){\n      metaOpts.relatedToField = opts.relatedToField;      \n      metaOpts.relatedTo = opts.relatedTo;\n\n      if(!opts.relationField){\n        metaOpts.relationField = opts.relatedTo + '_id';\n      } else{\n        metaOpts.relationField = opts.relationField;\n      }\n    }     \n  \n    if(opts.inversionModel){\n      metaOpts.inversionModel = opts.inversionModel;  \n    }\n  \n    const resolvedType = typeof type === 'function' ? type() : type;\n   \n    \n    if(!!type._collection){    \n      metaOpts.type = (type as any);\n    }\n  \n    return function(target: any, key: string) {          \n      Reflect.defineMetadata(`TrackType:${key}`, metaOpts, target);\n    };\n  }\n\n  export default TrackType;\n  export {IMetaOpts, ITrackerOpts}","import InverseRelation from \"./InverseRelation\";\nimport Relation from \"./Relation\";\nimport TrackType from \"./TrackType\";\nimport InverseTimeSeries from \"./InverseTimeSeries\";\n\nexport {\n    InverseRelation, Relation, TrackType, InverseTimeSeries\n}","import { TextLoader } from \"langchain/document_loaders/fs/text\";\nimport { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { RunnableConfig, Runnable } from \"@langchain/core/runnables\";\nimport { BaseMessage } from \"@langchain/core/messages\";\nimport { BaseLanguageModelInput } from \"@langchain/core/language_models/base\";\nimport VectorStoreService from '../../services/VectorStoreService';\nimport ConsoleService from \"../../services/ConsoleService\";\nimport RWSVectorStore, { VectorDocType } from '../convo/VectorStore';\nimport { Document } from \"langchain/document\";\nimport { v4 as uuid } from 'uuid';\nimport getAppConfig from '../../services/AppConfigService';\nimport { BaseChain, ConversationChain } from \"langchain/chains\";\nimport RWSPrompt, { IRWSPromptJSON, ILLMChunk } from \"../prompts/_prompt\";\n\nimport { Error500 } from \"../../errors\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\n\nimport xml2js from 'xml2js'\nimport fs from \"fs\";\nimport path from \"path\";\n\ninterface ISplitterParams {\n    chunkSize: number\n    chunkOverlap: number\n    separators: string[]\n}\n\nconst logConvo = (txt: string) => {\n    ConsoleService.rwsLog(ConsoleService.color().blueBright(txt));\n}\n\ninterface IBaseLangchainHyperParams {\n    temperature: number;\n    topK: number;\n    topP: number;\n    maxTokens:number;\n}\n\ninterface IConvoDebugXMLData {\n    conversation: {\n        $ : {\n            id: string\n            [key: string]: string\n        },\n        message: IRWSPromptJSON[]        \n    }\n}\n\ninterface IConvoDebugXMLOutput {\n    xml : IConvoDebugXMLData,\n    path: string\n}\n\ninterface IChainCallOutput {\n    text: string\n}\n\ninterface IEmbeddingsHandler<T extends object = {}> {\n    generateEmbeddings: (text?: string) => Promise<T>\n    storeEmbeddings: (embeddings: any, convoId: string) => Promise<void>\n}\n\nclass ConvoLoader<LLMChat extends Runnable<BaseLanguageModelInput, BaseMessage, RunnableConfig>> {\n    private loader: TextLoader;\n    private docSplitter: RecursiveCharacterTextSplitter;    \n\n    private embeddings: IEmbeddingsHandler<any>;\n\n    private docs: Document[] = [];\n    private _initiated = false;\n    private store: RWSVectorStore;\n    private convo_id: string;    \n    private llmChain: BaseChain;\n    private llmChat: LLMChat;\n    private chatConstructor: new (config: any) => LLMChat;\n    private thePrompt: RWSPrompt;\n\n    public _baseSplitterParams: ISplitterParams;\n    \n    constructor(chatConstructor: new (config: any) => LLMChat, embeddings: IEmbeddingsHandler, convoId: string | null = null, baseSplitterParams: ISplitterParams = {\n        chunkSize:400, chunkOverlap:80, separators: [\"/n/n\",\".\"]\n    }){\n        this.embeddings = embeddings;\n        \n        if(convoId === null){\n            this.convo_id = ConvoLoader.uuid();\n        } else {\n            this.convo_id = convoId;\n        }                        \n\n        this.chatConstructor = chatConstructor;    \n        this._baseSplitterParams = baseSplitterParams;   \n    }\n\n    static uuid(): string\n    {\n        return uuid();\n    }\n\n\n    async splitDocs(filePath: string, params: ISplitterParams)\n    {\n        const splitDir = ConvoLoader.debugSplitDir(this.getId());\n\n        if(!fs.existsSync(splitDir)){\n            console.log(`Split dir ${ConsoleService.color().magentaBright(splitDir)} doesn't exist. Splitting docs...`)\n            this.loader = new TextLoader(filePath);\n\n            this.docSplitter = new RecursiveCharacterTextSplitter({\n                chunkSize: params.chunkSize, // The size of the chunk that should be split.\n                chunkOverlap: params.chunkOverlap, // Adding overalap so that if a text is broken inbetween, next document may have part of the previous document \n                separators: params.separators // In this case we are assuming that /n/n would mean one whole sentence. In case there is no nearing /n/n then \".\" will be used instead. This can be anything that helps derive a complete sentence .\n            });\n\n            fs.mkdirSync(splitDir, { recursive: true });\n            \n            const orgDocs = await this.loader.load();\n            const splitDocs = await this.docSplitter.splitDocuments(orgDocs);\n\n            const avgCharCountPre = this.avgDocLength(orgDocs);\n            const avgCharCountPost = this.avgDocLength(splitDocs);\n\n            logConvo(`Average length among ${orgDocs.length} documents loaded is ${avgCharCountPre} characters.`);\n            logConvo(`After the split we have ${splitDocs.length} documents more than the original ${orgDocs.length}.`);\n            logConvo(`Average length among ${orgDocs.length} documents (after split) is ${avgCharCountPost} characters.`);\n\n            this.docs = splitDocs;            \n\n            let i = 0;\n            this.docs.forEach((doc: Document) => {\n                fs.writeFileSync(this.debugSplitFile(i), doc.pageContent);\n                i++;\n            });\n        }else{\n            const splitFiles = fs.readdirSync(splitDir);\n            \n            for(const filePath of splitFiles) {\n                const txt = fs.readFileSync(splitDir + '/' + filePath, 'utf-8');\n                this.docs.push(new Document({ pageContent: txt }));              \n            };\n        }\n        \n        this.store = await VectorStoreService.createStore(this.docs, await this.embeddings.generateEmbeddings());\n    }\n\n    getId(): string {\n        return this.convo_id;\n    }\n\n    getDocs(): VectorDocType\n    {\n        return this.docs;\n    }\n    getStore(): RWSVectorStore\n    {\n        return this.store;\n    }\n\n    isInitiated(): boolean \n    {\n        return this._initiated;\n    }\n\n    setPrompt(prompt: RWSPrompt): ConvoLoader<LLMChat>\n    {\n        this.thePrompt = prompt;        \n\n        this.llmChat = new this.chatConstructor({\n            streaming: true,\n            region: getAppConfig().get('aws_bedrock_region'),  \n            credentials: {  \n              accessKeyId: getAppConfig().get('aws_access_key'),  \n              secretAccessKey: getAppConfig().get('aws_secret_key'),  \n            },  \n            model: \"anthropic.claude-v2\",            \n            maxTokens: prompt.getHyperParameter<number>('max_tokens_to_sample'),\n            temperature: prompt.getHyperParameter<number>('temperature'),\n            modelKwargs: {\n                top_p: prompt.getHyperParameter<number>('top_p'),\n                top_k: prompt.getHyperParameter<number>('top_k'),\n            }\n        });        \n\n        return this;\n    }\n\n    getChat(): LLMChat\n    {\n        return this.llmChat;\n    }\n\n    private avgDocLength = (documents: Document[]): number => {\n        return documents.reduce((sum, doc: Document) => sum + doc.pageContent.length, 0) / documents.length;\n    };\n\n    async call(values: ChainValues, cfg: Partial<RunnableConfig>, debugCallback: (debugData: IConvoDebugXMLData) => Promise<IConvoDebugXMLData> = null): Promise<RWSPrompt>\n    {   \n        const output = await (this.chain()).invoke(values, cfg) as IChainCallOutput;        \n        this.thePrompt.listen(output.text)        \n\n        await this.debugCall(debugCallback);\n\n        return this.thePrompt;\n    }\n\n    async *callStreamGenerator(\n        this: ConvoLoader<LLMChat>, \n        values: ChainValues, \n        cfg: Partial<RunnableConfig>,     \n        debugCallback: (debugData: IConvoDebugXMLData) => Promise<IConvoDebugXMLData> = null\n    ): AsyncGenerator<string>\n    {           \n        // const _self = this;\n        // const chain = this.chain() as ConversationChain;  \n        // console.log('call stream');      \n        // const stream = await chain.call(values, [{\n        //         handleLLMNewToken(token: string) {\n        //             yield token;\n        //         }\n        //     }\n        // ]);\n        \n        // console.log('got stream');\n\n\n\n        // Listen to the stream and yield data chunks as they come\n        // for await (const chunk of stream) {                  \n        //     yield chunk.response;\n        // }\n    }   \n\n    async callStream(values: ChainValues, callback: (streamChunk: ILLMChunk) => void, end: () => void = () => {}, cfg: Partial<RunnableConfig> = {}, debugCallback?: (debugData: IConvoDebugXMLData) => Promise<IConvoDebugXMLData>): Promise<RWSPrompt>\n    {\n        const _self = this;   \n        const callGenerator = this.callStreamGenerator({query: values.query}, cfg, debugCallback);        \n\n        await this.chain().invoke(values, { callbacks: [{\n                handleLLMNewToken(token: string) {\n                    callback({\n                        content: token,\n                        status: 'rws_streaming'\n                    });\n\n                    _self.thePrompt.listen(token, true);\n                }\n            }\n        ]});\n\n        end();\n\n        this.debugCall(debugCallback);\n\n        return this.thePrompt;\n    };\n\n    async similaritySearch(query: string, splitCount: number): Promise<string>\n    {\n        console.log('Store is ready. Searching for embedds...');            \n        const texts = await this.getStore().getFaiss().similaritySearchWithScore(`${query}`, splitCount);\n        console.log('Found best parts: ' + texts.length);\n        return texts.map(([doc, score]: [any, number]) => `${doc[\"pageContent\"]}`).join('\\n\\n');    \n    }\n    \n    private async debugCall(debugCallback: (debugData: IConvoDebugXMLData) => Promise<IConvoDebugXMLData> = null)\n    {\n        try {\n        const debug = this.initDebugFile();\n\n        let callData: IConvoDebugXMLData = debug.xml;\n\n        callData.conversation.message.push(this.thePrompt.toJSON());\n\n        if(debugCallback){\n            callData = await debugCallback(callData);\n        }\n\n        this.debugSave(callData);\n        \n        }catch(error: Error | unknown){\n            console.log(error);\n        }\n    }\n\n    chain(): BaseChain\n    {        \n        if(this.llmChain){\n            return this.llmChain;\n        }\n\n        if(!this.thePrompt){\n            throw new Error500(new Error('No prompt initialized for conversation'), __filename);\n        }        \n\n        const chainParams: { prompt: PromptTemplate, values?: ChainValues } = {            \n            prompt: this.thePrompt.getMultiTemplate()\n        };      \n\n        this.createChain(chainParams);\n\n        return this.llmChain;\n    }\n\n    private async createChain(input: { prompt: PromptTemplate, values?: ChainValues }): Promise<BaseChain>\n    {\n        this.llmChain = new ConversationChain({\n            llm: this.llmChat,\n            prompt: input.prompt,              \n        });\n\n        return this.llmChain;\n    }\n\n    async waitForInit(): Promise<ConvoLoader<LLMChat> | null>\n    {\n        const _self = this;\n        return new Promise((resolve, reject)=>{\n            let i = 0;\n\n            const interval: NodeJS.Timeout = setInterval(() => {\n                if(this.isInitiated()){\n                    clearInterval(interval);\n                    resolve(_self);\n                }\n\n                if(i>9){\n                    clearInterval(interval);\n                    reject(null)\n                }\n\n                i++;\n            }, 300);            \n        })\n    }  \n\n    private parseXML(xml: string, callback: (err: Error, result: any) => void): xml2js.Parser\n    {\n        const parser = new xml2js.Parser();        \n\n        parser.parseString(xml, callback);\n        return parser;\n    }\n\n    static debugConvoDir(id: string){\n        return path.resolve(process.cwd(), 'debug', 'conversations', id);\n    }\n\n    static debugSplitDir(id: string){\n        return path.resolve(process.cwd(), 'debug', 'conversations', id, 'split');\n    }\n    \n    public debugConvoFile(){\n        return `${ConvoLoader.debugConvoDir(this.getId())}/conversation.xml`\n    }    \n\n    public debugSplitFile(i: number){\n        return `${ConvoLoader.debugSplitDir(this.getId())}/${i}.splitfile`\n    }    \n\n    private initDebugFile(): IConvoDebugXMLOutput\n    {\n        let xmlContent: string;\n        let debugXML: IConvoDebugXMLData = null;\n\n        const convoDir = ConvoLoader.debugConvoDir(this.getId());\n\n        if(!fs.existsSync(convoDir)){\n            fs.mkdirSync(convoDir, { recursive: true });\n        }\n\n        const convoFilePath = this.debugConvoFile();\n\n        if(!fs.existsSync(convoFilePath)){\n            xmlContent = `<conversation id=\"conversation\"></conversation>`;\n\n            fs.writeFileSync(convoFilePath, xmlContent);\n        }else{\n            xmlContent = fs.readFileSync(convoFilePath, 'utf-8');\n        }\n\n        this.parseXML(xmlContent, (error: Error, result) => {            \n            debugXML = result;\n        });\n\n        if(!debugXML.conversation.message){\n            debugXML.conversation.message = [];\n        }\n\n        return { xml: debugXML, path: convoFilePath };\n    }\n\n    private debugSave(xml: IConvoDebugXMLData): void\n    {        \n        const builder = new xml2js.Builder();\n        fs.writeFileSync(this.debugConvoFile(), builder.buildObject(xml), 'utf-8')\n    }\n\n}\n\nexport default ConvoLoader;\nexport { IChainCallOutput, IConvoDebugXMLData, IEmbeddingsHandler, ISplitterParams }","import { v4 as uuid } from 'uuid';\nimport { FaissStore } from \"@langchain/community/vectorstores/faiss\";\nimport { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { Document } from \"@langchain/core/documents\";\n\ntype VectorDocType = Document<Record<string, any>>[];\n\nexport default class RWSVectorStore \n{\n    private faiss: FaissStore;\n    private docs: VectorDocType\n    private embeddings: EmbeddingsInterface;\n\n    constructor(docs: VectorDocType, embeddings: EmbeddingsInterface){\n        this.docs = docs;\n        this.embeddings = embeddings;\n    }\n\n    async init(): Promise<RWSVectorStore>\n    {\n        this.faiss = await FaissStore.fromDocuments(this.docs, this.embeddings);\n\n        return this;\n    }\n\n    getFaiss(): FaissStore\n    {\n        return this.faiss;\n    }\n}\n\nexport {\n    VectorDocType\n}","import { Readable } from 'stream';\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport ConvoLoader, { IChainCallOutput } from '../convo/ConvoLoader';\nimport { SimpleChatModel } from \"@langchain/core/language_models/chat_models\";\nimport type { BaseLanguageModelInterface } from \"@langchain/core/language_models/base\";\nimport { IterableReadableStream } from \"@langchain/core/utils/stream\";\nimport { ChainValues } from \"@langchain/core/utils/types\";\nimport { Document } from \"langchain/document\";\n\nimport { IContextToken } from '../../interfaces/IContextToken';\n\ninterface IPromptHyperParameters {\n    temperature: number,\n    top_k?: number,\n    top_p?: number,\n    [key: string]: number\n}\n\ninterface ILLMChunk {\n    content: string\n    status: string\n }\n\ninterface IPromptParams {\n    hyperParameters?: IPromptHyperParameters;\n    input?: string;\n    modelId: string;\n    modelType: string;\n}\n\ninterface IPromptEnchantment {\n    enhancementId: string,\n    enhancementName: string,\n    enhancementParams: any,\n    input: string\n    output: string\n}\n\ntype IPromptSender = (prompt: RWSPrompt) => Promise<void>;\n\ninterface IRWSPromptRequestExecutor {\n    promptRequest: (prompt: RWSPrompt, contextToken?: IContextToken | null, intruderPrompt?: string | null, debugVars?: any) => Promise<RWSPrompt>\n}\n\n\ninterface IRWSSinglePromptRequestExecutor {\n    singlePromptRequest: (prompt: RWSPrompt, contextToken?: IContextToken | null, intruderPrompt?: string | null, debugVars?: any) => Promise<RWSPrompt>\n}\n\n\ninterface IRWSPromptStreamExecutor {\n    promptStream: (prompt: RWSPrompt, read: (chunk: ILLMChunk) => void, end: () => void, debugVars?: any) => Promise<RWSPrompt>\n}\n\ninterface IRWSPromptJSON {\n\n    input: string;\n    enhancedInput: IPromptEnchantment[];\n    sentInput: string;\n    originalInput: string;\n    output: string;\n    modelId: string;\n    modelType: string;\n    multiTemplate: PromptTemplate;\n    convo: { id: string };\n    hyperParameters: IPromptHyperParameters;\n    created_at: string;\n    varStorage: any;\n}\n\ntype ChainStreamType = AsyncGenerator<IterableReadableStream<ChainValues>>;\n\nclass RWSPrompt {\n    public _stream: ChainStreamType;\n    private input: string;\n    private enhancedInput: IPromptEnchantment[];\n    private sentInput: string;\n    private originalInput: string;\n    private output: string = '';\n    private modelId: string;\n    private modelType: string;\n    private multiTemplate: PromptTemplate;\n    private convo: ConvoLoader<any>;\n    private hyperParameters: IPromptHyperParameters;\n    private created_at: Date;\n\n    private varStorage: any = {};\n\n    private onStream = (chunk: string) => {\n\n    }\n\n    constructor(params: IPromptParams){\n        this.input = params.input;\n        this.originalInput = params.input;\n        this.hyperParameters = params.hyperParameters;\n        this.modelId = params.modelId;\n        this.modelType = params.modelType;\n\n        this.created_at = new Date();\n    }\n\n    listen(source: string, stream: boolean = true): RWSPrompt\n    {              \n        this.output = '';\n\n        if (!stream) {\n            this.output = source;\n        } else {           \n           this.output += source;\n           this.onStream(source);            \n        }\n        \n        return this;\n    }   \n\n    setStreamCallback(callback: (chunk: string) => void): void\n    {\n        this.onStream = callback;\n    }\n\n    addEnchantment(enchantment: IPromptEnchantment): void\n    {\n        this.enhancedInput.push(enchantment);\n        this.input = enchantment.input;        \n    }\n\n    getEnchantedInput(): string | null\n    {\n        return this.enhancedInput[this.enhancedInput.length - 1].output;\n    }\n\n    getModelId(): string\n    {\n        return this.modelId;\n    }\n\n    readSentInput(): string\n    {\n        return this.sentInput;\n    }\n\n    readInput(): string\n    {\n        return this.input;\n    }\n\n    \n    readBaseInput(): string\n    {\n        return this.originalInput;\n    }    \n\n    setBaseInput(input: string): RWSPrompt\n    {\n        this.originalInput = input;\n        \n        return this;\n    }\n\n    injestOutput(content: string): RWSPrompt\n    {\n        this.output = content;\n\n        return this;\n    }\n\n    readOutput(): string\n    {\n        return this.output;\n    }\n\n    getHyperParameters<T extends IPromptHyperParameters>(base: any = null): T\n    {        \n        if(base){\n            this.hyperParameters = {...base, ...this.hyperParameters};\n        }\n\n        return this.hyperParameters as T;\n    }\n\n    getHyperParameter<T>(key: keyof IPromptHyperParameters): T\n    {        \n        if(!this.hyperParameters[key]){\n            return null;\n        }\n\n        return this.hyperParameters[key] as T;\n    }\n\n    setHyperParameter(key: string, value: any): RWSPrompt\n    {        \n        this.hyperParameters[key] = value;\n        \n        return this;\n    }\n    \n    setHyperParameters(value: any): RWSPrompt\n    {        \n        this.hyperParameters = value;\n        \n        return this;\n    }\n\n    setMultiTemplate(template: PromptTemplate): RWSPrompt\n    {\n        this.multiTemplate = template\n        return this;\n    }\n\n    getMultiTemplate(): PromptTemplate\n    {\n        return this.multiTemplate;\n    }\n\n    setConvo(convo: ConvoLoader<SimpleChatModel>): RWSPrompt\n    {\n        this.convo = convo.setPrompt(this)        \n        \n        return this;\n    }\n\n    getConvo<T extends SimpleChatModel>(): ConvoLoader<T>\n    {\n        return this.convo;\n    }\n\n    replacePromptVar(key: string, val: string)\n    {\n\n    }\n\n    getModelMetadata(): [string, string]\n    {\n        return [this.modelType, this.modelId];\n    }\n\n    async requestWith(executor: IRWSPromptRequestExecutor, intruderPrompt: string = null, debugVars: any = {}): Promise<void>\n    {\n        this.sentInput = this.input;\n        const returnedRWS = await executor.promptRequest(this, null, intruderPrompt, debugVars);\n        this.output = returnedRWS.readOutput()        \n    }\n\n    async singleRequestWith(executor: IRWSSinglePromptRequestExecutor, intruderPrompt: string = null): Promise<void>\n    {        \n        await executor.singlePromptRequest(this, null, intruderPrompt);\n        this.sentInput = this.input;\n    }\n\n    async streamWith(executor: IRWSPromptStreamExecutor, read: (chunk: ILLMChunk) => void, end: () => void = () => {}, debugVars: any = {}): Promise<RWSPrompt>\n    {        \n        return executor.promptStream(this, read, end, debugVars);\n    }\n\n    setInput(content: string): RWSPrompt\n    {\n        this.input = content;\n        return this;\n    }\n\n    getVar<T>(key: string): T\n    {\n        return Object.keys(this.varStorage).includes(key) ? this.varStorage[key] : null;\n    }\n\n    setVar<T>(key: string, val: T): RWSPrompt {\n        this.varStorage[key] = val;\n\n        return this;\n    } \n\n    async _oldreadStream(stream: Readable, react: (chunk: string) => void): Promise<void>    \n    {        \n        let first = true;\n        const chunks: string[] = []; // Replace 'any' with the actual type of your chunks\n       \n        for await (const event of stream) {            \n            // Assuming 'event' has a specific structure. Adjust according to actual event structure.\n            if ('chunk' in event && event.chunk.bytes) {\n                const chunk = JSON.parse(Buffer.from(event.chunk.bytes).toString(\"utf-8\"));\n                if(first){\n                    console.log('chunk', chunk);\n                    first = false;\n                }\n\n                react(chunk.completion);\n\n                chunks.push(chunk.completion || chunk.generation ); // Use the actual property of 'chunk' you're interested in\n            } else if (\n                'internalServerException' in event ||\n                'modelStreamErrorException' in event ||\n                'throttlingException' in event ||\n                'validationException' in event\n            ) {\n                console.error(event);\n                break;\n            }            \n        }        \n    }\n\n    private async isChainStreamType(source: any): Promise<boolean> {\n        if (source && typeof source[Symbol.asyncIterator] === 'function') {\n            const asyncIterator = source[Symbol.asyncIterator]();\n            if (typeof asyncIterator.next === 'function' && \n                typeof asyncIterator.throw === 'function' && \n                typeof asyncIterator.return === 'function') {\n                try {\n                    // Optionally check if the next method yields a value of the expected type\n                    const { value, done } = await asyncIterator.next();\n                    return !done && value instanceof ReadableStream; // or whatever check makes sense for IterableReadableStream<ChainValues>\n                } catch (error) {\n                    // Handle or ignore error\n                }\n            }\n        }\n        return false;\n    }\n\n    async  readStreamAsText(readableStream: ReadableStream, callback: (txt: string) => void) {\n        const reader = readableStream.getReader();\n                \n        let readResult: any;\n\n        // Continuously read from the stream\n        while (!(readResult = await reader.read()).done) {\n            \n            if (readResult.value && readResult.value.response) {\n                // Emit each chunk text as it's read\n                callback(readResult.value.response);\n            }          \n        }\n        \n    }\n\n    toJSON(): IRWSPromptJSON\n    {\n        return {\n            input: this.input,            \n            enhancedInput: this.enhancedInput,\n            sentInput: this.sentInput,\n            originalInput: this.originalInput,\n            output: this.output,\n            modelId: this.modelId,\n            modelType: this.modelType,\n            multiTemplate: this.multiTemplate,\n            convo: {\n                id: this.convo.getId()\n            },\n            hyperParameters: this.hyperParameters,\n            varStorage: this.varStorage,\n            created_at: this.created_at.toISOString()\n        }\n    }\n}\n\nexport default RWSPrompt;\n\nexport { \n    IPromptSender, \n    IPromptEnchantment, \n    IPromptParams, \n    IPromptHyperParameters, \n    IRWSPromptRequestExecutor, \n    IRWSPromptStreamExecutor, \n    IRWSSinglePromptRequestExecutor, \n    IRWSPromptJSON, \n    IChainCallOutput, \n    ChainStreamType, \n    ILLMChunk \n}","import RWSModel, { TrackType as RWSTrackType } from \"../_model\";\n\nexport default class TimeSeriesModel<ChildClass> extends RWSModel<TimeSeriesModel<ChildClass>>{\n    @RWSTrackType(Number)\n    value: number;\n\n    @RWSTrackType(Date)\n    timestamp: Date;\n    \n    @RWSTrackType(Object)\n    params: any;\n\n    constructor(data?: any) {    \n        super(data);\n\n        if(!this.timestamp) {\n            this.timestamp = new Date();\n        }\n    }\n}","import 'reflect-metadata';\n\ntype RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE';\n\ninterface IHTTProuteParams {\n    responseType: string\n}\n\ninterface IHTTProuteOpts {\n    name: string;\n    method: RequestMethodType;\n    params?: IHTTProuteParams\n}\n  \nfunction Route(name: string, method: RequestMethodType = 'GET', params: IHTTProuteParams = { responseType: 'json' }) {\n    let metaOpts: IHTTProuteOpts = {name, method, params};\n\n    return function(target: any, key: string) {          \n        Reflect.defineMetadata(`Route:${key}`, metaOpts, target);\n    };\n}\n\nexport default Route;\nexport {IHTTProuteOpts, RequestMethodType, IHTTProuteParams}","import Route from './Route'\n\nexport {\n    Route\n}","import TheService from \"./_service\";\nimport AppConfigService from \"./AppConfigService\";\nimport ConsoleService from \"./ConsoleService\";\nimport AWS from 'aws-sdk';\nimport AWSService from \"./AWSService\";\nimport LambdaService from \"./LambdaService\";\nimport VPCService from \"./VPCService\";\n\nconst { log, error, rwsLog } = ConsoleService;\n\nclass APIGatewayService extends TheService {\n    private region: string;    \n\n    constructor() {\n        super();\n\n        this.region = AWSService.getRegion();\n    }\n\n    async findApiGateway(gatewayName: string): Promise<AWS.APIGateway.RestApi | null> {\n        let theApi: AWS.APIGateway.RestApi = null;\n        const apis = await AWSService.getAPIGateway().getRestApis().promise();\n        for (const api of apis.items) {\n            if (api.name === gatewayName + '-API') {\n                theApi = api;\n                break;\n            }\n        }\n\n        return theApi;\n    }\n\n    async deleteApiGateway(apiId: string): Promise<void> {        \n        await AWSService.getAPIGateway().deleteRestApi({ restApiId: apiId }).promise()        \n        error('Deleted API Gateway: '+ apiId);\n    }\n\n    async createApiGateway(gatewayName: string): Promise<string> {\n\n        const currentGateway: AWS.APIGateway.RestApi | null = await this.findApiGateway(gatewayName);\n\n        let restApiId: string = null;\n\n        if(!currentGateway){\n            const params: AWS.APIGateway.CreateRestApiRequest = {\n                name: gatewayName + '-API',\n                description: `API Gateway for ${gatewayName}`,\n                endpointConfiguration: {\n                    types: [\"REGIONAL\"]\n                }\n            };\n\n            try {\n                const response = await AWSService.getAPIGateway().createRestApi(params).promise();\n                restApiId =  response.id || null;\n            } catch (err) {\n                error('Error creating API Gateway:', err);\n                throw err;\n            }\n        } else {\n            restApiId = currentGateway.id;\n        }\n\n        return restApiId;\n    }\n\n    async createResource(restApiId: string, resourceLabel: string): Promise<AWS.APIGateway.Resource>\n    {\n        const resources = await AWSService.getAPIGateway().getResources({ restApiId: restApiId }).promise();\n        const rootResource = resources.items.find(r => r.path === '/');\n\n        // Create a new resource under root (if it doesn't exist)\n        let resource;\n        const resourceName = resourceLabel + '-ENDPOINT';\n\n        for (const res of resources.items) {\n            if (res.pathPart === resourceName) {\n                resource = res;\n                break;\n            }\n        }\n        if (!resource) {\n            resource = await AWSService.getAPIGateway().createResource({\n                restApiId: restApiId,\n                parentId: rootResource.id,\n                pathPart: resourceName\n            }).promise();\n        }\n\n        return resource;\n    }\n\n    async createMethod(restApiId:  string, resource: AWS.APIGateway.Resource, httpMethod: string = 'GET'): Promise<AWS.APIGateway.Method>\n    {        \n        return await AWSService.getAPIGateway().putMethod({\n            restApiId: restApiId,\n            resourceId: resource.id,\n            httpMethod: httpMethod,\n            authorizationType: \"NONE\", // Change this if you want to use an authorizer\n            apiKeyRequired: false\n        }).promise();\n    }    \n\n    async associateNATGatewayWithLambda(lambdaFunctionName: string): Promise<void> {\n        rwsLog(`Creating NAT Gateway for \"${lambdaFunctionName}\" lambda function`);\n\n        const lambdaConfig: AWS.Lambda.FunctionConfiguration = {...(await LambdaService.getLambdaFunction(lambdaFunctionName)).Configuration};\n        const privateSubnetId = lambdaConfig.VpcConfig.SubnetIds[0];\n    \n        // const publicSubnet = await VPCService.createPublicSubnet(lambdaConfig.VpcConfig.VpcId, 20);    \n        // const publicSubnetId = publicSubnet.Subnet.SubnetId;\n\n        try{            \n\n            const eip = await AWSService.getEC2().allocateAddress({}).promise();\n\n            if (!eip.AllocationId) {\n                throw new Error('Failed to allocate Elastic IP.');\n            }\n\n            const natGateway = await AWSService.getEC2().createNatGateway({                \n                SubnetId: privateSubnetId,\n                AllocationId: eip.AllocationId\n            }).promise();    \n\n\n            const routeTable = await VPCService.getDefaultRouteTable(lambdaConfig.VpcConfig.VpcId);\n\n            if(!routeTable){\n                throw new Error('No route table exists.');\n            }\n\n            await VPCService.waitForNatGatewayAvailable(natGateway.NatGateway.NatGatewayId);\n\n            await AWSService.getEC2().createRoute({\n                RouteTableId: routeTable.RouteTableId,\n                DestinationCidrBlock: '0.0.0.0/0',\n                NatGatewayId: natGateway.NatGateway.NatGatewayId\n            }).promise();\n\n            rwsLog('Lambda function associated with NAT Gateway successfully.');\n\n        } catch(e: Error | any){\n            error(e.code, e.message);\n        }       \n    }\n}\n\nexport default APIGatewayService.getSingleton();","import TheService from \"./_service\";\n\nimport AppConfigService from \"./AppConfigService\";\nimport ConsoleService from \"./ConsoleService\";\n\nimport AWS from 'aws-sdk';\n\n\nconst { log, warn, error, color, rwsLog } = ConsoleService;\n\n\nclass AWSService extends TheService {\n    private region: string;\n\n    private s3: AWS.S3;\n    private efs: AWS.EFS;\n    private lambda: AWS.Lambda;\n    private ec2: AWS.EC2;\n    private iam: AWS.IAM;\n    private apiGateway: AWS.APIGateway;\n    private cloudWatch: AWS.CloudWatchLogs;\n\n    constructor() {\n        super();        \n    }\n\n    _initApis(region?: string): void\n    {        \n        if(!region){\n            this.region = AppConfigService().get('aws_lambda_region');\n        }else{\n            this.region = region\n        }\n\n        // console.log(region,this.s3, this.region)\n\n        if(!this.s3 && this.region){\n            this.s3 = new AWS.S3({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        if (!this.apiGateway && this.region) {\n            this.apiGateway = new AWS.APIGateway({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        if(!this.iam && this.region){\n            this.iam = new AWS.IAM({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        if(!this.efs && this.region){\n            this.efs = new AWS.EFS({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        if(!this.ec2 && this.region){\n            this.ec2 = new AWS.EC2({\n                region: AppConfigService().get('aws_lambda_region'),\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        \n        if(!this.lambda && this.region){\n            this.lambda = new AWS.Lambda({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        if(!this.cloudWatch && this.region){\n            this.cloudWatch = new AWS.CloudWatchLogs({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n    }                 \n\n    async checkForRolePermissions(roleARN: string, permissions: string[]): Promise<{ OK: boolean, policies: string[] }>\n    {            \n        const {OK, policies} = await this.firePermissionCheck(roleARN, permissions);\n\n        return {\n            OK,\n            policies\n        };\n    }\n\n    private async firePermissionCheck(roleARN: string, permissions: string[])\n    {\n        const params = {\n            PolicySourceArn: roleARN, // Replace with your IAM role ARN\n            ActionNames: permissions\n        };\n\n        const policies: string[] = [];\n        let allowed = true;\n\n        try {\n            const data = await this.getIAM().simulatePrincipalPolicy(params).promise();\n            for (let result of data.EvaluationResults) {\n                if(result.EvalDecision !== 'allowed'){\n                    allowed = false;\n                    policies.push(result.EvalActionName);\n                }\n            }        \n        } catch (err) {\n            error('Permission check error:');\n            log(err);\n            allowed = false;\n        }\n\n        return {\n            OK: allowed,\n            policies: policies\n        };\n    }\n\n    getS3(region?: string): AWS.S3 \n    {        \n        this._initApis(region);\n\n        return this.s3;\n    }\n\n    getEC2(region?: string): AWS.EC2 \n    {\n        this._initApis(region);\n\n        return this.ec2;\n    }\n\n    getEFS(region?: string): AWS.EFS \n    {   \n        this._initApis(region);\n\n        return this.efs;\n    }\n\n    getLambda(region?: string): AWS.Lambda\n    {   \n        this._initApis(region);\n\n        return this.lambda;\n    }\n\n    getRegion(region?: string): string \n    {   \n        this._initApis(region);\n\n        return this.region;\n    }\n\n    getIAM(region?: string): AWS.IAM \n    {   \n        this._initApis(region);\n\n        return this.iam;\n    }  \n    \n    getAPIGateway(region?: string): AWS.APIGateway \n    {   \n        this._initApis(region);\n\n        return this.apiGateway;\n    }  \n\n    getCloudWatch(region?: string): AWS.CloudWatchLogs\n    {\n        this._initApis(region);\n\n        return this.cloudWatch;\n    }\n}\n\nexport default AWSService.getSingleton();","import TheService from \"./_service\";\nimport IAppConfig from \"../interfaces/IAppConfig\";\nimport fs from 'fs';\nimport AppCommands from '../commands/index';\n\nconst AppDefaultConfig: IAppConfig = {\n  mongo_url: null,\n  mongo_db: null,\n  port: null,        \n  ws_port: null,        \n  test_port: null,\n  test_ws_port: null,\n  domain: null,\n  ssl_cert: null,\n  ssl_key: null,\n  secret_key: null,\n  user_class: null,\n  user_models: [],\n  controller_list: [],\n  ws_routes: {},\n  http_routes: [],\n  commands: [],\n  aws_lambda_region: null,\n  aws_access_key: null,\n  aws_secret_key: null,\n  aws_lambda_role: null,\n  aws_lambda_bucket: null,\n  pub_dir: null\n};\n\nclass AppConfigService extends TheService{\n  private _custom_data: {\n    [key: string]: any\n  } = {};\n  \n  private data: IAppConfig; // Add type assertion here  \n  private cfgString: string;\n\n  constructor(cfg: IAppConfig) {\n    super();    \n    this.data = cfg;\n  }    \n\n  public get(key: keyof IAppConfig | string): any\n  {     \n    if(key in this.data && this.data[key as keyof IAppConfig] !== null){\n      return this.data[key as keyof IAppConfig];\n    }\n    \n    if(key in this._custom_data){\n      return this._custom_data[key];\n    }\n\n    return null;\n  }\n\n  public set(key: string, val: any): void\n  {\n    this._custom_data[key] = val;\n  }\n\n  public reloadConfig(cfgString: string): AppConfigService \n  {\n    const cfg: () => IAppConfig = (require(cfgString)).defaults; \n    this.data = cfg();\n\n    return this;\n  }\n\n  public static getConfigSingleton<T extends new (...args: any[]) => TheService>(this: T, cfg?: IAppConfig): AppConfigService\n  {\n    const className = this.name;\n    const instanceExists = TheService._instances[className];\n    \n    if (cfg) {                \n        TheService._instances[className] = new this(cfg);        \n    }else if(!instanceExists && !cfg){\n        TheService._instances[className] = new this(AppDefaultConfig);           \n    }\n\n    return TheService._instances[className] as AppConfigService;\n  }  \n}\n\nexport default (cfg?: IAppConfig): AppConfigService => AppConfigService.getConfigSingleton(cfg);\nexport { IAppConfig, AppConfigService }","import getConfigService from \"./AppConfigService\";\nimport jwt from 'jsonwebtoken';\n\n\n\nimport TheService from \"./_service\";\n\n/**\n * @notExported\n */\nclass AuthService extends TheService{\n    constructor() {\n        super();\n    }\n\n    async authorize<IUser>(token: string, constructor: new (data: any) => IUser ): Promise<IUser> {\n        const secretKey: string = getConfigService().get('secret_key');\n        \n        try {\n            return await new Promise((approve, reject) => {\n                jwt.verify(token, secretKey, (error, tokenData) => {\n                    if (error) {                        \n                        reject(error);\n                        return;\n                    }\n                \n                    approve(new constructor(tokenData))\n                });\n            })\n        }\n        catch(e: Error | any){           \n            throw e;\n        }\n    }\n}\n\nexport default AuthService.getSingleton();","import { DescribeLogStreamsRequest, GetLogEventsRequest, GetLogEventsResponse, OutputLogEvent } from 'aws-sdk/clients/cloudwatchlogs';\nimport AWSService from './AWSService';\nimport TheService from './_service';\nimport ConsoleService from './ConsoleService';\nconst { log, rwsLog, error, color } = ConsoleService;\n\nconst _MS = 1000;\n\nclass CloudWatchService extends TheService {\n  private nextForwardToken?: string;  \n\n  public async printLogsForLambda(lambdaFunctionName: string, startTime?: number, endTime?: number, terminateTimeout: number = 30 * _MS): Promise<{ core: NodeJS.Timeout}> {\n    const cloudWatchLogs = AWSService.getCloudWatch();\n    const logGroupName = `/aws/lambda/${lambdaFunctionName}`;  // Standard log group name format for Lambda\n\n    let logStreamName: string;\n    let logsTimeout: { core: NodeJS.Timeout } = { core: null };\n\n    // Get the latest log stream\n    const describeParams: DescribeLogStreamsRequest = {\n      logGroupName,\n      orderBy: 'LastEventTime',\n      descending: true,\n      limit: 1\n    };\n\n    try {\n      const describeResult = await cloudWatchLogs.describeLogStreams(describeParams).promise();\n      if (describeResult.logStreams && describeResult.logStreams[0]) {\n        logStreamName = describeResult.logStreams[0].logStreamName!;\n      } else {\n        error(\"No log streams found for the specified Lambda function.\");\n        return;\n      }\n    } catch (err) {\n      error(\"An error occurred while describing log streams:\", err);\n      return;\n    }\n\n    let terminateTimer: NodeJS.Timeout | null = null;\n\n    const getLogs = async (nextToken?: string): Promise<void> => {\n        // const lambdaDetails = await LambdaService.getLambdaFunction(lambdaFunctionName);     \n        const params: GetLogEventsRequest = {\n            logGroupName,\n            logStreamName,\n            startTime,\n            endTime,\n            nextToken,\n            limit: 100\n          };\n\n        try {\n            const data: GetLogEventsResponse = await cloudWatchLogs.getLogEvents(params).promise();\n            if (data.events && data.events.length > 0) {\n                this.printLogs(data.events);\n    \n                // Reset the termination timer since we've received new logs\n                if (terminateTimer !== null) {\n                    clearTimeout(terminateTimer);\n                }\n    \n                terminateTimer = setTimeout(() => {\n                    log(\"Terminating log fetch due to timeout.\");\n                    clearTimeout(terminateTimer!);\n                    return;\n                }, terminateTimeout);  // terminateTimeout is the time in milliseconds you want to wait\n            }\n    \n            this.nextForwardToken = data.nextForwardToken;\n    \n            // Recursive call to keep polling for new logs\n            logsTimeout.core = setTimeout(() => getLogs(this.nextForwardToken), 5000);  //\n        } catch (err) {\n            error(\"An error occurred while fetching logs:\", err);\n        }\n    };\n\n    getLogs();\n\n    return logsTimeout;\n  }\n\n  private printLogs(events: OutputLogEvent[]): void {\n    events.forEach(event => {\n      log(color().blue(`[AWS CloudWatch] `) + `{${new Date(event.timestamp!).toISOString()}} : ${event.message}`);\n    });\n  }\n}\n\nexport default CloudWatchService.getSingleton();","import TheService from \"./_service\";\nimport chalk, { Chalk } from 'chalk';\nimport pino, { Logger as PinoLogger } from 'pino';\nimport pinoPretty from 'pino-pretty'; // Import pino-pretty\n\ninterface IJSONColors {\n  [codeLement: string]: keyof Chalk\n}\n\nclass ConsoleService extends TheService {\n  private isEnabled: boolean = true;\n  private originalLogMethods?: any = null;\n\n  constructor() {\n    super();\n\n    this.log = this.log.bind(this);\n    this.error = this.error.bind(this);\n    this.warn = this.warn.bind(this);\n\n    this.isEnabled = true;\n    this.originalLogMethods = this.getOriginalLogFunctions();\n  }\n\n\n  color(): Chalk {\n    return chalk;\n  }\n\n  log(...obj: any[]): void {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const _self = this;\n\n    let typeBucket: any[] = [];\n    let lastType: string = null;\n\n    obj.forEach((elem: any, index: number) => {\n      const elemType = typeof elem;\n      const isLast: boolean = index == obj.length - 1;\n\n      if (((lastType === null && obj.length === 1) || (lastType !== null && lastType !== elemType)) || isLast) {\n        if (lastType === 'string') {\n          console.log(typeBucket.join(' '));\n        } else {\n\n          typeBucket.forEach((bucketElement) => {\n            _self.prettyPrintObject(bucketElement)\n          })\n        }\n\n        typeBucket = [];\n\n        if (isLast) {\n          if (elemType === 'string') {\n            console.log(elem);\n          } else {\n            _self.prettyPrintObject(elem)\n          }\n          return;\n        }\n      }\n\n      typeBucket.push(elem);\n\n      lastType = elemType; // Update the lastType for the next iteration\n    });\n  } \n\n\n  colorObject(obj: any): string {\n    const _JSON_COLORS: IJSONColors = {\n        'keys': 'green',\n        'objectValue': 'magenta',\n        'braces': 'blue',\n        'arrayBraces': 'yellow',\n        'colons': 'white', // Color for colons\n        'default': 'reset' // Default color to reset to default chalk color\n    }\n\n    const getCodeColor = (chalkKey: string, textValue: string): string => {\n        return (chalk as any)[chalkKey](textValue);\n    }\n\n    const objString = JSON.stringify(this.sanitizeObject(obj), null, 2);\n    const lines = objString.split('\\n');\n\n    const coloredLines: string[] = [];\n\n    for (const line of lines) {\n        const parts = line.split(/(\"[^\"]*\"\\s*:\\s*)|(\"[^\"]*\":\\s*)|([{}[\\],])/); // Split the line into parts around keys, colons, commas, braces, and brackets\n\n        // Process each part and colorize accordingly\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            if (part !== undefined) {\n                const trimmedPart = part.trim();\n                if (trimmedPart === ':') {\n                    // This part is a colon, colorize it with white\n                    parts[i] = getCodeColor(_JSON_COLORS.colons, ':');\n                } else if (trimmedPart === ',') {\n                    // This part is a comma, colorize it with white\n                    parts[i] = getCodeColor(_JSON_COLORS.colons, ',');\n                } else if (trimmedPart === '[' || trimmedPart === ']') {\n                    // This part is a bracket, colorize it with the arrayBraces color\n                    parts[i] = getCodeColor(_JSON_COLORS.arrayBraces, part);\n                } else if (i % 4 === 1) {\n                    // This part is a key, colorize it with the keys color\n                    const key = trimmedPart;\n                    if (key === ':') {\n                        parts[i] = getCodeColor(_JSON_COLORS.colons, key);\n                    } else {\n                        parts[i] = getCodeColor(_JSON_COLORS.keys, key);\n                    }\n                } else if (i % 4 === 3) {\n                    // This part is a value, colorize it with objectValue\n                    const value = trimmedPart;\n                    parts[i] = getCodeColor(_JSON_COLORS.objectValue, value);\n                }\n            }\n        }\n\n        coloredLines.push(parts.join('')); // Join and add the modified line to the result\n    }\n\n    return coloredLines.join('\\n'); // Join the colored lines and return as a single string\n}\n\n\n\n  warn(...obj: any[]): void {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    console.log(...obj.map((txt) => chalk.yellowBright('[RWS CLI WARNING] ' + txt)));\n  }\n\n  sanitizeObject(obj: any): any {\n    const sensitiveKeys = [\"mongo_url\", \"mongo_db\", \"ssl_cert\", \"ssl_key\", \"secret_key\", \"aws_access_key\", \"aws_secret_key\"];\n    \n    const sanitizedObj = { ...obj }; // Create a shallow copy of the object\n\n    for (const key of sensitiveKeys) {\n        if (sanitizedObj.hasOwnProperty(key)) {\n            sanitizedObj[key] = \"<VALUE HIDDEN>\";\n        }\n    }\n\n      return sanitizedObj;\n  }\n\n  getPino(): PinoLogger\n  {\n    return pino(pinoPretty());\n  }\n\n  prettyPrintObject(obj: any): void {\n    this.getPino().info(this.colorObject(this.sanitizeObject(obj)));\n  }\n\n  error(...obj: any[]): void {\n    if (!this.isEnabled) {\n      return;\n    }\nconsole.error(obj)\n    console.log(...obj.map((txt) => chalk.red('[RWS CLI ERROR] ' + txt)));  \n  }\n\n  stopLogging(): void {\n    this.isEnabled = false;\n    this.disableOriginalLogFunctions();\n  }\n\n  startLogging(): void {\n    this.isEnabled = true;\n    this.restoreOriginalLogFunctions();\n  }\n\n  private getOriginalLogFunctions = () => {\n    return {\n      log: console.log,\n      warn: console.warn,\n      error: console.error,\n    }\n  }\n\n  private disableOriginalLogFunctions = () => {\n    console.log = (...args: string[]) => { }\n    console.warn = (...args: string[]) => { }\n    console.error = (...args: string[]) => { }\n  }\n\n  private restoreOriginalLogFunctions = () => {\n    const originalF = this.originalLogMethods;\n\n    console.log = originalF.log;\n    console.warn = originalF.warn;\n    console.error = originalF.error;\n  }\n\n  updateLogLine(message: string) {\n    process.stdout.write('\\r' + message);\n  }\n\n  rwsLog(logCat: string | any[], logString: string | null | any = null): void {\n    const logName = logString ? `[${logCat}]` : '[RWS CLI]';\n    const logData = logString ? logString : logCat;\n\n    console.log(chalk.green(logName), logData);\n  }\n}\n\nexport default ConsoleService.getSingleton();","import { PrismaClient } from \"@prisma/client\";\nimport { Collection, Db, MongoClient } from 'mongodb';\nimport ITimeSeries from \"../models/interfaces/ITimeSeries\";\nimport { IModel } from \"../models/_model\";\nimport getConfig from \"./AppConfigService\";\nimport TheService from \"./_service\";\nimport ConsoleService from \"./ConsoleService\";\n\ninterface IDBClientCreate {\n  dbUrl?: string;\n  dbName?: string;\n}\n\nclass DBService extends TheService {\n  private client: PrismaClient;\n  private opts:IDBClientCreate = null;\n  private connected = false;\n\n  constructor(opts: IDBClientCreate = null){\n    super();   \n  }\n\n  private connectToDB(opts: IDBClientCreate = null) {\n    if(opts){\n      this.opts = opts;\n    }else{\n      this.opts = {\n        dbUrl: getConfig().get('mongo_url'),        \n        dbName: getConfig().get('mongo_db'),\n      }\n    }\n\n    if(!this.opts.dbUrl){\n      return;\n    }    \n  \n    try{\n      this.client = new PrismaClient({ \n        datasources: {\n          db: {\n            url: this.opts.dbUrl\n          },\n        },\n      });     \n\n      this.connected = true;\n    } catch (e){\n      ConsoleService.error('PRISMA CONNECTION ERROR');\n    }\n  }\n\n  private async createBaseMongoClient(): Promise<MongoClient>\n  {\n    const dbUrl = this.opts?.dbUrl || getConfig().get('mongo_url');\n    const client = new MongoClient(dbUrl);\n    \n    await client.connect();\n\n    return client;\n\n  }\n\n  private async createBaseMongoClientDB(): Promise<Db>\n  {\n    const dbName = this.opts?.dbName || getConfig().get('mongo_db');\n    const client = await this. createBaseMongoClient();\n    return client.db(dbName);\n  }\n\n  public async cloneDatabase(source: string, target: string): Promise<void> {\n    const client = await this.createBaseMongoClient();\n\n    // Source and target DB\n    const sourceDb = client.db(source);\n    const targetDb = client.db(target);\n\n    // Get all collections from source DB\n    const collections = await sourceDb.listCollections().toArray();\n\n    // Loop over all collections and copy them to the target DB\n    for (let collection of collections) {\n        const docs = await sourceDb.collection(collection.name).find({}).toArray();\n        await targetDb.collection(collection.name).insertMany(docs);\n    }\n\n    await client.close();\n  }\n\n  async watchCollection(collectionName: string, preRun: () => void): Promise<any>\n  {    \n    const db = await this.createBaseMongoClientDB();\n    const collection = db.collection(collectionName);\n\n    const changeStream = collection.watch();    \n    return new Promise((resolve) => {      \n      changeStream.on('change', (change) => {           \n        resolve(change);\n      });\n\n      preRun();\n    });   \n  }\n\n  async insert(data: any, collection: string, isTimeSeries: boolean = false) {\n    \n    let result: any = data;\n    // Insert time-series data outside of the transaction\n\n    if(isTimeSeries){\n      const db = await this.createBaseMongoClientDB();\n      const collectionHandler = db.collection(collection);\n      \n      const insert = await collectionHandler.insertOne(data);\n\n      result = await this.findOneBy(collection, { id: insert.insertedId.toString()  });\n      return result;\n    }\n\n    const prismaCollection = this.getCollectionHandler(collection);    \n\n    result = await prismaCollection.create({ data });\n\n    return await this.findOneBy(collection, { id: result.id })\n  }\n\n  async update(data: any, collection: string): Promise<IModel> \n  {\n    const model_id: string = data.id;    \n    delete data['id'];\n\n    const prismaCollection = this.getCollectionHandler(collection);\n\n    await prismaCollection.update({\n      where: {\n        id: model_id,\n      },\n      data: data,\n    });    \n\n    return await this.findOneBy(collection, { id: model_id })\n  };\n  \n\n  async findOneBy(collection: string, conditions: any): Promise<IModel|null>\n  {    \n    return await this.getCollectionHandler(collection).findFirst({ where: conditions });\n  }\n\n  async delete(collection: string, conditions: any): Promise<void>\n  {    \n    await this.getCollectionHandler(collection).deleteMany({ where: conditions });\n    return;\n  }\n\n  async findBy(collection: string, conditions: any, fields: string[] | null = null): Promise<IModel[]>\n  {    \n    const params: any ={ where: conditions };\n\n    if(fields){\n      params.select = {}\n      fields.forEach((fieldName: string) => {        \n        params.select[fieldName] = true;\n      });    \n    }\n\n    return await this.getCollectionHandler(collection).findMany(params);\n  }\n\n  async collectionExists(collection_name: string): Promise<boolean>\n  {\n    const dbUrl = this.opts?.dbUrl || getConfig().get('mongo_url');\n    const client = new MongoClient(dbUrl);\n\n    try {\n      await client.connect();    \n\n      const db = client.db('junctioned'); // Replace with your database name\n\n      const collections = await db.listCollections().toArray();\n      const existingCollectionNames = collections.map((collection) => collection.name);\n\n      return existingCollectionNames.includes(collection_name);\n    } catch (error) {\n      ConsoleService.error('Error connecting to MongoDB:', error);\n\n      throw error;\n    }    \n  }\n\n  async createTimeSeriesCollection(collection_name: string): Promise<Collection<ITimeSeries>>\n  {    \n    try {    \n      const db = await this.createBaseMongoClientDB()\n\n      // Create a time series collection\n      const options = {\n        timeseries: {\n          timeField: 'timestamp', // Replace with your timestamp field\n          metaField: 'params' // Replace with your metadata field\n        }\n      };\n\n      await db.createCollection(collection_name, options); // Replace with your collection name\n\n      return db.collection(collection_name);\n\n    } catch (error) {\n      ConsoleService.error('Error connecting to MongoDB:', error);\n\n      throw error;\n    }\n  }\n\n  private getCollectionHandler(collection: string): any \n  {    \n    if(!this.client || !this.connected){\n      this.connectToDB();\n    }\n\n    return (this.client[collection as keyof PrismaClient] as any)\n  }\n}\n\nexport default DBService.getSingleton();\nexport { DBService };","import TheService from \"./_service\";\n\n\nimport ConsoleService from \"./ConsoleService\";\nimport LambdaService from \"./LambdaService\";\nimport AWSService from \"./AWSService\";\nimport ProcessService from \"./ProcessService\";\n\nimport path from 'path';\nimport AWS from 'aws-sdk';\nimport VPCService from \"./VPCService\";\n\nconst { log, warn, error, color, rwsLog } = ConsoleService;\n\nconst __STATE_WAIT_TIME = 3000; //ms\n\nclass EFSService extends TheService {\n    private region: string;\n\n    private s3: AWS.S3;\n    private efs: AWS.EFS;\n    private lambda: AWS.Lambda;\n    private ec2: AWS.EC2;\n\n    constructor() {\n        super();        \n    }\n\n    async getOrCreateEFS(functionName: string, vpcId: string, subnetId: string): Promise<[string, string, boolean]> \n    {      \n        const response = await AWSService.getEFS().describeFileSystems({ CreationToken: functionName }).promise();\n    \n        if (response.FileSystems && response.FileSystems.length > 0) {\n            const fileSystemId = response.FileSystems[0].FileSystemId;\n            const accessPoints = await this.getAccessPoints(fileSystemId);\n\n            if(!accessPoints.length){\n                throw \"No acces point in EFS for RWS lambdas\"\n            }\n\n            log(`${color().green('[RWS Cloud FS Service]')} EFS exists:`, {\n                efsId: fileSystemId,\n                apARN: accessPoints[0].AccessPointArn                \n            });\n\n            return [fileSystemId, accessPoints[0].AccessPointArn, true];\n        } else {\n            const params = {\n                CreationToken: functionName,\n                PerformanceMode: 'generalPurpose',\n            };\n    \n            try {\n                const response = await AWSService.getEFS().createFileSystem(params).promise();\n                await this.waitForEFS(response.FileSystemId);                \n                const fsMountId = await this.createMountTarget(response.FileSystemId, subnetId);     \n                await this.waitForFileSystemMount(response.FileSystemId);                           \n                const [accessPointId, accessPointArn] = await this.createAccessPoint(response.FileSystemId);\n                await this.waitForAccessPoint(accessPointId);\n\n                const endpointId = await VPCService.createVPCEndpointIfNotExist(vpcId);\n                await VPCService.ensureRouteToVPCEndpoint(vpcId, endpointId);\n\n                log(`${color().green('[RWS Cloud FS Service]')} EFS Created:`, response);\n                return [response.FileSystemId, accessPointArn, false];\n            } catch (err) {\n                error('Error creating EFS:', err);\n                throw err;  // It's a good practice to throw the error so the caller knows something went wrong.\n            }\n        }\n    }\n\n    async deleteEFS(fileSystemId: string): Promise<void> {\n        try {\n            await AWSService.getEFS().deleteFileSystem({ FileSystemId: fileSystemId }).promise();\n            error(`EFS with ID ${fileSystemId} has been deleted.`);\n        } catch (err) {\n            error('Error while deleting EFS:');\n            log(err);\n            throw err;\n        }\n    }\n\n    async waitForEFS(fileSystemId: string)\n    {\n        let isAvailable = false;\n\n        log(`${color().yellowBright('[EFS Listener] awaiting EFS state change')}`);        \n        \n        while (!isAvailable) {\n            const mountResponse = await AWSService.getEFS().describeFileSystems({ FileSystemId: fileSystemId }).promise();\n\n            if (mountResponse.FileSystems && mountResponse.FileSystems.length && mountResponse.FileSystems[0].LifeCycleState === 'available') {\n                isAvailable = true;\n            } else {\n                log(`${color().yellowBright('[EFS Listener] .')}`);\n                await new Promise(resolve => setTimeout(resolve, __STATE_WAIT_TIME));  // wait for 5 seconds before checking again\n            }\n        }\n    }\n\n    sleep(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    async waitForFileSystemMount(fileSystemId: string): Promise<boolean> {\n        while (true) {\n            try {\n                log(`${color().yellowBright('[EFS Mount Listener] awaiting EFS mount change')}`);        \n\n                const response = await AWSService.getEFS().describeMountTargets({ FileSystemId: fileSystemId }).promise();\n\n                const isMounted = response.MountTargets.some(mountTarget => mountTarget.LifeCycleState === 'available');\n    \n                if (isMounted) {\n                    log(`${color().yellowBright('[EFS Mount Listener] DONE')}`);\n                    return true;\n                }else{\n                    log(`${color().yellowBright('[EFS Mount Listener] is during creation process...')}`);\n                }\n\n                log(`${color().yellowBright('[EFS Mount Listener] .')}`);\n\n                await ProcessService.sleep(__STATE_WAIT_TIME);\n    \n            } catch (error) {\n                console.error('Error while checking EFS mount status:', error);\n                throw error;\n            }\n        }\n    }\n\n    async waitForAccessPoint(accessPointId: string) {\n        let isAvailable = false;\n    \n        log(`${color().yellowBright('[EFS AP Listener] awaiting EFS access point change')}`, accessPointId);        \n    \n        while (!isAvailable) {\n            const accessPointResponse = await AWSService.getEFS().describeAccessPoints({ AccessPointId: accessPointId }).promise();\n    \n            if (accessPointResponse.AccessPoints && accessPointResponse.AccessPoints.length && accessPointResponse.AccessPoints[0].LifeCycleState === 'available') {\n                isAvailable = true;\n            } else {\n                log(`${color().yellowBright('[EFS AP Listener] .')}`);\n                await new Promise(resolve => setTimeout(resolve, 5000));  // wait for 5 seconds before checking again                \n            }\n        }\n    }\n    \n\n    generateClientToken(): string \n    {\n        return Date.now().toString() + Math.random().toString(36).substr(2, 5);\n    }\n\n    async getAccessPoints(fileSystemId: string): Promise<AWS.EFS.AccessPointDescriptions | null>\n    {\n        try {\n          const params = {\n            FileSystemId: fileSystemId  // specify the FileSystemId to filter access points for a specific EFS\n          };\n      \n          const response = await AWSService.getEFS().describeAccessPoints(params).promise();\n          if (response.AccessPoints && response.AccessPoints.length > 0) {\n            return response.AccessPoints;  // this will return an array of access points\n          } else {\n            log('No access points found for the specified EFS.');\n            return null;\n          }\n        } catch (err) {\n          error('Error getting access point:', error);\n          throw err;\n        }\n      }\n\n    async createAccessPoint(fileSystemId: string): Promise<[string, string]> \n    {\n        const clientToken = this.generateClientToken();  // Generate a unique client token\n\n        const params = {\n            FileSystemId: fileSystemId,\n            ClientToken: clientToken,  // Add the client token here\n            PosixUser: {\n                Uid: 1001,  // You can adjust these values as per your requirements.\n                Gid: 1001\n            },\n            RootDirectory: {\n                Path: \"/mnt/efs\",  // The path where Lambda will mount the EFS.\n                CreationInfo: {\n                    OwnerUid: 1001,\n                    OwnerGid: 1001,\n                    Permissions: \"755\"\n                }\n            }\n        };\n    \n        try {\n            const response = await AWSService.getEFS().createAccessPoint(params).promise();\n            log(`${color().green('[RWS Cloud FS Service]')} EFS AP created:`, response);\n\n            return [response.AccessPointId, response.AccessPointArn];\n        } catch (err) {\n            error('Error creating EFS access point:', err);\n            throw err;\n        }\n    }\n\n    async createMountTarget(fileSystemId: string, subnetId: string): Promise<string> \n    {\n        const params = {\n            FileSystemId: fileSystemId,\n            SubnetId: subnetId,\n        };\n\n        try {\n            const response = await AWSService.getEFS().createMountTarget(params).promise();\n            log(`${color().green('[RWS Cloud FS Service]')} EFS Mount Target created:`, response);\n\n            return response.MountTargetId;\n        } catch (error) {\n            console.error('Error creating Mount Target:', error);\n        }\n    }   \n\n    async uploadToEFS(baseFunctionName: string, efsId: string, modulesS3Key: string, s3Bucket:string, vpcId: string, subnetId: string): Promise<any>\n    {\n        const efsLoaderFunctionName = await this.processEFSLoader(vpcId, subnetId);\n\n        const params = {\n            functionName: `${baseFunctionName}`,\n            efsId,\n            modulesS3Key,\n            s3Bucket\n        };\n    \n        try {\n            log(`${color().green(`[RWS Lambda Service]`)} invoking EFS Loader as \"${efsLoaderFunctionName}\" lambda function for \"${baseFunctionName}\" with ${modulesS3Key} in ${s3Bucket} bucket.`);\n\n            const response = await LambdaService.invokeLambda(efsLoaderFunctionName, params);\n            rwsLog('RWS Lambda Service', color().yellowBright(`\"${efsLoaderFunctionName}\" lambda function response:`));\n            log(response);            \n            return;// JSON.parse(response.Response.Payload as string);\n        } catch (error) {\n            // await EFSService.deleteEFS(efsId);\n            console.error('Error invoking Lambda:', error);\n            throw error;\n        }\n    }\n\n    async processEFSLoader(vpcId:string, subnetId: string): Promise<string>\n    {\n        const executionDir = process.cwd();\n\n        const filePath:string = module.id;        \n        const cmdDir = filePath.replace('./', '').replace(/\\/[^/]*\\.ts$/, '');\n        const moduleDir = path.resolve(cmdDir, '..', '..', '..', '..');\n        const moduleCfgDir = `${executionDir}/node_modules/.rws`;\n\n        const _UNZIP_FUNCTION_NAME: string = 'efs-loader';\n\n        if(!(await LambdaService.functionExists('RWS-' + _UNZIP_FUNCTION_NAME))){\n            log(`${color().green(`[RWS Lambda Service]`)} creating EFS Loader as \"${_UNZIP_FUNCTION_NAME}\" lambda function.`, moduleDir);\n            const zipPath = await LambdaService.archiveLambda(`${moduleDir}/lambda-functions/efs-loader`, moduleCfgDir);\n\n            await LambdaService.deployLambda(_UNZIP_FUNCTION_NAME, zipPath, vpcId, subnetId, true);\n        }\n\n        return _UNZIP_FUNCTION_NAME;\n    }    \n\n    async deleteDir(): Promise<void>\n    {\n        \n    }\n}\n\nexport default EFSService.getSingleton();","import TheService from \"./_service\";\n\nimport getAppConfig from \"./AppConfigService\";\nimport EFSService from \"./EFSService\";\nimport ConsoleService from \"./ConsoleService\";\nimport AWSService from \"./AWSService\";\nimport ZipService from \"./ZipService\";\nimport S3Service from \"./S3Service\";\nimport APIGatewayService from \"./APIGatewayService\";\n\nimport path from 'path';\nimport fs from 'fs';\nimport AWS from 'aws-sdk';\nimport UtilsService from \"./UtilsService\";\nimport ProcessService from \"./ProcessService\";\nimport VPCService from \"./VPCService\";\n\n\nconst { log, warn, error, color, rwsLog } = ConsoleService;\n\nconst MIN = 60; // 1MIN = 60s\n\ninterface InvokeLambdaResponse {\n  StatusCode?: number;\n  Payload: string;\n}\n\ntype InvocationTypeType = 'RequestResponse' | 'Event' | 'DryDrun';\n\ninterface INPMPackage {\n  name: string\n  version: string\n  description?: string\n  author?: string\n  license?: string\n  type?: string\n\n  dependencies?: {    \n    [packageName: string]: string\n  }\n\n  deployConfig?: {\n    webLambda?: boolean\n    invocationType?: InvocationTypeType\n  }\n}\n\n\nclass LambdaService extends TheService {\n\n  private region: string;\n\n  constructor() {\n    super();\n  }\n\n  async archiveLambda(lambdaDirPath: string, moduleCfgDir: string, fullZip: boolean = false): Promise<string> {    \n    const lambdaDirName = lambdaDirPath.split('/').filter(Boolean).pop();\n    const lambdaPath = path.join(moduleCfgDir, 'lambda', `RWS-${lambdaDirName}-app.zip`);\n    \n    if (!fs.existsSync(path.join(moduleCfgDir, 'lambda'))) {\n      fs.mkdirSync(path.join(moduleCfgDir, 'lambda'));\n    }\n\n    // Create archives\n    const tasks: Promise<string>[] = [];\n    \n    if (fs.existsSync(lambdaPath)) {\n      fs.unlinkSync(lambdaPath);\n    }\n\n    // if(fs.existsSync(lambdaPath + '/package.json')){\n    //   await ProcessService.runShellCommand(`cd ${lambdaPath} && npm install`);\n    // }\n    const toolsFile = `${path.resolve(lambdaDirPath, '..')}/tools.js`;\n    const targetToolsFile = `${lambdaDirPath}/tools.js`;\n    \n    fs.copyFileSync(toolsFile, targetToolsFile);    \n\n    log(`${color().green('[RWS Lambda Service]')} archiving ${color().yellowBright(lambdaDirPath)} to:\\n ${color().yellowBright(lambdaPath)}`);\n    tasks.push(ZipService.createArchive(lambdaPath, lambdaDirPath, fullZip ? null : {\n      'ignore': ['node_modules/**/*']\n    }));       \n\n    await Promise.all(tasks);\n\n    fs.unlinkSync(targetToolsFile);\n\n    log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('ZIP package complete.')}`);\n\n    return lambdaPath;\n  }\n\n  determineLambdaPackagePaths(lambdaDirName: string, moduleCfgDir: string): [string, string] {\n    const modulesPath = path.join(moduleCfgDir, 'lambda', `RWS-modules.zip`);\n    const lambdaPath = path.join(moduleCfgDir, 'lambda', `lambda-${lambdaDirName}-app.zip`);\n    return [lambdaPath, modulesPath];\n  }\n\n  setRegion(region: string)\n  {\n    this.region = region;\n  }\n\n  async deployLambda(functionDirName: string, zipPath: string, vpcId: string, subnetId?: string, noEFS: boolean = false): Promise<any> {\n    this.region = getAppConfig().get('aws_lambda_region');\n\n    const zipFile = fs.readFileSync(zipPath);\n\n    try {\n\n      const s3BucketName = getAppConfig().get('aws_lambda_bucket');\n\n      await S3Service.bucketExists(s3BucketName);\n\n      const [efsId, accessPointArn, efsExisted] = await EFSService.getOrCreateEFS('RWS_EFS', vpcId, subnetId);   \n\n      log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('deploying lambda on ' + this.region)} using ${color().red(`S3://${s3BucketName}/${functionDirName}.zip`)}`);\n\n      log(`${color().green('[RWS Lambda Service]')} uploading ${color().yellowBright(zipPath)}...`);\n\n      const s3params = {\n        Bucket: s3BucketName,\n        Key: 'RWS-' + functionDirName + '.zip', // File name you want to save as in S3\n        Body: zipFile\n      };\n           \n      const s3Data = await S3Service.upload(s3params, true);      \n      log(`${color().green('[RWS Lambda Service]')} uploaded ${color().yellowBright(zipPath)} to ${color().red(`S3://${s3BucketName}/RWS-${functionDirName}.zip`)}`);\n      \n\n      const s3Path = s3Data.Key;\n      const Code = {\n        S3Bucket: s3BucketName,\n        S3Key: s3Path\n      }\n\n      const lambdaFunctionName= 'RWS-' + functionDirName\n\n      const _HANDLER = 'index.handler';\n      const functionDidExist: boolean = await this.functionExists(lambdaFunctionName);      \n\n      if (functionDidExist) {\n        await AWSService.getLambda().updateFunctionCode({\n          FunctionName: lambdaFunctionName,\n          ...Code\n        }).promise();                  \n      } else {\n        const createParams: AWS.Lambda.Types.CreateFunctionRequest = {\n          FunctionName: lambdaFunctionName,\n          Runtime: 'nodejs18.x',\n          Role: getAppConfig().get('aws_lambda_role'),\n          Handler: _HANDLER,\n          Code,\n          VpcConfig: {\n            SubnetIds: [subnetId],  // Add your subnet IDs\n            SecurityGroupIds: await VPCService.listSecurityGroups(),  // Add your security group ID\n          },\n          FileSystemConfigs: [\n            {\n                Arn: accessPointArn,\n                LocalMountPath: '/mnt/efs'  // The path in your Lambda function environment where the EFS will be mounted\n            }\n          ],\n          MemorySize: 2048,\n          Timeout: 15 * MIN,\n          Environment: {\n            Variables: {\n              NODE_PATH: '/mnt/efs/res/modules/' + functionDirName,\n              HOME: '/mnt/efs/res/tmp/' + functionDirName\n            }\n          }\n        };     \n        \n        log(color().green('[RWS Lambda Service] is ' + (functionDidExist ? 'updating' : 'creating') + ' lambda function named: ') + color().yellowBright(lambdaFunctionName));\n\n        await AWSService.getLambda().createFunction(createParams).promise()\n      }    \n\n      await this.waitForLambda(functionDirName, functionDidExist ? 'update' : 'creation');      \n      \n      if(functionDidExist){\n        const functionInfo = await this.getLambdaFunction(lambdaFunctionName);\n\n        if(functionInfo.Configuration.Handler !== _HANDLER){\n          log(color().green('[RWS Lambda Service]') + ' is changing handler for Lambda function named: ' + color().yellowBright(lambdaFunctionName));\n\n          await AWSService.getLambda().updateFunctionConfiguration({\n            FunctionName: lambdaFunctionName,\n            Handler: _HANDLER\n          }, (err, data) => {\n            if (err) {\n              console.log(err, err.stack);\n            } else {\n              console.log(data);\n            }\n          }).promise();\n\n          await this.waitForLambda(functionDirName, 'handler update');\n\n          // await S3Service.delete({\n          //   Bucket: s3params.Bucket,\n          //   Key: s3params.Key\n          // });\n\n          // rwsLog('Deleting S3 Object after deploy: ' + color().red(`s3://${s3params.Bucket}/${s3params.Key}`));\n        }\n      }\n      \n      rwsLog('RWS Lambda Service', `lambda function \"${lambdaFunctionName}\" has been ${functionDidExist ? 'created' : 'updated'}`);\n\n      const npmPackage = this.getNPMPackage(functionDirName);\n\n      if((!!npmPackage.deployConfig) && npmPackage.deployConfig.webLambda === true){                \n\n        if((await APIGatewayService.findApiGateway(lambdaFunctionName)) === null){\n          await this.setupGatewayForWebLambda(lambdaFunctionName, vpcId);\n        }\n\n        if(!(await VPCService.findPublicSubnetInVPC(vpcId))){                   \n          await APIGatewayService.associateNATGatewayWithLambda(lambdaFunctionName);\n        }\n      }      \n    } catch (err: Error | any) {\n      error(err.message);\n      log(err.stack)\n      throw err;\n    }\n  }\n\n  getNPMPackage(lambdaDirName: string): INPMPackage\n  {\n    const moduleDir = path.resolve(__dirname, '..', '..').replace('dist/', '');\n    const npmPackagePath = `${moduleDir}/lambda-functions/${lambdaDirName}/package.json`;\n\n    if(!fs.existsSync(npmPackagePath)){\n        throw new Error(`The lambda folder \"${lambdaDirName}\" has no package.json inside.`)\n    }\n\n    return JSON.parse(fs.readFileSync(npmPackagePath, 'utf-8'));\n  }\n\n  async deployModules(functionName: string, efsId: string, vpcId: string, subnetId: string, force: boolean = false) {\n    const _RWS_MODULES_UPLOADED = '_rws_efs_modules_uploaded';\n    const savedKey = !force ? UtilsService.getRWSVar(_RWS_MODULES_UPLOADED) : null;\n    const S3Bucket = getAppConfig().get('aws_lambda_bucket');\n    const moduleDir = path.resolve(__dirname, '..', '..').replace('dist/', '');    \n    \n   \n    if(!this.region){\n      this.region = getAppConfig().get('aws_lambda_region');\n    }\n\n    if(savedKey){\n      log(`${color().green('[RWS Lambda Service]')} key saved. Deploying by cache.`);    \n      await EFSService.uploadToEFS(functionName, efsId, savedKey, S3Bucket, vpcId,subnetId);\n\n      return;\n    }\n\n    log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('deploying lambda modules on ' + this.region)}`);    \n\n    if(!savedKey){      \n      const oldDir = process.cwd();\n      process.chdir(`${moduleDir}/lambda-functions/${functionName}`);\n\n      rwsLog(`installing ${functionName} modules...`);\n\n      await ProcessService.runShellCommand(`npm install`, null, true);\n\n      rwsLog(color().green(`${functionName} modules have been installed.`));      \n\n      process.chdir(oldDir);\n\n      const packagePath = `${moduleDir}/lambda-functions/${functionName}/node_modules`;\n\n      const zipPath = await ZipService.createArchive(`${process.cwd()}/node_modules/.rws/lambda/RWS-${functionName}-modules.zip`, packagePath);\n\n      const s3params = {\n        Bucket: S3Bucket,\n        Key: `RWS-${functionName}-modules.zip`,\n        Body: fs.readFileSync(zipPath)\n      };\n    \n      log(`${color().green('[RWS Lambda Service]')} package file uploading ${zipPath} to S3Bucket`);\n\n      const s3Data = await S3Service.upload(s3params);\n      const s3Path = s3Data.Key;\n\n      // fs.unlinkSync(packagePath);      \n\n      log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('NPM package file is uploaded to ' + this.region + ' with key:  ' + s3Path)}`);\n\n      UtilsService.setRWSVar(_RWS_MODULES_UPLOADED, s3Path);      \n      await EFSService.uploadToEFS(functionName, efsId, s3Path, S3Bucket, vpcId, subnetId);\n\n      // await S3Service.delete({\n      //   Bucket: s3params.Bucket,\n      //   Key: s3params.Key\n      // });\n\n      // rwsLog('Deleting S3 Object after module deploy: ' + color().red(`s3://${s3params.Bucket}/${s3params.Key}`));\n    }   \n  }  \n\n  async getLambdaFunction(lambdaFunctionName: string): Promise<AWS.Lambda.GetFunctionResponse | null>\n  {\n    try {\n      return await AWSService.getLambda().getFunction({ FunctionName: lambdaFunctionName }).promise();\n    } catch (e: Error | any) {\n      return null;\n    }    \n  }\n\n  async functionExists(lambdaFunctionName: string): Promise<boolean> {\n    return !!(await this.getLambdaFunction(lambdaFunctionName)); \n  }\n\n  async waitForLambda(functionName: string, waitFor: string = null,timeoutMs: number = 300000, intervalMs: number = 5000): Promise<void> {\n    const lambdaFunctionName = 'RWS-' + functionName;\n    const startTime = Date.now();\n    log(`${color().yellowBright('[Lambda Listener] awaiting Lambda' + (waitFor !== null ? ' (' + waitFor + ')' : '') +' state change')}`);        \n\n    while (Date.now() - startTime < timeoutMs) {\n      log(`${color().yellowBright('[Lambda Listener] .')}`);      \n      const { Configuration } = await this.getLambdaFunction(lambdaFunctionName);\n\n      if (Configuration.State === 'Active') {\n        return; // Lambda is active and ready\n      }\n\n      // If the state is 'Failed', you can either throw an error or handle it differently based on your use case\n      if (Configuration.State === 'Failed') {\n        throw new Error(`Lambda function ${lambdaFunctionName} failed to be ready. Reason: ${Configuration.StateReason}`);\n      }\n\n      // Wait for the specified interval\n      await new Promise(resolve => setTimeout(resolve, intervalMs));\n    }\n\n    throw new Error(`Lambda function ${lambdaFunctionName} did not become ready within ${timeoutMs}ms.`);\n  }\n\n  async deleteLambda(lambdaFunctionName: string): Promise<void>\n  {\n\n    const restApi = await APIGatewayService.findApiGateway(lambdaFunctionName);\n\n    await APIGatewayService.deleteApiGateway(restApi.id);\n\n    await AWSService.getLambda().deleteFunction({\n      FunctionName: lambdaFunctionName\n    }).promise();\n  }\n\n  async invokeLambda(\n    functionDirName: string,\n    payload: any,    \n  ): Promise<{ StatusCode: number, Response: AWS.Lambda.InvocationResponse, CapturedLogs?: string[], InvocationType: string}> {\n\n    let invocationType: InvocationTypeType = 'RequestResponse';\n\n    const npmPackage = this.getNPMPackage(functionDirName);\n\n    if(!!npmPackage.deployConfig && npmPackage.deployConfig.invocationType){\n      invocationType = npmPackage.deployConfig.invocationType;\n    }\n\n    if(!!payload._invocationConfig){      \n      const invocationConfig = payload._invocationConfig;\n      invocationType = invocationConfig.invocationType;    \n      delete payload['_invocationConfig'];      \n    }\n\n    const params: AWS.Lambda.InvocationRequest = {\n      FunctionName: 'RWS-' + functionDirName,\n      InvocationType: invocationType,\n      Payload: JSON.stringify(payload),\n    };\n\n    log(color().green('[RWS Lambda Service]') + color().yellowBright(` invoking (with ${invocationType} type) \"RWS-${functionDirName}\" with payload: `));    \n    log(payload);\n  \n    try {\n      const response: AWS.Lambda.InvocationResponse = await AWSService.getLambda()\n        .invoke(params)\n        .promise();      \n        \n      return {\n        StatusCode: response.StatusCode,\n        Response: response,\n        InvocationType: invocationType\n      };\n    } catch(e: Error | any) {\n      error(e.message);\n      throw new Error(e);\n    }\n  }  \n\n  findPayload(lambdaArg: string): string\n  {\n    const executionDir = process.cwd();\n\n    const filePath:string = module.id;        \n    \n    const moduleDir = path.resolve(__dirname, '..', '..').replace('dist/', '');\n    const moduleCfgDir = `${executionDir}/node_modules/.rws`;    \n\n    let payloadPath = `${executionDir}/payloads/${lambdaArg}.json`;\n    \n    if(!fs.existsSync(payloadPath)){\n        rwsLog(color().yellowBright(`No payload file in \"${payloadPath}\"`));      \n        const rwsPayloadPath = `${moduleDir}/payloads/${lambdaArg}.json`\n\n        if(!fs.existsSync(rwsPayloadPath)){                    \n            rwsLog(color().red(`Found the payload file in \"${rwsPayloadPath}\"`));    \n            throw new Error(`No payload`);\n        }else{\n          rwsLog(color().green(`No payload file in \"${payloadPath}\"`));      \n\n            payloadPath = rwsPayloadPath;\n        }                                \n    }\n\n    return payloadPath;\n  }\n\n  async integrateGatewayResource(lambdaFunctionName: string, restApiId: string, resource: AWS.APIGateway.Resource, httpMethod = 'GET')\n  {\n\n    const lambdaInfo = await this.getLambdaFunction(lambdaFunctionName);\n    const lambdaArn =  lambdaInfo.Configuration.FunctionArn;\n\n    await AWSService.getAPIGateway().putIntegration({\n      restApiId: restApiId,\n      resourceId: resource.id,\n      httpMethod: httpMethod,\n      type: \"AWS_PROXY\",\n      integrationHttpMethod: \"POST\",\n      uri: `arn:aws:apigateway:${AWSService.getRegion()}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations`\n    }).promise();    \n  }\n\n  async setupGatewayForWebLambda(lambdaFunctionName: string, vpcId: string): Promise<void>\n  {\n\n    rwsLog('Creating API Gateway for Web Lambda...')\n    const restApiId = await APIGatewayService.createApiGateway(lambdaFunctionName);\n    const resource = await APIGatewayService.createResource(restApiId, lambdaFunctionName);\n\n    const httpMethods = ['GET', 'POST', 'PUT', 'DELETE'];\n    const apiMethods = [];\n\n    rwsLog('Pushing methods to API Gateway resource.')\n\n    for (let methodKey in httpMethods){\n      apiMethods.push(await APIGatewayService.createMethod(restApiId, resource, httpMethods[methodKey]));\n    }    \n\n    rwsLog(`Integrating API Gateway resource with \"${color().yellowBright(lambdaFunctionName)}\" lambda function.`);\n\n    for (let apiMethodKey in apiMethods){\n      const apiMethod: AWS.APIGateway.Method = apiMethods[apiMethodKey];\n      await this.integrateGatewayResource(lambdaFunctionName, restApiId, resource, apiMethod.httpMethod);\n    }    \n\n    await AWSService.getAPIGateway().createDeployment({\n      restApiId: restApiId,\n      stageName: \"prod\"\n    }).promise();    \n\n    rwsLog(`API Gateway \"${color().yellowBright(lambdaFunctionName+'-API')}\" deployed.`);\n\n  }\n}\n\nexport default LambdaService.getSingleton();","import TheService from \"./_service\";\nimport crypto from 'crypto';\n\n\nimport path from 'path';\nimport fs from 'fs';\nimport TraversalService from \"./TraversalService\";\nimport UtilsService from \"./UtilsService\";\n\n\nclass MD5Service extends TheService {\n    async calculateFileMD5(filePath: string): Promise<string> \n    {\n    \n\n        return new Promise((resolve, reject) => {\n            const hash = crypto.createHash('md5');\n            const input = fs.createReadStream(filePath);\n\n            input.on('readable', () => {\n                const data = input.read();\n                if (data) {\n                    hash.update(data);\n                } else {\n                    resolve(hash.digest('hex'));\n                }\n            });\n\n            input.on('error', reject);\n        });\n    }\n\n    async generateCliHashes(fileNames: string[]) : Promise<string[]>\n    {\n        const md5Pack: string[] = [];\n\n        for (const key in fileNames) {\n            const fileName: string = fileNames[key];          \n            const md5 = await this.calculateFileMD5(fileName);        \n            md5Pack.push(md5);\n        }\n\n        return md5Pack;\n    }\n\n    async cliClientHasChanged(consoleClientHashFile: string, tsFilename: string): Promise<boolean> \n    {\n        const generatedHash: string = fs.readFileSync(consoleClientHashFile, 'utf-8');\n   \n        const cmdFiles = this.batchGenerateCommandFileMD5(path.resolve(UtilsService.findRootWorkspacePath(process.cwd()), 'node_modules', '.rws'));\n\n        const currentSumHashes: string = (await this.generateCliHashes([tsFilename, ...cmdFiles])).join('/');            \n\n        if (generatedHash !== currentSumHashes) {\n            return true;\n        }\n\n        return false;\n    }\n\n    batchGenerateCommandFileMD5(moduleCfgDir: string): string[] \n    {\n    \n        if (!fs.existsSync(moduleCfgDir)) {\n            fs.mkdirSync(moduleCfgDir);\n        }\n\n        if (!fs.existsSync(`${moduleCfgDir}/__rws_installed`) || !fs.existsSync(`${moduleCfgDir}/_cli_cmd_dir`)) {\n            return [];\n        }        \n\n        const cmdDirPath = fs.readFileSync(`${moduleCfgDir}/_cli_cmd_dir`, 'utf-8');    \n    \n        //path.resolve(process.cwd()) + '/' + \n\n        return TraversalService.getAllFilesInFolder(cmdDirPath, [\n            process.cwd() + '/' + cmdDirPath + '/index.ts'\n        ]);;\n    }\n}\n\nexport default MD5Service.getSingleton();","import TheService from \"./_service\";\nimport { execSync } from 'child_process';\nimport { spawn } from 'child_process';\nimport ConsoleService from \"./ConsoleService\";\n\nimport readline from 'readline';\nimport path from 'path';\nimport os from 'os';\nimport UtilsService from \"./UtilsService\";\n\nconst { log, warn, error, color } = ConsoleService;\n\ninterface IExecCmdOpts {\n  verbose?: boolean\n  _default: any | null\n}\n\ninterface PM2CommandParams {\n  script: string\n  name: string // Generate a unique name for each command\n  args: string[]\n  cwd: string\n  interpreter?: string\n  exec_mode: string\n  instances: number\n  max_memory_restart: string\n  autorestart?: boolean\n  env: {\n    [key: string]: string\n  }\n}\n\ntype InterpreterType = 'node' | 'none';\n\ninterface ICommandOpts {\n  exec_mode?: string\n  index?: number,\n  cwd?: string,\n  interpreter?: InterpreterType\n  env: {\n    [key: string]: string\n  }\n}\n\ninterface PM2LogPacket {\n  process: {\n    name: string;\n    pm_id: number;\n    [key: string]: any; // Additional fields\n  };\n  data: string;\n  at: Date;\n  [key: string]: any; // Additional fields\n}\n\nconst totalMemoryBytes = os.totalmem();\nconst totalMemoryKB = totalMemoryBytes / 1024;\nconst totalMemoryMB = totalMemoryKB / 1024;\nconst totalMemoryGB = totalMemoryMB / 1024;\n\n\nclass ProcessService extends TheService {\n\n  getParentPID(pid: number): number {\n    const command = `ps -o ppid= -p ${pid} | awk '{print $1}'`;\n    return parseInt(execSync(command).toString().trim(), 10);\n  }\n\n  getAllProcessesIds(): number[] {\n    const startingPID = process.pid;\n\n    return [startingPID, this.getParentPID(startingPID)];\n  }\n\n  async runShellCommand(command: string, cwd: string = null,silent: boolean = false): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const [cmd, ...args] = command.split(' ');\n      \n      if(!cwd){\n        cwd = process.cwd();\n      }\n\n      const spawned = spawn(cmd, args, { stdio: silent ? 'ignore' : 'inherit', cwd });\n\n      spawned.on('exit', (code) => {\n        if (code !== 0) {\n          return reject(new Error(`Command failed with exit code ${code}`));\n        }\n        resolve();\n      });\n\n      spawned.on('error', (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async getInput(prompt: string): Promise<string> {\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n\n    return new Promise((resolve) => {\n        rl.question(color().red('[RWS CLI Input Prompt] ' + prompt), (answer) => {\n            resolve(answer);\n            rl.close();\n        });\n    });\n  }\n}\n\nexport default ProcessService.getSingleton();\n\nexport { IExecCmdOpts }","import 'reflect-metadata'\nimport express, { Request, Response } from 'express';\nimport TheService from \"./_service\";\nimport Controller, { IRequestParams, IHTTProuteMethod } from \"../controllers/_controller\";\nimport { IHTTProute, RWSHTTPRoutingEntry, IPrefixedHTTProutes } from \"../routing/routes\";\nimport { IHTTProuteParams } from \"../routing/annotations/Route\";\nimport UtilsService from './UtilsService';\nimport appConfig from './AppConfigService';\nimport path from 'path';\nimport { RWSError } from '../errors/index';\nimport ConsoleService from './ConsoleService';\n\n\ntype RouteEntry = {[key: string]: [IHTTProuteMethod, CallableFunction, IHTTProuteParams, string]};\n\ninterface IControllerRoutes {\n  get: RouteEntry;\n  post: RouteEntry;\n  put: RouteEntry;\n  delete: RouteEntry;\n}\n\n\n/**\n * \n */\nclass RouterService extends TheService{\n    constructor() {\n        super();\n    }\n\n    static responseTypeToMIME(responseType: string){\n      switch (responseType){\n        case 'html': return 'text/html';\n        default: return 'application/json';\n      }    \n    }\n\n    getRouterAnnotations(constructor: typeof Controller): Record<string, {annotationType: string, metadata: any}> {    \n        const annotationsData: Record<string, {annotationType: string, metadata: any}> = {};\n  \n        const propertyKeys: string[] = Reflect.getMetadataKeys(constructor.prototype).map((item: string): string => {\n          return item.split(':')[1];\n        });\n        \n        propertyKeys.forEach(key => {\n          const annotations: string[] = ['Route'];\n  \n          annotations.forEach(annotation => {\n            const metadataKey = `${annotation}:${String(key)}`;\n          \n            const meta = Reflect.getMetadata(metadataKey, constructor.prototype);\n            \n            if (meta) {\n              annotationsData[String(key)] = {annotationType: annotation, metadata: meta};\n            }\n          });                 \n        });\n  \n        return annotationsData;\n    }\n\n    async assignRoutes(app: express.Express, routesPackage: RWSHTTPRoutingEntry[], controllerList: Controller[]): Promise<IHTTProute[]>\n    {                \n        const controllerRoutes: IControllerRoutes = {\n          get: {}, post: {}, put: {}, delete: {}\n        }        \n\n        controllerList.forEach((controllerInstance: Controller) => {          \n          const controllerMetadata: Record<string, {annotationType: string, metadata: any}> = this.getRouterAnnotations(controllerInstance.constructor as typeof Controller);\n          \n          if(controllerMetadata){            \n            Object.keys(controllerMetadata).forEach((key: string) => {\n              if(controllerMetadata[key].annotationType !== 'Route'){\n                return;    \n              }\n\n              this.setControllerRoutes(controllerInstance, controllerMetadata, controllerRoutes, key, app);\n            });\n          }\n        });      \n\n        let routes: IHTTProute[] = [];\n\n         routesPackage.forEach((item: RWSHTTPRoutingEntry) => {   \n            if ('prefix' in item && 'routes' in item && Array.isArray(item.routes)) {\n              // Handle the case where item is of type IPrefixedHTTProutes\n              routes = [...routes, ...item.routes.map((subRouteItem: IHTTProute): IHTTProute => {\n                  const subRoute: IHTTProute = {\n                      path: item.prefix + subRouteItem.path,\n                      name: subRouteItem.name\n                  };\n          \n                  return subRoute;\n              })];\n          } else {\n              // Handle the case where item is of type IHTTProute\n              routes.push(item as IHTTProute);\n          }        \n        });  \n\n        console.log('ROUTES IN ASSIGNMENT', routes);\n       \n\n        routes.forEach((route: IHTTProute) => {          \n            Object.keys(controllerRoutes).forEach((_method: string) => {\n              const actions = controllerRoutes[_method as keyof IControllerRoutes];                           \n\n              if(!actions[route.name]){\n                return;\n              }        \n                                          \n              this.addRouteToServer(actions, route);\n            });\n        });\n\n        return routes;\n    }\n\n    private addRouteToServer(actions: RouteEntry, route: IHTTProute){\n \n      const [routeMethod, appMethod, routeParams, methodName] = actions[route.name];                                \n      \n      if(!appMethod){\n        return;\n      }        \n\n      appMethod(route.path, async (req: Request, res: Response) => {\n        try {\n\n          const controllerMethodReturn = await routeMethod({\n            req: req,\n            query: req.query,\n            params: route.noParams ? [] : req.params,\n            data: req.body,\n            res: res       \n          });     \n\n          res.setHeader('Content-Type', RouterService.responseTypeToMIME(routeParams.responseType));  \n\n          let status = 200;\n\n          if(controllerMethodReturn instanceof RWSError){\n            status = controllerMethodReturn.getCode();\n          }\n\n          this.sendResponseWithStatus(res, status, routeParams, controllerMethodReturn);          \n          \n          return;\n        }catch(err: Error | RWSError | any){   \n          let errMsg;          \n          let stack;\n\n          if(!!err.printFullError){\n            err.printFullError();\n            errMsg = err.getMessage();\n            \n            stack = err.getStack();\n          }else{\n            errMsg = err.message;\n            ConsoleService.error(errMsg);\n            console.log(err.stack) \n            stack = err.stack;      \n            err.message = errMsg;     \n          }                 \n\n          const code = err.getCode ? err.getCode() : 500;\n          \n          this.sendResponseWithStatus(res, code, routeParams, {\n            success: false,\n            data: {\n              error: {\n                code: code,\n                message: errMsg,\n                stack\n              }\n            }\n          });          \n        }\n      });\n    }\n\n    private sendResponseWithStatus(res: Response, status: number, routeParams: IHTTProuteParams, output: any)\n    {\n      if(routeParams.responseType === 'json' || !routeParams.responseType){                \n        res.status(status).send(output);\n        return;\n      }                                              \n\n      if(routeParams.responseType === 'html' && appConfig().get('pub_dir')){          \n        res.status(status).sendFile(path.join(appConfig().get('pub_dir'),  output.template_name + '.html'));\n        return;\n      }\n\n      res.status(status).send();\n    }\n\n    private setControllerRoutes(\n      controllerInstance: Controller, \n      controllerMetadata: Record<string, {annotationType: string, metadata: any}>, \n      controllerRoutes: IControllerRoutes, key: string, app: express.Express): void\n      {\n      const action: IHTTProuteMethod = (controllerInstance as Controller).callMethod(key);\n        const meta = controllerMetadata[key].metadata;                                        \n        switch(meta.method) {\n          case 'GET':\n            controllerRoutes.get[meta.name] = [action.bind(controllerInstance), app.get.bind(app), meta.params, key]; \n            break;\n\n          case 'POST':\n            controllerRoutes.post[meta.name] = [action.bind(controllerInstance), app.post.bind(app), meta.params, key];\n            break;\n\n          case 'PUT':\n            controllerRoutes.put[meta.name] = [action.bind(controllerInstance), app.put.bind(app), meta.params, key]; \n            break;\n\n          case 'DELETE':\n            controllerRoutes.delete[meta.name] = [action.bind(controllerInstance), app.delete.bind(app), meta.params, key];\n            break;  \n        }\n    }\n    \n    hasRoute(routePath: string, routes: IHTTProute[]): boolean\n    {\n      return this.getRoute(routePath, routes) !== null;\n    }\n\n    getRoute(routePath: string, routes: IHTTProute[]): IHTTProute | null\n    {\n\n      const front_routes = appConfig().get('front_routes');\n\n      const foundRoute = routes.find((item: IHTTProute) => {\n        return item.path.indexOf(routePath) > -1 && !item.noParams\n      });      \n\n      return !!foundRoute ? foundRoute : null;\n    }\n}\n\nexport default RouterService.getSingleton();","import TheService from \"./_service\";\nimport AWSService from \"./AWSService\";\nimport ZipService from \"./ZipService\";\nimport ConsoleService from './ConsoleService';\n\nconst { log, warn, error, color } = ConsoleService;\n\nclass S3Service extends TheService {\n    constructor(){\n        super();\n    }\n\n    async upload(params: AWS.S3.Types.PutObjectRequest, override: boolean = true, region: string = null): Promise<AWS.S3.ManagedUpload.SendData | null>\n    {\n     \n        if (override) {\n            const exists = await this.objectExists({ Bucket: params.Bucket, Key: params.Key }, region);\n            if (exists) {\n\n                log(`${color().green('[RWS Lambda Service]')} ${color().red('Deleting existing S3 object:')} ${params.Key}`);\n                await this.deleteObject({ Bucket: params.Bucket, Key: params.Key });\n            }\n        }else{\n            const exists = await this.objectExists({ Bucket: params.Bucket, Key: params.Key }, region);\n            if (exists) {\n                return null;\n            }\n        }\n        \n        return AWSService.getS3(region).upload(params).promise()\n    }\n\n    async downloadObject(params: AWS.S3.Types.GetObjectRequest, region: string = null): Promise<AWS.S3.GetObjectOutput | null>\n    {     \n        return AWSService.getS3(region).getObject(params).promise();\n    }\n\n    async downloadToString(s3key: string, bucket: string, region?: string): Promise<string>\n    {\n        return new Promise(async (resolve, reject) => {\n        let s3pageResponse: AWS.S3.GetObjectOutput | null = await this.downloadObject({\n            Key: s3key,   \n            Bucket: bucket\n        }, region);      \n\n        if (s3pageResponse.Body instanceof Buffer || s3pageResponse.Body instanceof Uint8Array) {        \n            resolve(s3pageResponse.Body.toString());\n        } else if (typeof s3pageResponse.Body === 'string') {        \n            resolve(s3pageResponse.Body);\n        } else {\n            // Handle other types or throw an error\n            console.error('Unsupported data type');\n            reject('Unsupported data type');\n        }\n        });\n    }\n\n    async delete(params: AWS.S3.Types.DeleteObjectRequest, region: string = null): Promise<void>\n    {\n        await this.deleteObject({ Bucket: params.Bucket, Key: params.Key }, region);\n\n        return;\n    }\n\n    async objectExists(params: AWS.S3.Types.HeadObjectRequest, region: string = null): Promise<boolean> {\n        try {\n            await AWSService.getS3(region).headObject(params).promise();\n            return true;\n        } catch (error: Error | any) {\n            if (error.code === 'NotFound') {\n                return false;\n            }\n            throw error;\n        }\n    }\n\n    async deleteObject(params: AWS.S3.Types.DeleteObjectRequest, region: string = null): Promise<void> {\n        await AWSService.getS3(region).deleteObject(params).promise();\n    }\n\n    async bucketExists(bucketName: string, region: string = null): Promise<string> { \n        try {            \n            await AWSService.getS3(region).headBucket({ Bucket: bucketName }).promise();\n\n            return bucketName;\n        } catch (err: Error | any) {\n            if (err.code === 'NotFound') {\n                // Create bucket if it doesn't exist\n                const params = {\n                    Bucket: bucketName,\n                };                \n\n                await AWSService.getS3(region).createBucket(params).promise();\n                log(`${color().green(`[RWS Lambda Service]`)} s3 bucket ${bucketName} created.`);\n                return bucketName;\n            } else {\n                // Handle other errors\n                error(`Error checking bucket ${bucketName}:`, err);\n            }\n        }\n    }\n}\n\nexport default S3Service.getSingleton();","import { Server as ServerBase, Socket } from \"socket.io\";\nimport HTTPS from \"https\";\nimport getConfigService from \"./AppConfigService\";\nimport cors, {CorsOptions} from 'cors';\nimport HTTP, { ServerResponse } from \"http\";\nimport ITheSocket from \"../interfaces/ITheSocket\";\nimport AuthService from \"./AuthService\";\nimport fs from 'fs';\nimport expressServer, { Request, Response, Express } from \"express\";\nimport RouterService from \"./RouterService\";\nimport { AxiosRequestHeaders } from 'axios';\nimport Controller from \"../controllers/_controller\";\nimport { IHTTProute, IPrefixedHTTProutes, RWSHTTPRoutingEntry } from \"../routing/routes\";\nimport ProcessService from \"./ProcessService\";\nimport ConsoleService from \"./ConsoleService\";\nimport UtilsService from \"./UtilsService\";\nimport path from 'path';\nimport bodyParser from 'body-parser';\nimport Error404 from '../errors/Error404';\nimport RWSError from '../errors/_error';\nimport compression from 'compression';\n\nconst fileUpload = require('express-fileupload');\n\ntype WsRoutes = {\n    [eventName: string]: new (data: any) => ITheSocket;\n};\n\ntype UserTokens = {\n    [socketId: string]: string;\n}\n\ntype JWTUsers<IUser> = {\n    [socketId: string]: IUser;\n}\n\ntype CookieType = {[key: string] : string};\n\ninterface IInitOpts {    \n    controllerList?: Controller[];\n    wsRoutes?: WsRoutes,\n    httpRoutes?: IHTTProute[],\n    pub_dir?: string,\n    authorization?: boolean\n    transport?: 'polling' | 'websocket'\n    domain?: string\n    cors_domain?: string\n}\n\nconst getCurrentLineNumber = UtilsService.getCurrentLineNumber;\n\nconst wsLog = async (fakeError: Error, text: any, socketId: string = null, isError: boolean = false): Promise<void> => {\n    const logit = isError ? console.error : console.log;\n  \n    const filePath = module.id;\n    const fileName = filePath.split('/').pop();\n\n    const marker = '[RWS Websocket]'\n\n    logit(isError ? ConsoleService.color().red(marker) : ConsoleService.color().green(marker), `|`,`${filePath}:${await getCurrentLineNumber(fakeError)}`,`|${socketId ? ConsoleService.color().blueBright(` (${socketId})`) : ''}:`,`${text}`);\n}\n\ntype RWSServer = HTTP.Server | HTTPS.Server;\ntype ServerStarter = (callback?: () => void) => Promise<void>;\ntype RWSServerPair = { instance: ServerService, starter: ServerStarter }\ntype ServerControlSet = { websocket: RWSServerPair, http: RWSServerPair }\n\nconst MINUTE = 1000 * 60;\n\nclass ServerService extends ServerBase {    \n    private static http_server: RWSServerPair;\n    private static ws_server: RWSServerPair;\n    private server_app: Express; \n    private options: IInitOpts; \n    private srv: RWSServer;\n    private tokens: UserTokens = {};\n    private users: JWTUsers<any> = {};\n\n    constructor(webServer: RWSServer, expressApp: Express, opts: IInitOpts){ \n        const _DOMAIN: string =  opts.cors_domain || opts.domain;\n\n        const WEBSOCKET_CORS = {\n            origin: _DOMAIN,\n            methods: [\"GET\", \"POST\"]\n        }\n\n        const cors_headers: string[] = ['Content-Type', 'x-csrf-token','Accept', 'Authorization', 'x-junctionapi-version'];\n\n        super(webServer, {\n            cors: WEBSOCKET_CORS,\n            transports: [opts.transport || 'websocket'],\n            pingTimeout: 5*MINUTE\n        }); \n        const _self: ServerService = this;\n\n        this.server_app = expressApp;\n        this.srv = webServer;\n        this.options = opts;\n\n        const corsHeadersSettings = {\n            \"Access-Control-Allow-Origin\": _DOMAIN, // Replace with your frontend domain\n            \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n            \"Access-Control-Allow-Headers\": cors_headers.join(', '),\n            \"Access-Control-Allow-Credentials\": 'true'\n        };\n\n        this.srv.on(\"options\", (req, res) => {\n            res.writeHead(200, corsHeadersSettings);\n            res.end();\n        });\n\n        this.server_app.use((req, res, next) => {\n\n            Object.keys(corsHeadersSettings).forEach((key: string) => {\n                res.setHeader(key, (corsHeadersSettings as any)[key]);\n            });\n\n            next();\n        });\n\n        const corsOptions: CorsOptions = {\n            origin: _DOMAIN, // Replace with the appropriate origins or set it to '*'\n            methods: ['GET', 'POST', 'OPTIONS'],\n            allowedHeaders: cors_headers\n        }\n\n        console.log('cors-options', corsOptions);\n\n        const corsMiddleware = cors(corsOptions);                 \n\n        this.use(async (socket, next) => {\n            const request: HTTP.IncomingMessage = socket.request;\n            const response: ServerResponse = new ServerResponse(request);\n            corsMiddleware(request, response, next);            \n        });        \n\n        this.server_app.options('*', cors(corsOptions)); // Enable pre-flight for all routes\n\n        if(opts.authorization){\n            this.setupAuth();\n        }          \n    }\n\n    public static async initializeApp(opts: IInitOpts): Promise<ServerControlSet>\n    {                \n        if (!ServerService.http_server) { \n            const [baseHttpServer, expressHttpServer] = await ServerService.createServerInstance(opts);\n           \n            const http_instance = new ServerService(baseHttpServer, expressHttpServer, opts);\n            const isSSL = getConfigService().get('features')?.ssl;\n            const httpPort = getConfigService().get('port');\n            \n            ServerService.http_server = { instance: await http_instance.configureHTTPServer(), starter: http_instance.createServerStarter(httpPort, () => {\n                ConsoleService.log(ConsoleService.color().green('Request/response server' + ` is working on port ${httpPort} using HTTP${isSSL ? 'S' : ''} protocol`));\n            })};  \n        }\n\n        if (!ServerService.ws_server) {\n            const [baseWsServer, expressWsServer] = await ServerService.createServerInstance(opts);\n            const ws_instance = new ServerService(baseWsServer, expressWsServer, opts);\n            const isSSL = getConfigService().get('features')?.ssl;\n\n            const wsPort = getConfigService().get('ws_port');\n\n            ServerService.ws_server = { instance: await ws_instance.configureWSServer(), starter: ws_instance.createServerStarter(wsPort, () => {\n                ConsoleService.log(ConsoleService.color().green('Websocket server' + ` is working on port ${wsPort}. SSL is ${isSSL ? 'enabled' : 'disabled'}.`));\n            })};  \n        }\n\n        const allProcessesIds = ProcessService.getAllProcessesIds();\n\n        const executeDir = process.cwd();     \n        const pacakgeDir = UtilsService.findRootWorkspacePath(process.cwd());   \n        const rwsDir = `${pacakgeDir}/node_modules/.rws`;\n\n        if(!fs.existsSync(rwsDir)){\n            fs.mkdirSync(rwsDir);\n        }  \n        \n        return {\n            websocket: this.ws_server,\n            http: this.http_server,\n        }\n    }\n\n    disconnectClient = (clientSocket: Socket) => {\n        clientSocket.disconnect(true);\n    }\n    \n    setJWTToken(socketId: string, token: string): void {\n        if(token.indexOf('Bearer') > -1){\n            this.tokens[socketId] = token.split(' ')[1];\n        }else{\n            this.tokens[socketId] = token;\n        }\n    }    \n\n    public webServer(): RWSServer\n    { \n        return this.srv \n    }  \n\n    static async createServerInstance(opts: IInitOpts): Promise<[RWSServer, Express]>\n    {\n        const app = expressServer();       \n        const isSSL = getConfigService().get('features')?.ssl;\n        const options: {key?: Buffer, cert?: Buffer} = {}\n\n        if(isSSL){\n            const sslCert = getConfigService().get('ssl_cert');\n            const sslKey = getConfigService().get('ssl_key');  \n\n            if( !sslKey || !sslCert || !fs.existsSync(sslCert) || !fs.existsSync(sslKey)){\n                throw new Error('SSL keys set in config do not exist.');\n            }\n\n            options.key = fs.readFileSync(sslKey);\n            options.cert = fs.readFileSync(sslCert);       \n        }       \n\n        const webServer = isSSL ? HTTPS.createServer(options, app) : HTTP.createServer(app);            \n\n        return [webServer, app];\n    }\n\n    createServerStarter(port: number, injected: () => void = () => {}): ServerStarter\n    {\n        return (async (callback: () => void = () => {}) => {            \n            this.webServer().listen(port, () => {\n                injected();\n                callback();\n            });\n        }).bind(this);\n    }\n\n    public async configureHTTPServer(): Promise<ServerService>\n    {\n        this.server_app.use(fileUpload());\n\n      \n        // app.use(express.json({ limit: '200mb' }));\n        this.server_app.use(bodyParser.json({ limit: '200mb' }));    \n        \n        if(getConfigService().get('features')?.routing_enabled){\n            if(this.options.pub_dir){\n                this.server_app.use(expressServer.static(this.options.pub_dir));\n            }     \n    \n            this.server_app.set('view engine', 'ejs');   \n\n            const processed_routes: IHTTProute[] = await RouterService.assignRoutes(this.server_app, this.options.httpRoutes, this.options.controllerList);\n\n            this.server_app.use((req, res, next) => {                              \n                if(!RouterService.hasRoute(req.originalUrl, processed_routes)){\n                    ServerService.on404(req, res);\n                }else{\n                    next();\n                }            \n            });      \n        }\n\n        this.use(compression);\n\n        return this;\n    }\n\n    public async configureWSServer(): Promise<ServerService>\n    { \n        if(getConfigService().get('features')?.ws_enabled){          \n\n            this.sockets.on('connection', async (socket: Socket) => {            \n                const socketId: string = socket.id;\n\n                wsLog(new Error(), `Client connection recieved`, socketId);\n\n    \n\n                socket.on(\"disconnect\",  async (reason: string) => {                    \n                    wsLog(new Error(), `Client disconnected due to ${reason}`, socketId);\n                    \n                    if (reason === 'transport error') {\n                        wsLog(new Error(), `Transport error`, socketId, true);\n                    }                    \n                });\n\n                socket.on('error', async (error) => {\n                  \n                    wsLog(new Error(), error, socketId, true);                    \n                });\n                \n\n                socket.on('__PING__', async () => {\n                    wsLog(new Error(), `Recieved ping... Emmiting response callback.`, socketId)\n                    socket.emit('__PONG__', '__PONG__');\n                });                \n\n                Object.keys(this.options.wsRoutes).forEach((eventName) => {                \n                    const SocketClass = this.options.wsRoutes[eventName];                \n                    new SocketClass(ServerService.ws_server).handleConnection(socket, eventName);\n                });\n            });\n        }\n\n        return this;\n    }\n\n    public setupAuth()\n    {\n        const _self = this;\n        this.use(async (socket, next) => {\n            const AppConfigService = getConfigService();\n            const request: HTTP.IncomingMessage = socket.request;\n            const response: ServerResponse = new ServerResponse(request);\n            const authHeader = request.headers.authorization;            \n\n            const UserClass = await AppConfigService.get('user_class');    \n\n            if(!authHeader){\n                response.writeHead(400, 'No token provided');\n                response.end();\n                return;\n            }\n\n            if(!_self.tokens[socket.id]){\n                _self.setJWTToken(socket.id, authHeader);\n            }\n\n            if(!_self.users[socket.id]){\n                try{\n                    _self.users[socket.id] = await AuthService.authorize<typeof UserClass>(_self.tokens[socket.id], UserClass);                    \n                } catch(e: Error | any){\n                    ConsoleService.error('Token authorization error: ', e.message)\n                }\n            }\n\n            if(!_self.users[socket.id]){\n\n                _self.disconnectClient(socket);\n                ConsoleService.error('Token unauthorized')\n                response.writeHead(403, 'Token unauthorized');\n                response.end();\n                return;\n            }                    \n        });\n    }\n\n    static on404(req: Request, res: Response): void\n    {\n        const error =  new Error404(new Error('Sorry, the page you\\'re looking for doesn\\'t exist.'), req.url);\n\n        error.printFullError();    \n        \n        let response = error.getMessage();\n\n        if(req.headers.accept.indexOf('text/html') > -1){\n            const htmlTemplate = this.processErrorTemplate(error);\n\n                response = htmlTemplate;\n        }   \n      \n        res.status(404).send(response);\n    }\n\n    static processErrorTemplate(error: RWSError): string\n    {\n        return fs.readFileSync( path.resolve(__dirname, '..', '..', '..', 'html') + '/error.html', 'utf-8')\n            .replace('{{error_number}}', error.getCode().toString())\n            .replace('{{error_message}}', error.getMessage())\n            .replace('{{error_stack_trace}}',  error.getStackTraceString() !== '' ? `<h4>Stack trace:</h4><pre>${error.getStackTraceString()}</pre>` : '')\n        ;\n    }\n\n    static cookies = {                \n        getCookies: async(headers: AxiosRequestHeaders): Promise<CookieType> =>\n        {\n          return new Promise((resolve) => {\n            resolve(headers.cookie.split(';').map((cookieEntry: string) => {\n              const [key, value] = cookieEntry.split('=');\n        \n              return {\n                [key]: value\n              }\n            }))\n          }); \n        },        \n        getCookie: async (headers: AxiosRequestHeaders, key: string): Promise<string | null> => \n        {\n          const cookiesBin: CookieType = await ServerService.cookies.getCookies(headers);\n        \n          if(!cookiesBin[key]){\n            return null;\n          }\n        \n          return cookiesBin[key];\n        }        \n    };\n\n    public getOptions(): IInitOpts\n    {\n        return this.options;\n    }\n}\n\nexport default ServerService\nexport { WsRoutes, IHTTProute, IInitOpts, ITheSocket, IPrefixedHTTProutes, RWSHTTPRoutingEntry, RWSServer, ServerControlSet }","import TheService from \"./_service\";\n\nimport path from 'path';\nimport fs from 'fs';\n\n\nclass TraversalService extends TheService {\n  getAllFilesInFolder(folderPath: string, ignoreFilenames: string[] = [], recursive: boolean = false): string[] \n  {\n    const files: string[] = [];\n  \n    function traverseDirectory(currentPath: string): void \n    {\n      const entries = fs.readdirSync(currentPath, { withFileTypes: true });\n  \n      entries.forEach(entry => {\n        const entryPath = path.join(currentPath, entry.name);\n  \n        if (entry.isFile()) {\n          if(!ignoreFilenames.includes(entryPath)){\n            files.push(entryPath);\n          }            \n        } else if (entry.isDirectory() && recursive) {\n          traverseDirectory(entryPath);\n        }\n      });\n    }\n  \n    traverseDirectory(folderPath);\n\n    return files;\n  }\n}\n\nexport default TraversalService.getSingleton();","import TheService from \"./_service\";\nimport fs from 'fs';\nimport path from 'path';\n\nimport { SourceMapConsumer, RawSourceMap  } from 'source-map';\n\nclass UtilsService extends TheService {  \n  private _startTime: [number, number];\n\n  startExecTimeRecord()\n  {\n    this._startTime = process.hrtime();\n  }\n\n  endExecTimeRecord(): number\n  {\n\n    if(this._startTime === null){\n      return 0;\n    }\n\n    const elapsed = process.hrtime(this._startTime);   \n    \n    this._startTime = null;\n\n    return Math.round(elapsed[0] * 1000 + elapsed[1] / 1e6);\n  }\n\n  filterNonEmpty<T>(arr: T[]): T[]\n  {\n    return arr.filter((argElement: T) => argElement !== '' && typeof argElement !== 'undefined' && argElement !== null);\n  }\n\n  isInterface<T>(func: any): func is T {\n    return typeof func === 'function';\n  }\n\n  getRWSVar(fileName: string): string | null\n  {\n    const packageDir = this.findRootWorkspacePath(process.cwd());    \n    const moduleCfgDir = `${packageDir}/node_modules/.rws`;\n\n    if(!fs.existsSync(`${moduleCfgDir}/${fileName}`)){\n      return;\n    }\n\n    try{\n      return fs.readFileSync(`${moduleCfgDir}/${fileName}`, 'utf-8');\n    } catch (e: any){\n      return null;\n    }\n  }   \n  \n  setRWSVar(fileName: string, value: string)\n  {\n    const packageDir = this.findRootWorkspacePath(process.cwd());    \n    const moduleCfgDir = `${packageDir}/node_modules/.rws`;\n\n    if(!fs.existsSync(moduleCfgDir)){\n      fs.mkdirSync(moduleCfgDir);\n    }\n\n    fs.writeFileSync(`${moduleCfgDir}/${fileName}`, value);\n  }\n\n  findRootWorkspacePath(currentPath: string): string\n  {  \n    const parentPackageJsonPath = path.join(currentPath + '/..', 'package.json');        \n    const parentPackageDir = path.dirname(parentPackageJsonPath);\n\n    if (fs.existsSync(parentPackageJsonPath)) {\n      const packageJson = JSON.parse(fs.readFileSync(parentPackageJsonPath, 'utf-8'));\n\n      if (packageJson.workspaces) {\n        return this.findRootWorkspacePath(parentPackageDir);\n      }\n    }\n\n    return currentPath;\n  }\n\n  async getCurrentLineNumber(error: Error = null): Promise<number> {\n    if(!error){\n      error = new Error();\n    }\n    const stack = error.stack || '';\n    const stackLines = stack.split('\\n');\n    const relevantLine = stackLines[1];\n\n    // Extract file path from the stack line\n    const match = relevantLine.match(/\\((.*?):\\d+:\\d+\\)/);\n    if (!match) return -1;\n    const filePath = match[1];\n\n    // Assuming the source map is in the same directory with '.map' extension\n    const sourceMapPath = `${filePath}.map`;    \n\n    // Read the source map\n    const sourceMapContent = fs.readFileSync(sourceMapPath, 'utf-8');    \n    const sourceMap: RawSourceMap = JSON.parse(sourceMapContent);\n    const consumer = await new SourceMapConsumer(sourceMap);\n\n    // Extract line and column number\n    const lineMatch = relevantLine.match(/:(\\d+):(\\d+)/);\n    if (!lineMatch) return -1;\n\n    const originalPosition = consumer.originalPositionFor({\n        line: parseInt(lineMatch[1]),\n        column: parseInt(lineMatch[2]),\n    });\n\n    return originalPosition.line;\n  }\n}\n\nexport default UtilsService.getSingleton();","import AWSService from \"./AWSService\";\nimport ConsoleService from \"./ConsoleService\";\nimport TheService from \"./_service\";\n\nconst { log, warn, error, color, rwsLog } = ConsoleService;\n\n\nclass VPCService extends TheService{\n\n    async findDefaultSubnetForVPC(): Promise<[string, string]> \n    {\n        try {\n            const response = await AWSService.getEC2().describeVpcs({ Filters: [{ Name: 'isDefault', Values: ['true'] }] }).promise();\n\n            if (response.Vpcs && response.Vpcs.length > 0) {                \n                return [await this.getSubnetIdForVpc(response.Vpcs[0].VpcId), response.Vpcs[0].VpcId];\n            } else {\n                console.log('No default VPC found.');\n            }\n        } catch (error) {\n            console.error('Error fetching default VPC:', error);\n        }\n    }\n\n    private async getSubnetIdForVpc(vpcId: string): Promise<string> {\n        const params = {\n            Filters: [{\n                Name: 'vpc-id',\n                Values: [vpcId]\n            }]\n        };\n\n        const result = await AWSService.getEC2().describeSubnets(params).promise();\n\n        if (result.Subnets && result.Subnets.length > 0) {\n            return result.Subnets.map(subnet => subnet.SubnetId as string)[0];\n        } else {\n            return null;\n        }\n    }\n\n    async listSecurityGroups(): Promise<string[]> \n    {\n        try {\n            const result = await AWSService.getEC2().describeSecurityGroups().promise();\n\n            const securityGroups = result.SecurityGroups || [];\n\n            const securityGroupIds = securityGroups.map(sg => sg.GroupId);            \n\n            return securityGroupIds;\n        } catch (error) {\n            console.error('Error fetching security groups:', error);\n            return [];\n        }\n    }   \n\n    async getDefaultRouteTable(vpcId: string, subnetId: string = null): Promise<AWS.EC2.RouteTable>\n    {\n        const filters = [ {\n            Name: \"vpc-id\",\n            Values: [vpcId]\n        }]\n\n        if(subnetId){\n            filters.push({\n                Name: \"association.subnet-id\",\n                Values: [subnetId]\n            });\n        }\n\n        const routeTablesResponse = await AWSService.getEC2().describeRouteTables({\n            Filters: filters\n        }).promise();        \n\n        return routeTablesResponse.RouteTables?.find(rt => {\n            // A default route table won't have explicit subnet associations\n            return !rt.Associations || rt.Associations.every(assoc => !assoc.SubnetId);\n        });\n    }\n\n    async createVPCEndpointIfNotExist(vpcId: string): Promise<string> {\n        const endpointName = \"RWS-S3-GATE\";\n        const serviceName = `com.amazonaws.${AWSService.getRegion()}.s3`;        \n    \n        // Describe VPC Endpoints\n        const existingEndpoints = await AWSService.getEC2().describeVpcEndpoints({\n            Filters: [\n                {\n                    Name: \"tag:Name\",\n                    Values: [endpointName]\n                }\n            ]\n        }).promise();\n\n        const defaultRouteTable = await this.getDefaultRouteTable(vpcId);\n\n        // Check if the endpoint already exists\n        const endpointExists = existingEndpoints.VpcEndpoints && existingEndpoints.VpcEndpoints.length > 0;\n    \n        if (!endpointExists) {\n            // Create VPC Endpoint for S3\n            \n            const endpointResponse = await AWSService.getEC2().createVpcEndpoint({\n                VpcId: vpcId,\n                ServiceName: serviceName,\n                VpcEndpointType: \"Gateway\",\n                RouteTableIds: [defaultRouteTable.RouteTableId], // Add your route table IDs here\n                TagSpecifications: [\n                    {\n                        ResourceType: \"vpc-endpoint\",\n                        Tags: [\n                            {\n                                Key: \"Name\",\n                                Value: endpointName\n                            }\n                        ]\n                    }\n                ]\n            }).promise();\n            \n    \n            if (endpointResponse.VpcEndpoint) {\n                log(`VPC Endpoint \"${endpointName}\" created with ID: ${endpointResponse.VpcEndpoint.VpcEndpointId}`);\n                return endpointResponse.VpcEndpoint.VpcEndpointId;\n            } else {\n                error(\"Failed to create VPC Endpoint\");\n                throw new Error(\"Failed to create VPC Endpoint\");\n            }\n        } else {\n            log(`VPC Endpoint \"${endpointName}\" already exists.`);\n            return existingEndpoints.VpcEndpoints[0].VpcEndpointId;\n\n        }\n    }\n\n    async ensureRouteToVPCEndpoint(vpcId: string, vpcEndpointId: string): Promise<void> {\n    \n        try {\n            const routeTable = await this.getDefaultRouteTable(vpcId);\n\n            const routes = routeTable.Routes || [];\n            const hasS3EndpointRoute = routes.some((route: AWS.EC2.Route) => route.GatewayId === vpcEndpointId);    \n\n            if (!hasS3EndpointRoute) {\n                // Get the prefix list associated with the S3 VPC endpoint\n                const vpcEndpointDescription  = (await AWSService.getEC2().describeVpcEndpoints({\n                    VpcEndpointIds: [vpcEndpointId]\n                }).promise()).VpcEndpoints;\n\n                rwsLog('Creating VPC Endpoint route')\n                // Add a route to the route table\n                await AWSService.getEC2().createRoute({\n                    RouteTableId: routeTable.RouteTableId,\n                    DestinationCidrBlock: '0.0.0.0/0',\n                    VpcEndpointId: vpcEndpointDescription[0].VpcEndpointId\n                }).promise();\n\n                log(`Added route to VPC Endpoint ${vpcEndpointId} in Route Table ${routeTable.RouteTableId}`);\n            } else {\n                log(`Route to VPC Endpoint ${vpcEndpointId} already exists in Route Table ${routeTable.RouteTableId}`);\n            }\n            \n        } catch (error) {\n            console.error('Error ensuring route to VPC Endpoint:', error);\n        }\n    }\n\n    async findPublicSubnetInVPC(vpcId: string): Promise<AWS.EC2.Subnet | null> {\n        const subnets = await AWSService.getEC2().describeSubnets({ Filters: [{ Name: 'vpc-id', Values: [vpcId] }] }).promise();\n\n        for (const subnet of subnets.Subnets || []) {\n            const routeTables = await AWSService.getEC2().describeRouteTables({\n                Filters: [{ Name: 'association.subnet-id', Values: [subnet.SubnetId!] }]\n            }).promise();\n\n            for (const routeTable of routeTables.RouteTables || []) {\n                for (const route of routeTable.Routes || []) {\n                    if (route.DestinationCidrBlock === '0.0.0.0/0' && route.GatewayId && route.GatewayId.startsWith('igw-')) {\n                        return subnet;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    calculateNextThirdOctetIncrement(range: number): number {\n        const thirdOctet = 0;\n    \n        // Calculate the number of addresses represented by the CIDR range\n        const numAddresses = Math.pow(2, 32 - range);\n    \n        // Calculate how many blocks in the third octet those addresses span\n        const increment = Math.ceil(numAddresses / 256);\n    \n        const nextThirdOctet = increment;\n\n        return nextThirdOctet;\n    }\n\n    async createPublicSubnet(vpcId: string, range: number = 24,passedCIDRBlock: string = null): Promise<AWS.EC2.CreateSubnetResult> {\n        const _SUBNET_PASS_VAL = this.calculateNextThirdOctetIncrement(range);\n\n        const vpcInfo = await AWSService.getEC2().describeVpcs({ VpcIds: [vpcId] }).promise();\n        if (!vpcInfo.Vpcs || vpcInfo.Vpcs.length === 0) {\n            throw new Error('VPC not found.');\n        }\n\n        const vpcCidrBlock = vpcInfo.Vpcs[0].CidrBlock;\n    \n        // Retrieve existing subnets within the VPC\n        const subnets = await AWSService.getEC2().describeSubnets({ Filters: [{ Name: 'vpc-id', Values: [vpcId] }] }).promise();\n        const existingCidrs = subnets.Subnets?.map(subnet => subnet.CidrBlock).sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' })) || [];\n\n        // Propose a new CIDR block\n        let newCidrBlock: string;\n        \n        const baseIp: string = (passedCIDRBlock ? passedCIDRBlock : vpcCidrBlock).split('/')[0];\n        \n        const maxThirdOctet = Math.max(...existingCidrs.map(cidr => {\n            const octets = cidr.split('.');\n            return parseInt(octets[2]);\n        }));\n\n        const rerun = async (newOctet: number, newRange: number) => await this.createPublicSubnet(vpcId, range, `${baseIp.split('.').slice(0, 2).join('.')}.${newOctet}.0/${newRange}`);\n\n        const baseThirdOctet = existingCidrs.length ? maxThirdOctet : 0;\n\n        let nextThirdOctet : number = baseThirdOctet + _SUBNET_PASS_VAL;\n    \n        newCidrBlock = `${baseIp.split('.').slice(0, 2).join('.')}.${nextThirdOctet }.0/${range.toString()}`;\n        rwsLog(`Trying to create public subnet for \"${vpcId}\" VPC with \"${newCidrBlock}\" address`);\n\n        if (!existingCidrs.includes(newCidrBlock)) {\n            try {\n                const subnet = await AWSService.getEC2().createSubnet({\n                    VpcId: vpcId,\n                    CidrBlock: newCidrBlock\n                }).promise();  \n                \n                rwsLog(`Created public subnet \"${subnet.Subnet.SubnetId}\" for \"${vpcId}\" VPC with \"${newCidrBlock}\" address`);\n\n                return subnet;\n            } catch (err: Error | any) {\n                // If there's an error due to the CIDR block, adjust and try again\n                warn(err.code);\n\n                if (['InvalidSubnet.Range', 'InvalidSubnet.Conflict'].includes(err.code)) {\n                    nextThirdOctet += _SUBNET_PASS_VAL;\n\n                    error(`CIDR Address taken. Retrying...`);\n\n                    return await rerun(nextThirdOctet, range);\n                } else {\n                    throw err;\n                }\n            }\n        } else {\n            nextThirdOctet += _SUBNET_PASS_VAL;\n\n            error(`CIDR Address already used. Retrying...`);\n            return await rerun(nextThirdOctet, range);\n        }\n    }\n\n    private extractThirdOctet(ip: string): number\n    {\n        return parseInt(ip.split('.')[2]);\n    }\n\n    async waitForNatGatewayAvailable(natGatewayId: string): Promise<void> {\n        try {\n            rwsLog(`Waiting for NAT Gateway ${natGatewayId}...`);\n\n            await AWSService.getEC2().waitFor('natGatewayAvailable', {\n                NatGatewayIds: [natGatewayId]\n            }).promise();\n            rwsLog(`NAT Gateway ${natGatewayId} is now available.`);\n        } catch (err) {\n            error(`Error waiting for NAT Gateway ${natGatewayId} to become available:`);\n            log(err)\n            throw err;\n        }\n    }\n}\n\nexport default VPCService.getSingleton();","import RWSService from './_service'\n\nimport { FaissStore } from \"@langchain/community/vectorstores/faiss\";\nimport { EmbeddingsInterface } from \"@langchain/core/embeddings\";\n\nimport RWSVectorStore, { VectorDocType } from '../models/convo/VectorStore';\n\nclass VectorStoreService extends RWSService\n{\n    async createStore(docs: VectorDocType, embeddings: EmbeddingsInterface): Promise<RWSVectorStore>\n    {        \n        return await (new RWSVectorStore(docs, embeddings)).init();\n    }    \n}\n\nexport default VectorStoreService.getSingleton();","import TheService from \"./_service\";\nimport ConsoleService from \"./ConsoleService\";\n\nimport path from 'path';\nimport fs from 'fs';\nimport archiver, {Format as ArchiveFormat} from 'archiver';\n\n\nconst { log, warn, error, color } = ConsoleService;\n\ninterface IZipParams {\n    recursive?: boolean\n    format?: ArchiveFormat\n    destpath?: string;\n    ignore?: string[]\n}\n\nconst defaultZipParams: IZipParams = {\n    recursive: true,\n    format: 'zip',\n    ignore: []\n}\n\nclass ZipService extends TheService {\n\n    constructor() {\n        super();        \n    }   \n\n    async createArchive(outputPath: string, sourcePath: string, params: IZipParams = null): Promise<string> {\n        if (params){\n            params = Object.assign(defaultZipParams, params);\n        }else{\n            params = defaultZipParams;\n        }\n\n        const archive = archiver(params.format);\n        const output = fs.createWriteStream(outputPath);\n        archive.pipe(output);      \n    \n        // archive.directory(sourcePath, params.recursive ? false : params.destpath);\n\n        archive.glob('**/*', {\n            cwd: sourcePath,\n            dot: true, //include .dotpaths\n            ignore: params.ignore\n        });\n\n        log(`${color().green('[RWS Lambda Service]')} ZIP params:`);\n        log(params);\n    \n        return new Promise((resolve, reject) => {\n            archive.on('error', reject);\n            output.on('close', () => {\n                log(`Files in archive: ${archive.pointer()} bytes`);\n                resolve(outputPath);\n            });\n            output.on('error', reject);\n            archive.finalize();\n        });\n    }    \n\n    listFilesInDirectory(directoryPath: string): string[] {\n        const files = fs.readdirSync(directoryPath);\n\n        const filePaths: string[] = [];\n    \n        files.forEach(file => {\n            const fullPath = path.join(directoryPath, file);\n            const stats = fs.statSync(fullPath);\n    \n            if (stats.isFile()) {\n                filePaths.push(fullPath);\n            }\n        });\n\n        return filePaths;\n    }\n}\n\nexport default ZipService.getSingleton();\nexport { IZipParams }","export default abstract class TheService{\n    _RELOADABLE: boolean = false;\n\n    constructor() {\n    }\n\n    protected static _instances: { [key: string]: TheService } | null = {};\n\n    public static getSingleton<T extends new (...args: any[]) => TheService>(this: T): InstanceType<T> {\n        const className = this.name;\n\n        if (!TheService._instances[className]) {\n            TheService._instances[className] = new this();\n        }\n\n        return TheService._instances[className] as InstanceType<T>;\n    }\n\n    public getReloadable(): string | null {\n        return (this as any).constructor._RELOADABLE || this._RELOADABLE;\n    }\n\n    public reloadService<T extends new (...args: any[]) => TheService>(this: T, ...params: any[]): InstanceType<T> {    \n        const className = this.name;\n        TheService._instances[className] = new this(...params);        \n        return TheService._instances[className] as InstanceType<T>;\n    }\n}","import { Socket } from \"socket.io\";\nimport { DefaultEventsMap } from \"socket.io/dist/typed-events\";\nimport ITheSocket from \"../interfaces/ITheSocket\";\nimport ServerService from \"../services/ServerService\";\n\ninterface JSONMessage{\n    method: string,\n    msg: any,\n    user_id: string\n}\n\nabstract class TheSocket implements ITheSocket{\n    protected server: any;\n\n    constructor(server: ServerService) {        \n        this.server = server;\n    }\n\n    handleConnection(socket: Socket<DefaultEventsMap, DefaultEventsMap, DefaultEventsMap, any>, routeName: string): Socket<DefaultEventsMap, DefaultEventsMap, DefaultEventsMap, any> {\n        throw new Error(\"Method not implemented.\");\n    }\n    middlewareImplementation?(next: any): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getJson(input: string): any\n    {\n        return JSON.parse(input);\n    \n    }\n\n    sendJson(input: Object): string\n    {\n        return JSON.stringify(input);\n    }\n\n    emitMessage<T>(method: string, socket: Socket, data: T = null) : void\n    {\n        socket.emit(method, this.sendJson({ success: true, data, method }));               \n    }\n\n}\n\nexport default TheSocket;\nexport {JSONMessage}","import {ITestVars} from \"../helpers/TestHelper\";\n\nexport default abstract class TestAction\n{\n    protected vars!: ITestVars;\n\n    constructor(vars: ITestVars){\n        this.vars = vars;\n    }\n\n    abstract fire(noReturn: boolean): Promise<any>;\n}","import axios, { AxiosInstance, CreateAxiosDefaults } from \"axios\";\nimport https from 'https';\n\nimport getAppConfig from '../../services/AppConfigService';\n\nexport default {\n    createInstance: (opts: CreateAxiosDefaults): AxiosInstance => {\n        const axiosInstance = axios.create(Object.assign({\n            headers: {\n                'Content-Type': 'application/json',\n                'Origin': getAppConfig().get('domain')\n            },\n            withCredentials: true,\n            httpsAgent: new https.Agent({  \n                rejectUnauthorized: false // This line will ignore SSL verification.\n            })\n        }, opts));\n\n        axiosInstance.defaults.timeout = 60000; // Increase timeout to 60000ms (60 seconds)\n                \n        axiosInstance.interceptors.request.use((config) => {           \n           return config;\n        });\n\n        return axiosInstance;\n    }\n}","import puppeteer, {Browser, Protocol } from 'puppeteer';\n\ninterface IBrowserParams {\n    url: string\n}\n\nclass WebBrowser {\n    private app: Browser;\n    private params: IBrowserParams;\n\n    constructor(app: Browser, params: IBrowserParams) {\n        this.app = app;\n        this.params = params;    \n    }\n\n    async getCookies(): Promise<{[key: string]: Protocol.Network.Cookie}>\n    {        \n        const page = await this.app.newPage();\n        await page.goto(this.params.url);\n    \n        // Get cookies\n        const cookiesArray  = await page.cookies();        \n    \n        await this.app.close();\n\n        return cookiesArray.reduce((acc: { [key: string]: Protocol.Network.Cookie }, cookie: Protocol.Network.Cookie) => {\n            acc[cookie.name] = cookie;\n            return acc;\n        }, {});\n    }\n\n    async getCookieString(): Promise<string>\n    {        \n        return Object.entries(await this.getCookies())\n        .map(([name, cookie]) => `${name}=${cookie.value}`)\n        .join('; ');\n    }\n}\n\nasync function create(params: IBrowserParams): Promise<WebBrowser>\n{\n    const browser = await puppeteer.launch({\n        headless: 'new',\n        args: ['--no-sandbox', '--disable-setuid-sandbox'],\n        ignoreHTTPSErrors: true, \n    });\n\n    return new WebBrowser(browser, params);\n}\n\nexport default {\n    create,  \n}\n\nexport { IBrowserParams, WebBrowser }","import getConfig, { IAppConfig } from '../../services/AppConfigService';\n\nimport { Server } from \"socket.io\";\nimport ServerService, { ServerControlSet } from \"../../services/ServerService\";\nimport { io, Socket } from 'socket.io-client';\n\nimport * as _mocha from 'mocha';\nimport chai, { expect } from 'chai';\nimport chaiLike from 'chai-like';\nimport chaiThings from 'chai-things';\n\nimport {WebBrowser} from './BrowserHelper';\n\nimport TestCase from '../test_cases/_test_case';\n\nchai.use(chaiLike);\nchai.use(chaiThings);\n\ninterface ITheUser {\n    [key: string]: any,\n    jwt_token: string,\n}\n\ninterface ITestVars {\n    theUser: ITheUser | null,\n    socket: Socket | null,\n    server: ServerControlSet | null,\n    browser: WebBrowser | null\n}\n\nconst createTestVars = (cfg: IAppConfig = null): ITestVars => { \n    getConfig(cfg);\n    return {\n        server: null,\n        socket: null,\n        theUser: null,\n        browser: null\n    }\n}\n  \nconst connectToWS = async (jwt_token: string, ping_event: string = '__PING__', ping_response_event: string = '__PONG__'): Promise<Socket> => {\n    const headers = {\n        Authorization: 'Bearer ' + jwt_token\n    };\n\n    try {            \n        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\n\n        const _TESTPORT = await getConfig().get('test_port');\n\n        const socket: Socket = io(`https://localhost:${_TESTPORT}`, {      \n            extraHeaders: headers,\n            rejectUnauthorized: false\n        });            \n\n        socket.on('error', (error) => {\n            console.error('Socket Error:', error);\n        });\n        \n        socket.on('connect_error', (error) => {\n            console.error('Connection error:', error);\n        });            \n\n        return new Promise((done) => {\n            socket.on(ping_response_event, () => {                    \n                done(socket);\n            });    \n\n            socket.emit(ping_event);\n        });        \n    } catch (error: any) {\n    console.error('Error initializing socket:', error.context.responseText);\n        throw error;\n    }                  \n};\n\ntype LoginCallback = (testVars: ITestVars) => Promise<any> | null;\ntype LoginCallbackSet = { before?: LoginCallback, beforeEach?: LoginCallback, afterEach?: LoginCallback, after?: LoginCallback } | null;\n\nconst setLoggedLifeCycle = (testVars: ITestVars, callbacks?: LoginCallbackSet) => {\n    setLifeCycle(testVars, {\n        before: async () => {\n            testVars.server = await startServer();\n\n            if(callbacks?.after){\n                return await callbacks.after(testVars);\n            }\n\n            return;\n        },\n        beforeEach: async () => {            \n            if(callbacks?.beforeEach){\n                return await callbacks.beforeEach(testVars);\n            }\n\n            return;\n        },\n        afterEach: async () => {\n            if (testVars.socket && testVars.socket.connected) {\n                testVars.socket.disconnect();\n            }\n\n            return;\n        },\n        after: async () => {            \n            if(testVars.server){\n                testVars.server.http.instance.close();\n                testVars.server.websocket.instance.close();\n            }  \n            \n            if(callbacks?.after){\n                return await callbacks.after(testVars);                \n            }\n\n            return;\n        }\n    }, {\n        beforeEach: 30000\n    });\n};  \n\nconst startServer = async (): Promise<ServerControlSet> => {\n    const _TESTPORT = await getConfig().get('test_port');\n    const _TESTWSPORT = await getConfig().get('test_ws_port');\n\n    const server = await ServerService.initializeApp({        \n        controllerList: await getConfig().get('controller_list'),\n        wsRoutes: await getConfig().get('ws_routes'),\n        httpRoutes: await getConfig().get('http_routes')\n    });\n\n    const startHTTPListener = async () => new Promise<void>((resolve) => {\n      server.http.starter();\n    });   \n\n    const startWSListener = async () => new Promise<void>((resolve) => {\n        server.websocket.starter();\n    });   \n    \n\n    return server;\n};\n\nconst setLifeCycle = (testVars: ITestVars, callbacks?: LoginCallbackSet, timeouts?: { before?: number, beforeEach?: number, after?: number }): void => {\n    MOCHA.before(async function() {\n        if(timeouts?.before){\n            this.timeout(timeouts.before);        \n        }            \n\n        if(callbacks?.before){\n            await callbacks.before(testVars);        \n        }\n    });\n\n    MOCHA.beforeEach(async function() {\n        if(timeouts?.beforeEach){\n            this.timeout(timeouts.beforeEach);        \n        }         \n        \n        if(callbacks?.beforeEach){\n            await callbacks.beforeEach(testVars);        \n        }\n\n        return;\n    });\n\n    MOCHA.afterEach(async function () {   \n        if(callbacks?.afterEach){\n            await callbacks.afterEach(testVars);        \n        }\n    });\n    \n    MOCHA.after(async function () {   \n        if(callbacks?.after){\n            await callbacks.after(testVars);        \n        }\n    });\n}\n\nexport default {    \n    connectToWS,    \n    startServer,    \n    createTestVars,\n    disableLogging: () => { console.log = () => {} }\n}\n\nconst MOCHA = Object.assign(_mocha, {\n    expect,\n    setLifeCycle,    \n    setLoggedLifeCycle\n});\n\nexport {\n    ITheUser, MOCHA, ITestVars, TestCase\n}","import AxiosHelper from './helpers/AxiosHelper';\nimport BrowserHelper from './helpers/BrowserHelper';\nimport TestHelper, {MOCHA, ITestVars, ITheUser} from './helpers/TestHelper';\n\n\nimport TestAction  from './actions/_action'\nimport TestCase from './test_cases/_test_case'\n\n\nexport {ITestVars, AxiosHelper, BrowserHelper, TestAction, TestCase, TestHelper, MOCHA, ITheUser}","import TestHelper, {ITestVars} from \"../helpers/TestHelper\";\n\nexport default abstract class TestCase\n{    \n    protected constructor(){  \n        throw new Error('Class not instantiable');  \n    }\n\n    static declare(testVars: ITestVars): void {\n        throw new Error('Method not implemented.');    \n    }\n}","module.exports = require(\"@langchain/community/vectorstores/faiss\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"archiver\");","module.exports = require(\"aws-sdk\");","module.exports = require(\"axios\");","module.exports = require(\"body-parser\");","module.exports = require(\"chai\");","module.exports = require(\"chai-like\");","module.exports = require(\"chai-things\");","module.exports = require(\"chalk\");","module.exports = require(\"compression\");","module.exports = require(\"cors\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"fs\");","module.exports = require(\"fs/promises\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"langchain/chains\");","module.exports = require(\"langchain/document\");","module.exports = require(\"langchain/document_loaders/fs/text\");","module.exports = require(\"langchain/text_splitter\");","module.exports = require(\"mocha\");","module.exports = require(\"mongodb\");","module.exports = require(\"path\");","module.exports = require(\"pino\");","module.exports = require(\"pino-pretty\");","module.exports = require(\"puppeteer\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"socket.io\");","module.exports = require(\"socket.io-client\");","module.exports = require(\"source-map\");","module.exports = require(\"uuid\");","module.exports = require(\"xml2js\");","module.exports = require(\"child_process\");","module.exports = require(\"crypto\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"os\");","module.exports = require(\"readline\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","#!/usr/bin/env node\n\nimport { RWSAppCommands, getAppConfig, IAppConfig, RWSCommand, ICmdParams, ProcessService, ConsoleService, MD5Service, UtilsService } from '../../src/index';\n\nconst { log, warn, error, color, rwsLog } = ConsoleService;\n\n\nconst fs = require('fs');\nconst path = require('path');\n// process.argv[2] will be the first command line argument after `rws`\nconst command = process.argv[2];\n// process.argv[3] will be the parameter args for commands\nconst cmdParamString = process.argv[3];\nconst cmdArgs = !!cmdParamString && cmdParamString.length > 2 ? cmdParamString.split(',') : [];\nconst commandExecutionArgs: ICmdParams = { _default: null, _extra_args: {} };\n\nif (cmdParamString && cmdParamString.indexOf('=') > -1) {\n    cmdArgs.forEach((arg) => {\n        const argData = arg.split('=');\n        commandExecutionArgs[argData[0].replace('--', '')] = argData[1];\n\n        if (!commandExecutionArgs._default) {\n            commandExecutionArgs._default = argData[1];\n        }\n    });\n} else if (!cmdParamString || !cmdArgs.length) {\n    commandExecutionArgs._default = null;\n} else {\n    commandExecutionArgs._default = cmdParamString;\n}\n\nif(process.argv.length > 4){\n    for(let i =  4; i <= process.argv.length-1;i++){\n        const parameter: string = process.argv[i].replace('--', '').replace('-', '_');\n        const valuePair: string[] = parameter.split('=');\n\n        commandExecutionArgs._extra_args[valuePair[0]] = valuePair.length > 1 ? valuePair[1] : true;\n    }\n}\n\nconst executionDir = process.cwd();\n\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir)\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\nconst moduleCfgFile = `${moduleCfgDir}/_cfg_path`;\n\nfunction getConfig(configPath: string, cfgPathFile: string | null = null) \n{    \n    if(cfgPathFile === null){\n        cfgPathFile = configPath;\n\n        if(cfgPathFile){\n            const rwsConfigVar = UtilsService.getRWSVar(cfgPathFile);\n\n            if(rwsConfigVar){\n                configPath = rwsConfigVar;\n            }\n        }      \n    } else {\n        UtilsService.setRWSVar(cfgPathFile, configPath);\n    }                    \n\n    const pathWorkspaceToCwd = path.relative(__dirname, process.cwd());\n\n    console.log(__dirname);\n    \n    const frameworkConfigFactory: () => IAppConfig = require( `./cfg`).default;    \n\n    return frameworkConfigFactory();\n}\n\nfunction copyFileSync(source: string, destination: string) {\n    try {\n        const content = fs.readFileSync(source);\n        fs.writeFileSync(destination, content);\n        console.log(`File copied from ${source} to ${destination}`);\n    } catch (error) {\n        console.error('Error occurred while copying file:', error);\n    }\n}\n\nconst main = async () => {     \n    const cfgPathFile = `_cfg_path`;\n\n    const tsFile = path.resolve(__dirname, '..', 'src') + '/rws.ts';\n    let APP_CFG: IAppConfig | null = null;\n\n    if (command === 'init') {\n        const configPath: string = commandExecutionArgs.config || commandExecutionArgs._default  || 'config/config'       \n\n        const cfgData = getConfig(configPath, cfgPathFile);        \n\n        APP_CFG = cfgData;\n    }\n\n    let savedHash = null;\n    const consoleClientHashFile = `${moduleCfgDir}/_cli_hash`;\n\n    if (fs.existsSync(`${moduleCfgDir}/_cli_hash`)) {\n        savedHash = fs.readFileSync(consoleClientHashFile, 'utf-8');\n    }\n\n    if(!APP_CFG){\n        APP_CFG = getConfig('config/config', cfgPathFile);    \n                \n    }\n\n    if(!APP_CFG){\n        throw new Error(`No config for CLI. Try to initialize with \"yarn rws init config=path/to/config.ts\" (config path from ${process.cwd()}/src)`);\n    }    \n\n    const APP = getAppConfig(APP_CFG);\n\n    const commands: RWSCommand[] = [...RWSAppCommands, ...APP.get('commands')];\n\n    const theCommand = commands.find((cmd: RWSCommand) => cmd.getName() == command);\n    \n    commandExecutionArgs._rws_config = APP_CFG;\n\n    const cmdFiles = MD5Service.batchGenerateCommandFileMD5(moduleCfgDir);\n    const currentSumHashes = (await MD5Service.generateCliHashes([tsFile, ...cmdFiles])).join('/');\n\n    if (!savedHash || currentSumHashes !== savedHash) {\n        fs.writeFileSync(consoleClientHashFile, currentSumHashes);\n    }\n\n    if (theCommand) {        \n        await theCommand.execute(commandExecutionArgs);\n        return;\n    }\n\n    if (!fs.existsSync(`${moduleCfgDir}/${cfgPathFile}`)) {\n        throw new Error('No config path generated for CLI. Try to initialize with \"npx rws init config=path/to/config.ts\"');\n    }\n\n    error(`Unknown command: ${command}.`);\n\n    return;\n}\n\nmain().then(() => {\n    process.exit(0);\n});"],"names":[],"sourceRoot":""}